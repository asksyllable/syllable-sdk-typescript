openapi: "3.1.0"
info:
  title: "SyllableSDK"
  description: "\n# Syllable Platform SDK\n\nSyllable SDK gives you the power of awesome AI agentry. \U0001F680\n\n## Overview\n\nThe Syllable SDK provides a comprehensive set of tools and APIs to integrate powerful AI  \ncapabilities into your communication applications. Whether you're building chatbots, virtual\nassistants, or any other AI-driven solutions, Syllable SDK has got you covered.\n\n## Features\n\n- **Natural Language Processing (NLP)**: Understand and generate human language with ease.\n- **Machine Learning Models**: Leverage pre-trained models or train your own custom models.\n- **Speech Recognition**: Convert speech to text and vice versa.\n- **Data Analytics**: Analyze and visualize data to gain insights.\n- **Integration**: Seamlessly integrate with other services and platforms.\n\n"
  version: "0.0.2"
servers:
  - url: "http://localhost:8001"
    description: "production server"
  - url: "http://localhost:8001"
    description: "production / port-forwarding server"
paths:
  "/api/v1/agents/":
    get:
      tags:
        - "agents"
      summary: "Agent List"
      description: "List the existing agents"
      operationId: "agent_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/AgentProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/AgentProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/AgentProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_AgentResponse_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "agents"
      summary: "Create Agent"
      description: "Create a new agent"
      operationId: "agent_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AgentCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Agent"}
        "400":
          description: "Bad Request"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
    put:
      tags:
        - "agents"
      summary: "Update Agent"
      description: "Update an existing agent"
      operationId: "agent_update"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AgentUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Agent"}
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
  "/api/v1/agents/{agent_id}":
    get:
      tags:
        - "agents"
      summary: "Get Agent By Id"
      description: "Get an agent by ID."
      operationId: "agent_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "agent_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Agent Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AgentResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    delete:
      tags:
        - "agents"
      summary: "Delete Agent"
      operationId: "agent_delete"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "agent_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Agent Id"
        - name: "reason"
          in: "query"
          required: true
          schema:
            type: "string"
            title: "Reason"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
  "/api/v1/agents/voices/available":
    get:
      tags:
        - "agents"
        - "V1"
      summary: "Get Available Agent Voices"
      description: "Get available agent voices."
      operationId: "agent_get_available_voices"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/AgentVoice"}
                type: "array"
                title: "Response Agent Get Available Voices"
      security:
        - APIKeyHeader: []
  "/api/v1/channels/":
    get:
      tags:
        - "channels"
      summary: "Get Channels"
      operationId: "channels_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/ChannelProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ChannelProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/ChannelProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Channel_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/agents/test/messages":
    post:
      tags:
        - "agents.test"
      summary: "Send New Message"
      description: "Send a new message"
      operationId: "send_test_message"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/TestMessage"}
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TestMessageResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      security:
        - APIKeyHeader: []
  "/api/v1/conversations/":
    get:
      tags:
        - "conversations"
      summary: "Conversations List"
      operationId: "conversations_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/ConversationProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ConversationProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/ConversationProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Conversation_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/events/":
    get:
      tags:
        - "events"
      summary: "Events List"
      operationId: "events_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/EventProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/EventProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/EventProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Event_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/custom_messages/":
    get:
      tags:
        - "custom_messages"
      summary: "Custom Messages List"
      description: "List the existing custom_messages"
      operationId: "custom_messages_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/CustomMessageProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/CustomMessageProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/CustomMessageProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_CustomMessageResponse_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "custom_messages"
      summary: "Create Custom Message"
      description: "Create a new custom message"
      operationId: "custom_messages_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CustomMessageCreateRequest"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomMessageResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "custom_messages"
      summary: "Update Custom Message"
      description: "Update a custom message"
      operationId: "custom_messages_update"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CustomMessageUpdateRequest"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomMessageResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/custom_messages/{custom_message_id}":
    get:
      tags:
        - "custom_messages"
      summary: "Get Custom Message By Id"
      description: "Get the custom message by its ID"
      operationId: "custom_message_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "custom_message_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Custom Message Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomMessageResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    delete:
      tags:
        - "custom_messages"
      summary: "Delete Custom Message"
      description: "Delete custom message by ID"
      operationId: "custom_messages_delete"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "custom_message_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Custom Message Id"
        - name: "reason"
          in: "query"
          required: true
          schema:
            type: "string"
            title: "Reason"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/prompts/":
    get:
      tags:
        - "prompts"
      summary: "Prompt List"
      description: "List the existing prompts"
      operationId: "prompts_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/PromptProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/PromptProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/PromptProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Prompt_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "prompts"
      summary: "Create Prompt"
      description: "Create a new prompt"
      operationId: "prompts_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PromptCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Prompt"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "prompts"
      summary: "Update Prompt"
      description: "Update an existing prompt"
      operationId: "prompts_update"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PromptUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Prompt"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/prompts/{prompt_id}":
    get:
      tags:
        - "prompts"
      summary: "Get Prompt By Id"
      description: "Get a prompt by ID"
      operationId: "prompts_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "prompt_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Prompt Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Prompt"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    delete:
      tags:
        - "prompts"
      summary: "Delete Prompt"
      description: "Delete a prompt"
      operationId: "prompts_delete"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "prompt_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Prompt Id"
        - name: "reason"
          in: "query"
          required: true
          schema:
            type: "string"
            title: "Reason"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/prompts/{prompt_id}/history":
    get:
      tags:
        - "prompts"
      summary: "Get Prompt History"
      description: "Get a prompt by ID"
      operationId: "prompts_history"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "prompt_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Prompt Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/PromptHistory"}
                title: "Response Prompts History"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/services/":
    get:
      tags:
        - "services"
      summary: "Service List"
      description: "List the existing agents"
      operationId: "service_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/ServiceProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ServiceProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/ServiceProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Service_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "services"
      summary: "Create Service"
      operationId: "service_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ServiceCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Service"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "services"
      summary: "Update Service"
      operationId: "service_update"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ServiceUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Service"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/session_labels/{session_label_id}":
    get:
      tags:
        - "session_labels"
      summary: "Get Label By Id"
      operationId: "session_label_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "session_label_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Session Label Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionLabel"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/session_labels/":
    post:
      tags:
        - "session_labels"
      summary: "Create Label"
      description: "Create a new label"
      operationId: "session_label_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/SessionLabelCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionLabel"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    get:
      tags:
        - "session_labels"
      summary: "Session Labels List"
      operationId: "session_labels_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/SessionLabelProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/SessionLabelProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/SessionLabelProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_SessionLabel_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/sessions/":
    get:
      tags:
        - "sessions"
      summary: "Sessions List"
      operationId: "sessions_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/SessionProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/SessionProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/SessionProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Session_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/sessions/transcript/{session_id}":
    get:
      tags:
        - "sessions.transcript"
      summary: "Get Session Transcript By Id"
      operationId: "session_transcript_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "session_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Session Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionTranscriptionResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/sessions/{session_id}":
    get:
      tags:
        - "sessions"
      summary: "Get A Single Session By Id"
      operationId: "session_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "session_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Session Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Session"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/sessions/recording/{session_id}":
    post:
      tags:
        - "sessions"
      summary: "Generate Recording Urls"
      operationId: "generate_session_recording_urls"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "session_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Session Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionRecordingResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/sessions/recording/stream":
    get:
      tags:
        - "sessions"
      summary: "Stream Recording"
      operationId: "session_recording_stream"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "token"
          in: "query"
          required: true
          schema:
            type: "string"
            title: "Token"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/octet-stream":
              schema:
                type: "string"
                title: "bytes"
                format: "binary"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/tools/":
    get:
      tags:
        - "tools"
      summary: "Tool List"
      description: "List the existing tools"
      operationId: "tool_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/ToolProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ToolProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/ToolProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_Tool_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "tools"
      summary: "Create Tool"
      description: "Create a new tool"
      operationId: "tool_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ToolCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Tool"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "tools"
      summary: "Update Tool"
      description: "Update an existing tool"
      operationId: "tool_update"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ToolUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Tool"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/tools/{tool_name}":
    get:
      tags:
        - "tools"
      summary: "Tool Info"
      description: "Get the details of a specific tool"
      operationId: "tool_get_by_name"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "tool_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Tool Name"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ToolDetailResponse"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/channels/available-targets":
    get:
      tags:
        - "channels.targets"
      summary: "Available Targets List"
      description: "List the available phone numbers"
      operationId: "available_targets"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/AvailableTargetProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/AvailableTargetProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/AvailableTargetProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_AvailableTarget_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/channels/targets":
    get:
      tags:
        - "channels.targets"
      summary: "Get Channel Targets"
      operationId: "channel_targets_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/ChannelTargetProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ChannelTargetProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/ChannelTargetProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_ChannelTarget_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/channels/{channel_id}/targets":
    post:
      tags:
        - "channels.targets"
      summary: "Assign A Channel Target"
      operationId: "channel_targets_create"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "channel_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Channel Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ChannelTargetCreateRequest"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ChannelTarget"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/channels/{channel_id}/targets/{target_id}":
    get:
      tags:
        - "channels.targets"
      summary: "Get A Channel Target"
      operationId: "channel_targets_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "channel_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Channel Id"
        - name: "target_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Target Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ChannelTarget"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "channels.targets"
      summary: "Edit Channel Target"
      description: "Update channel target by ID"
      operationId: "channel_targets_update"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "channel_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Channel Id"
        - name: "target_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Target Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ChannelTargetUpdateRequest"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ChannelTarget"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/channels/{channel_id}":
    delete:
      tags:
        - "channels"
      summary: "Delete Channel Target"
      description: "Hard-delete a channel target by ID"
      operationId: "channel_targets_delete"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "channel_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Channel Id"
        - name: "target_id"
          in: "query"
          required: true
          schema:
            type: "string"
            title: "Target Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/directory_members/":
    get:
      tags:
        - "directory"
        - "V1"
      summary: "Directory Member List"
      description: "List the existing directory_members"
      operationId: "directory_member_list"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 0
              - type: "null"
            default: 0
            title: "Page"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            minimum: 0
            default: 25
            title: "Limit"
        - name: "search_fields"
          in: "query"
          required: false
          schema:
            type: "array"
            items: {"$ref": "#/components/schemas/DirectoryMemberProperties"}
            default: []
            title: "Search Fields"
        - name: "search_field_values"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: []
            title: "Search Field Values"
        - name: "order_by"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/DirectoryMemberProperties"}
              - type: "null"
            title: "Order By"
        - name: "order_by_direction"
          in: "query"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/OrderByDirection"}
              - type: "null"
            title: "Order By Direction"
        - name: "fields"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "array"
                items: {"$ref": "#/components/schemas/DirectoryMemberProperties"}
              - type: "null"
            default: []
            title: "Fields"
        - name: "start_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Start Datetime"
        - name: "end_datetime"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "End Datetime"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResponse_DirectoryMember_"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    post:
      tags:
        - "directory"
        - "V1"
      summary: "Create Directory Member"
      description: "Create a new member in the directory"
      operationId: "directory_member_create"
      security:
        - APIKeyHeader: []
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DirectoryMemberCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DirectoryMember"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/api/v1/directory_members/{member_id}":
    get:
      tags:
        - "directory"
        - "V1"
      summary: "Get Directory Member By Id"
      description: "Get a DirectoryMember by ID."
      operationId: "directory_member_get_by_id"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "member_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Member Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DirectoryMember"}
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "directory"
        - "V1"
      summary: "Update Directory Member"
      description: "Update a DirectoryMember."
      operationId: "directory_member_update"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "member_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Member Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DirectoryMember"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DirectoryMember"}
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "412":
          description: "Precondition Failed"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
    delete:
      tags:
        - "directory"
        - "V1"
      summary: "Delete Directory Member"
      description: "Delete a DirectoryMember."
      operationId: "directory_member_delete"
      security:
        - APIKeyHeader: []
      parameters:
        - name: "member_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            title: "Member Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
  "/api/v1/directory_members/upload/":
    put:
      tags:
        - "directory"
        - "V1"
      summary: "Bulk Load Directory Members"
      description: "Update Directory Members in chunks of 100."
      operationId: "directory_member_bulk_load"
      requestBody:
        content:
          "multipart/form-data":
            schema: {"$ref": "#/components/schemas/Body_directory_member_bulk_load"}
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "412":
          description: "Precondition Failed"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
        "500":
          description: "Internal Server Error"
      security:
        - APIKeyHeader: []
  "/api/v1/directory_members/download/":
    get:
      tags:
        - "directory"
        - "V1"
      summary: "Download Directory Members"
      description: "Download the entire directory as a JSON file."
      operationId: "directory_member_download"
      responses:
        "200":
          description: "Directory downloaded successfully"
          content:
            "application/json":
              schema: {}
        "500":
          description: "Internal Server Error"
      security:
        - APIKeyHeader: []
components:
  schemas:
    "Agent":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
        "timezone":
          type: "string"
          title: "Timezone"
        "type":
          type: "string"
          title: "Type"
        "prompt_id":
          type: "integer"
          title: "Prompt Id"
        "custom_message_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Custom Message Id"
        "languages":
          items:
            type: "string"
          type: "array"
          title: "Languages"
        "prompt_tool_defaults":
          items: {"$ref": "#/components/schemas/AgentToolDefaults"}
          type: "array"
          title: "Prompt Tool Defaults"
        "tool_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Tool Headers"
        "variables":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Variables"
        "id":
          type: "integer"
          title: "Id"
          description: "The Agent ID"
        "updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Updated At"
        "channel_targets":
          anyOf:
            - items: {"$ref": "#/components/schemas/Target"}
              type: "array"
            - type: "null"
          title: "Channel Targets"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
      type: "object"
      required:
        - "name"
        - "timezone"
        - "type"
        - "prompt_id"
        - "custom_message_id"
        - "languages"
        - "id"
      title: "Agent"
    "AgentCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
        "timezone":
          type: "string"
          title: "Timezone"
        "type":
          type: "string"
          title: "Type"
        "prompt_id":
          type: "integer"
          title: "Prompt Id"
        "custom_message_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Custom Message Id"
        "languages":
          items:
            type: "string"
          type: "array"
          title: "Languages"
        "prompt_tool_defaults":
          items: {"$ref": "#/components/schemas/AgentToolDefaults"}
          type: "array"
          title: "Prompt Tool Defaults"
        "tool_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Tool Headers"
        "variables":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Variables"
      type: "object"
      required:
        - "name"
        - "timezone"
        - "type"
        - "prompt_id"
        - "custom_message_id"
        - "languages"
      title: "AgentCreate"
    "AgentProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "description"
        - "label"
        - "name_description"
        - "type"
        - "timezone"
        - "prompt_id"
        - "prompt_id_list"
        - "custom_message_id"
        - "languages"
        - "variables"
        - "prompt_tool_defaults"
        - "tool_headers"
        - "updated_at"
        - "last_updated_by"
      title: "AgentProperties"
    "AgentResponse":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The Agent name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
          description: "The Agent description"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
          description: "The Agent label"
        "type":
          type: "string"
          title: "Type"
          description: "The Agent type"
        "prompt_id":
          type: "integer"
          title: "Prompt Id"
          description: "The Agent's prompt id"
        "custom_message_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Custom Message Id"
          description: "The Agent's custom message id"
        "timezone":
          type: "string"
          title: "Timezone"
          description: "The time zone the bot operates in"
        "prompt_tool_defaults":
          items: {"$ref": "#/components/schemas/AgentToolDefaults"}
          type: "array"
          title: "Prompt Tool Defaults"
        "languages":
          items:
            type: "string"
          type: "array"
          title: "Languages"
        "variables":
          additionalProperties:
            type: "string"
          type: "object"
          title: "Variables"
        "tool_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Tool Headers"
          description: "Optional headers to include in tool calls."
        "id":
          type: "integer"
          title: "Id"
          description: "The Agent ID"
        "updated_at":
          type: "string"
          format: "date-time"
          title: "Updated At"
          description: "Timestamp of most recent update"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
          description: "Email of the user who last updated the agent"
        "channel_targets":
          anyOf:
            - items: {"$ref": "#/components/schemas/Target"}
              type: "array"
            - type: "null"
          title: "Channel Targets"
          description: "Channel targets associated with the agent"
        "prompt":
          anyOf:
            - {"$ref": "#/components/schemas/Prompt"}
            - type: "null"
          description: "The prompt associated with the agent"
        "custom_message":
          anyOf:
            - {"$ref": "#/components/schemas/CustomMessage"}
            - type: "null"
          description: "The custom message associated with the agent"
      type: "object"
      required:
        - "name"
        - "type"
        - "prompt_id"
        - "timezone"
        - "prompt_tool_defaults"
        - "languages"
        - "variables"
        - "tool_headers"
        - "id"
        - "updated_at"
        - "last_updated_by"
      title: "AgentResponse"
    "AgentToolDefaults":
      properties:
        "tool_name":
          type: "string"
          title: "Tool Name"
        "default_values":
          items: {"$ref": "#/components/schemas/AgentToolFieldDefault"}
          type: "array"
          title: "Default Values"
      type: "object"
      required:
        - "tool_name"
        - "default_values"
      title: "AgentToolDefaults"
    "AgentToolFieldDefault":
      properties:
        "field_name":
          type: "string"
          title: "Field Name"
        "default_value":
          title: "Default Value"
      type: "object"
      required:
        - "field_name"
        - "default_value"
      title: "AgentToolFieldDefault"
    "AgentUpdate":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
        "timezone":
          type: "string"
          title: "Timezone"
        "type":
          type: "string"
          title: "Type"
        "prompt_id":
          type: "integer"
          title: "Prompt Id"
        "custom_message_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Custom Message Id"
        "languages":
          items:
            type: "string"
          type: "array"
          title: "Languages"
        "prompt_tool_defaults":
          items: {"$ref": "#/components/schemas/AgentToolDefaults"}
          type: "array"
          title: "Prompt Tool Defaults"
        "tool_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Tool Headers"
        "variables":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Variables"
        "id":
          type: "integer"
          title: "Id"
          description: "The Agent ID"
      type: "object"
      required:
        - "name"
        - "timezone"
        - "type"
        - "prompt_id"
        - "custom_message_id"
        - "languages"
        - "id"
      title: "AgentUpdate"
    "AgentVoice":
      properties:
        "provider": {"$ref": "#/components/schemas/SttProvider"}
        "display_name":
          type: "string"
          title: "Display Name"
        "var_name": {"$ref": "#/components/schemas/AgentVoiceVarName"}
      type: "object"
      required:
        - "provider"
        - "display_name"
        - "var_name"
      title: "AgentVoice"
    "AgentVoiceVarName":
      type: "string"
      enum:
        - "openai:alloy"
        - "openai:echo"
        - "openai:fable"
        - "openai:nova"
        - "openai:onyx"
        - "openai:shimmer"
        - "elevenlabs:Alice"
        - "elevenlabs:Bill"
        - "elevenlabs:Brian"
        - "elevenlabs:Callum"
        - "elevenlabs:Charlie"
        - "elevenlabs:Charlotte"
        - "elevenlabs:Chris"
        - "elevenlabs:Daniel"
        - "elevenlabs:Eric"
        - "elevenlabs:George"
        - "elevenlabs:Jessica"
        - "elevenlabs:Laura"
        - "elevenlabs:Liam"
        - "elevenlabs:Lily"
        - "elevenlabs:Matilda"
        - "elevenlabs:River"
        - "elevenlabs:Roger"
        - "elevenlabs:Sarah"
        - "elevenlabs:Will"
        - "wavenet:female/en-US-Neural2-F"
        - "wavenet:male/en-US-Neural2-D"
        - "wavenet:female/en-US-Studio-O"
      title: "AgentVoiceVarName"
    "AvailableTarget":
      properties:
        "organization_id":
          type: "integer"
          title: "Organization Id"
        "channel_id":
          type: "integer"
          title: "Channel Id"
        "channel_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Name"
        "target":
          type: "string"
          title: "Target"
      type: "object"
      required:
        - "organization_id"
        - "channel_id"
        - "channel_name"
        - "target"
      title: "AvailableTarget"
    "AvailableTargetProperties":
      type: "string"
      enum:
        - "channel_id"
        - "channel_name"
        - "target"
      title: "AvailableTargetProperties"
    "Body_directory_member_bulk_load":
      properties:
        "file":
          type: "string"
          format: "binary"
          title: "File"
      type: "object"
      required:
        - "file"
      title: "Body_directory_member_bulk_load"
    "Channel":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The channel name"
        "channel_service": {"$ref": "#/components/schemas/ChannelServices", "description": "The service for the channel"}
        "supported_modes":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Supported Modes"
          description: "The comma-delimited list of supported modes for the channel"
        "id":
          type: "integer"
          title: "Id"
          description: "The channel ID"
      type: "object"
      required:
        - "name"
        - "channel_service"
        - "id"
      title: "Channel"
    "ChannelProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "channel_service"
        - "supported_modes"
      title: "ChannelProperties"
    "ChannelServices":
      type: "string"
      enum:
        - "sip"
        - "twilio"
        - "email"
        - "webchat"
      title: "ChannelServices"
    "ChannelTarget":
      properties:
        "id":
          type: "integer"
          title: "Id"
        "channel_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Channel Id"
        "channel_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Name"
        "agent_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Agent Id"
        "agent":
          anyOf:
            - {"$ref": "#/components/schemas/DaoChannelTargetAgent"}
            - type: "null"
        "target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target"
        "target_mode":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target Mode"
        "fallback_target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Fallback Target"
        "is_test":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Test"
        "updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Updated At"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
      type: "object"
      required:
        - "id"
        - "channel_id"
        - "channel_name"
        - "agent_id"
        - "agent"
        - "target"
        - "target_mode"
        - "fallback_target"
        - "is_test"
        - "updated_at"
        - "last_updated_by"
      title: "ChannelTarget"
      description: "Class for all Channel Target responses"
    "ChannelTargetCreateRequest":
      properties:
        "channel_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Channel Id"
        "agent_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Agent Id"
        "target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target"
        "target_mode":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target Mode"
        "fallback_target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Fallback Target"
        "is_test":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Test"
      type: "object"
      required:
        - "channel_id"
        - "agent_id"
        - "target"
        - "target_mode"
        - "fallback_target"
        - "is_test"
      title: "ChannelTargetCreateRequest"
    "ChannelTargetProperties":
      type: "string"
      enum:
        - "id"
        - "channel_id"
        - "channel_name"
        - "agent_id"
        - "target"
        - "target_mode"
        - "fallback_target"
        - "is_test"
      title: "ChannelTargetProperties"
    "ChannelTargetUpdateRequest":
      properties:
        "id":
          type: "integer"
          title: "Id"
        "channel_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Channel Id"
        "agent_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Agent Id"
        "target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target"
        "target_mode":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target Mode"
        "fallback_target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Fallback Target"
        "is_test":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Test"
      type: "object"
      required:
        - "id"
        - "channel_id"
        - "agent_id"
        - "target"
        - "target_mode"
        - "fallback_target"
        - "is_test"
      title: "ChannelTargetUpdateRequest"
    "Conversation":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "conversation_id":
          type: "string"
          title: "Conversation Id"
        "agent_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Id"
        "agent_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Name"
        "agent_type":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Type"
        "prompt_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Id"
        "prompt_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Name"
        "prompt_version":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Version"
        "llm_provider":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Llm Provider"
        "llm_model":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Llm Model"
        "llm_version":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Llm Version"
        "is_legacy":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Legacy"
      type: "object"
      required:
        - "timestamp"
        - "conversation_id"
      title: "Conversation"
    "ConversationProperties":
      type: "string"
      enum:
        - "timestamp"
        - "agent_type"
        - "agent_id"
        - "agent_name"
        - "prompt_id"
        - "prompt_name"
        - "llm_provider"
        - "llm_model"
        - "llm_version"
        - "is_legacy"
      title: "ConversationProperties"
    "CustomMessage":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the custom message"
        "text":
          type: "string"
          title: "Text"
          description: "The text of the custom message"
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the custom message"
      type: "object"
      required:
        - "name"
        - "text"
        - "id"
      title: "CustomMessage"
    "CustomMessageCreateRequest":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the custom message"
        "text":
          type: "string"
          title: "Text"
          description: "The text of the custom message"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
          description: "The label of the custom message"
        "rules":
          items: {"$ref": "#/components/schemas/DaoCustomMessageRule"}
          type: "array"
          title: "Rules"
          description: "Rules for time-specific message variants"
          default: []
        "type":
          type: "string"
          title: "Type"
          default: "greeting"
      type: "object"
      required:
        - "name"
        - "text"
      title: "CustomMessageCreateRequest"
    "CustomMessageProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "text"
        - "label"
        - "updated_at"
      title: "CustomMessageProperties"
    "CustomMessageResponse":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the custom message"
        "text":
          type: "string"
          title: "Text"
          description: "The text of the custom message"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
          description: "The label of the custom message"
        "rules":
          items: {"$ref": "#/components/schemas/DaoCustomMessageRule"}
          type: "array"
          title: "Rules"
          description: "Rules for time-specific message variants"
          default: []
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the custom message"
        "updated_at":
          type: "string"
          format: "date-time"
          title: "Updated At"
          description: "Timestamp of the most recent update to the custom message"
        "agent_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Agent Count"
          description: "The number of agents using the custom message"
        "last_updated_by":
          type: "string"
          title: "Last Updated By"
          description: "The email address of the user who most recently updated the custom message"
        "type":
          type: "string"
          title: "Type"
          default: "greeting"
      type: "object"
      required:
        - "name"
        - "text"
        - "id"
        - "updated_at"
        - "last_updated_by"
      title: "CustomMessageResponse"
    "CustomMessageUpdateRequest":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the custom message"
        "text":
          type: "string"
          title: "Text"
          description: "The text of the custom message"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
          description: "The label of the custom message"
        "rules":
          items: {"$ref": "#/components/schemas/DaoCustomMessageRule"}
          type: "array"
          title: "Rules"
          description: "Rules for time-specific message variants"
          default: []
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the custom message"
        "type":
          type: "string"
          title: "Type"
          default: "greeting"
      type: "object"
      required:
        - "name"
        - "text"
        - "id"
      title: "CustomMessageUpdateRequest"
    "DaoChannelTargetAgent":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "label":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Label"
        "type":
          type: "string"
          title: "Type"
        "prompt_id":
          type: "integer"
          title: "Prompt Id"
        "custom_message_id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Custom Message Id"
        "timezone":
          type: "string"
          title: "Timezone"
        "id":
          type: "integer"
          title: "Id"
        "updated_at":
          type: "string"
          format: "date-time"
          title: "Updated At"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
      type: "object"
      required:
        - "name"
        - "type"
        - "prompt_id"
        - "timezone"
        - "id"
        - "updated_at"
        - "last_updated_by"
      title: "DaoChannelTargetAgent"
    "DaoCustomMessageRule":
      properties:
        "description":
          type: "string"
          title: "Description"
          description: "The description of the rule"
        "time_range_start":
          anyOf:
            - type: "string"
              pattern: "^([01]\\d|2[0-3]):[0-5]\\d$"
            - type: "null"
          title: "Time Range Start"
          description: "The start of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)"
        "time_range_end":
          anyOf:
            - type: "string"
              pattern: "^([01]\\d|2[0-3]):[0-5]\\d$"
            - type: "null"
          title: "Time Range End"
          description: "The end of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)"
        "date":
          anyOf:
            - type: "string"
              pattern: "\\b(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b"
            - type: "null"
          title: "Date"
          description: "The date for the rule in YYYY-MM-DD format"
        "days_of_week":
          anyOf:
            - items: {"$ref": "#/components/schemas/DayOfWeek"}
              type: "array"
            - type: "null"
          title: "Days Of Week"
          description: "The days of the week for the rule"
        "invert":
          type: "boolean"
          title: "Invert"
          description: "Whether the rule logic should be inverted (i.e. \"not\")"
        "text":
          type: "string"
          title: "Text"
          description: "Message text associated with the rule"
      type: "object"
      required:
        - "description"
        - "invert"
        - "text"
      title: "DaoCustomMessageRule"
    "DayOfWeek":
      type: "string"
      enum:
        - "mo"
        - "tu"
        - "we"
        - "th"
        - "fr"
        - "sa"
        - "su"
      title: "DayOfWeek"
    "DirectoryExtension":
      properties:
        "name":
          type: "string"
          title: "Name"
        "numbers":
          anyOf:
            - items:
                type: "object"
              type: "array"
            - type: "null"
          title: "Numbers"
      type: "object"
      required:
        - "name"
      title: "DirectoryExtension"
    "DirectoryMember":
      properties:
        "name":
          type: "string"
          title: "Name"
        "type":
          type: "string"
          title: "Type"
        "extensions":
          anyOf:
            - items: {"$ref": "#/components/schemas/DirectoryExtension"}
              type: "array"
            - type: "null"
          title: "Extensions"
        "contact_tags":
          anyOf:
            - type: "object"
            - type: "null"
          title: "Contact Tags"
        "updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Updated At"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
        "id":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Id"
      type: "object"
      required:
        - "name"
        - "type"
      title: "DirectoryMember"
    "DirectoryMemberCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
        "type":
          type: "string"
          title: "Type"
        "extensions":
          anyOf:
            - items: {"$ref": "#/components/schemas/DirectoryExtension"}
              type: "array"
            - type: "null"
          title: "Extensions"
        "contact_tags":
          anyOf:
            - type: "object"
            - type: "null"
          title: "Contact Tags"
        "updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Updated At"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
      type: "object"
      required:
        - "name"
        - "type"
      title: "DirectoryMemberCreate"
    "DirectoryMemberProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "type"
        - "extensions"
        - "contact_tags"
        - "updated_at"
      title: "DirectoryMemberProperties"
    "Event":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "session_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Session Id"
        "conversation_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Conversation Id"
        "source":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Source"
        "source_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Source Id"
        "category":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Category"
        "type":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Type"
        "user_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "User Id"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "attributes":
          anyOf:
            - type: "object"
            - type: "null"
          title: "Attributes"
      type: "object"
      required:
        - "timestamp"
      title: "Event"
    "EventProperties":
      type: "string"
      enum:
        - "timestamp"
        - "session_id"
        - "conversation_id"
        - "source"
        - "source_id"
        - "category"
        - "type"
        - "user_id"
        - "description"
        - "attributes"
      title: "EventProperties"
    "HTTPValidationError":
      properties:
        "detail":
          items: {"$ref": "#/components/schemas/ValidationError"}
          type: "array"
          title: "Detail"
      type: "object"
      title: "HTTPValidationError"
    "ListResponse_AgentResponse_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/AgentResponse"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[AgentResponse]"
    "ListResponse_AvailableTarget_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/AvailableTarget"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[AvailableTarget]"
    "ListResponse_ChannelTarget_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/ChannelTarget"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[ChannelTarget]"
    "ListResponse_Channel_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Channel"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Channel]"
    "ListResponse_Conversation_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Conversation"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Conversation]"
    "ListResponse_CustomMessageResponse_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/CustomMessageResponse"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[CustomMessageResponse]"
    "ListResponse_DirectoryMember_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/DirectoryMember"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[DirectoryMember]"
    "ListResponse_Event_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Event"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Event]"
    "ListResponse_Prompt_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Prompt"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Prompt]"
    "ListResponse_Service_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Service"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Service]"
    "ListResponse_SessionLabel_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/SessionLabel"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[SessionLabel]"
    "ListResponse_Session_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Session"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Session]"
    "ListResponse_Tool_":
      properties:
        "items":
          items: {"$ref": "#/components/schemas/Tool"}
          type: "array"
          title: "Items"
        "page":
          type: "integer"
          title: "Page"
        "page_size":
          type: "integer"
          title: "Page Size"
        "total_pages":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Pages"
        "total_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Total Count"
      type: "object"
      required:
        - "items"
        - "page"
        - "page_size"
      title: "ListResponse[Tool]"
    "LlmConfig":
      properties:
        "provider": {"$ref": "#/components/schemas/Provider", "description": "Provider of the LLM model.", "default": "azure_openai", "examples": ["azure_openai", "openai"]}
        "model":
          type: "string"
          title: "Model"
          description: "Name of the model. Must match the deployment name in Azure AI Studio."
          default: "gpt-4o"
          examples:
            - "gpt-4o"
        "version":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Version"
          description: "Optional model version."
          examples:
            - "2024-05-13"
        "api_version":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Api Version"
          description: "Version of the API. (Currently only used for Azure OpenAI.)"
          examples:
            - "2024-06-01"
      type: "object"
      title: "LlmConfig"
    "OrderByDirection":
      type: "string"
      enum:
        - "asc"
        - "desc"
      title: "OrderByDirection"
    "Prompt":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The Prompt name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
          description: "The description of the prompt"
        "type":
          type: "string"
          title: "Type"
          description: "The type of the prompt"
        "context":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Context"
          description: "The prompt text"
        "tools":
          items:
            type: "string"
          type: "array"
          title: "Tools"
          description: "The tools for the prompt"
          default: []
        "llm_config": {"$ref": "#/components/schemas/LlmConfig", "description": "The configuration for the language model used by the Cortex API."}
        "id":
          type: "integer"
          title: "Id"
          description: "The Prompt ID"
        "edit_comments":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Edit Comments"
          description: "The comments for the last edit"
        "last_updated":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated"
          description: "The last updated date of the prompt"
        "last_updated_by":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Last Updated By"
          description: "The last updated user who last updated of the prompt"
        "agent_count":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Agent Count"
          description: "The number of agents using the prompt"
      type: "object"
      required:
        - "name"
        - "type"
        - "llm_config"
        - "id"
        - "last_updated"
      title: "Prompt"
    "PromptCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The Prompt name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
          description: "The description of the prompt"
        "type":
          type: "string"
          title: "Type"
          description: "The type of the prompt"
        "context":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Context"
          description: "The prompt text"
        "tools":
          items:
            type: "string"
          type: "array"
          title: "Tools"
          description: "The tools for the prompt"
          default: []
        "llm_config": {"$ref": "#/components/schemas/LlmConfig", "description": "The configuration for the language model used by the Cortex API."}
      type: "object"
      required:
        - "name"
        - "type"
        - "llm_config"
      title: "PromptCreate"
    "PromptHistory":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "prompt_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Id"
        "prompt_text":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Text"
        "prompt_description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Description"
        "prompt_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Name"
        "llm_config":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Llm Config"
        "comments":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Comments"
        "user_email":
          anyOf:
            - type: "string"
            - type: "null"
          title: "User Email"
      type: "object"
      required:
        - "timestamp"
      title: "PromptHistory"
    "PromptProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "description"
        - "name_description"
        - "context"
        - "tools"
        - "llm_config"
        - "last_updated"
        - "last_updated_by"
        - "agent_count"
      title: "PromptProperties"
    "PromptUpdate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The Prompt name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
          description: "The description of the prompt"
        "type":
          type: "string"
          title: "Type"
          description: "The type of the prompt"
        "context":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Context"
          description: "The prompt text"
        "tools":
          items:
            type: "string"
          type: "array"
          title: "Tools"
          description: "The tools for the prompt"
          default: []
        "llm_config": {"$ref": "#/components/schemas/LlmConfig", "description": "The configuration for the language model used by the Cortex API."}
        "id":
          type: "integer"
          title: "Id"
          description: "The Prompt ID"
        "edit_comments":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Edit Comments"
          description: "The comments for the last edit"
      type: "object"
      required:
        - "name"
        - "type"
        - "llm_config"
        - "id"
      title: "PromptUpdate"
    "Provider":
      type: "string"
      enum:
        - "azure_openai"
        - "openai"
      title: "Provider"
      description: "LLM API provider."
    "Service":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the service"
        "description":
          type: "string"
          title: "Description"
          description: "The description of the service"
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the service"
        "tools":
          items:
            type: "string"
          type: "array"
          title: "Tools"
          description: "The tools of the service"
      type: "object"
      required:
        - "name"
        - "description"
        - "id"
        - "tools"
      title: "Service"
    "ServiceCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the service"
        "description":
          type: "string"
          title: "Description"
          description: "The description of the service"
      type: "object"
      required:
        - "name"
        - "description"
      title: "ServiceCreate"
    "ServiceProperties":
      type: "string"
      enum:
        - "id"
        - "name"
      title: "ServiceProperties"
    "ServiceUpdate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the service"
        "description":
          type: "string"
          title: "Description"
          description: "The description of the service"
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the service"
      type: "object"
      required:
        - "name"
        - "description"
        - "id"
      title: "ServiceUpdate"
    "Session":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "session_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Session Id"
        "conversation_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Conversation Id"
        "channel_manager_service":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Manager Service"
        "channel_manager_type":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Manager Type"
        "channel_manager_sid":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Manager Sid"
        "agent_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Id"
        "agent_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Name"
        "agent_type":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Type"
        "agent_timezone":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Agent Timezone"
        "prompt_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Id"
        "prompt_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Name"
        "prompt_version":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Prompt Version"
        "duration":
          anyOf:
            - type: "number"
            - type: "null"
          title: "Duration"
        "session_label_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Session Label Id"
        "source":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Source"
        "target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Target"
        "is_legacy":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Legacy"
        "is_test":
          anyOf:
            - type: "boolean"
            - type: "null"
          title: "Is Test"
      type: "object"
      required:
        - "timestamp"
      title: "Session"
    "SessionAction":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "tool_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Tool Name"
        "tool_request":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Tool Request"
        "tool_result":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Tool Result"
      type: "object"
      required:
        - "timestamp"
      title: "SessionAction"
    "SessionLabel":
      properties:
        "session_id":
          type: "integer"
          title: "Session Id"
        "type":
          type: "string"
          title: "Type"
        "code":
          type: "string"
          title: "Code"
        "user_email":
          type: "string"
          title: "User Email"
        "comments":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Comments"
        "issue_categories":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Issue Categories"
          default: []
        "id":
          type: "integer"
          title: "Id"
          description: "The label ID"
        "timestamp":
          type: "string"
          title: "Timestamp"
          description: "The timestamp of the label creation"
      type: "object"
      required:
        - "session_id"
        - "type"
        - "code"
        - "user_email"
        - "id"
        - "timestamp"
      title: "SessionLabel"
    "SessionLabelCreate":
      properties:
        "session_id":
          type: "integer"
          title: "Session Id"
        "type":
          type: "string"
          title: "Type"
        "code":
          type: "string"
          title: "Code"
        "user_email":
          type: "string"
          title: "User Email"
        "comments":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Comments"
        "issue_categories":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Issue Categories"
          default: []
      type: "object"
      required:
        - "session_id"
        - "type"
        - "code"
        - "user_email"
      title: "SessionLabelCreate"
    "SessionLabelProperties":
      type: "string"
      enum:
        - "timestamp"
        - "session_id"
        - "type"
        - "code"
        - "user_email"
        - "issue_categories"
        - "session_id_list"
      title: "SessionLabelProperties"
    "SessionProperties":
      type: "string"
      enum:
        - "timestamp"
        - "session_id"
        - "conversation_id"
        - "channel_manager_service"
        - "channel_manager_type"
        - "channel_manager_sid"
        - "agent_type"
        - "agent_id"
        - "agent_name"
        - "prompt_id"
        - "prompt_name"
        - "source"
        - "target"
        - "duration"
        - "is_legacy"
        - "is_test"
      title: "SessionProperties"
    "SessionRecordingResponse":
      properties:
        "session_id":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Session Id"
        "recordings":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Recordings"
        "expiration":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Expiration"
      type: "object"
      title: "SessionRecordingResponse"
    "SessionText":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "lang":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Lang"
        "source":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Source"
        "text":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Text"
      type: "object"
      required:
        - "timestamp"
      title: "SessionText"
    "SessionTranscriptionResponse":
      properties:
        "session_id":
          type: "string"
          title: "Session Id"
        "transcription":
          items: {"$ref": "#/components/schemas/SessionText"}
          type: "array"
          title: "Transcription"
        "actions":
          items: {"$ref": "#/components/schemas/SessionAction"}
          type: "array"
          title: "Actions"
      type: "object"
      required:
        - "session_id"
        - "transcription"
        - "actions"
      title: "SessionTranscriptionResponse"
    "SttProvider":
      type: "string"
      enum:
        - "OpenAI"
        - "ElevenLabs"
        - "Google"
      title: "SttProvider"
    "Target":
      properties:
        "agent_id":
          type: "integer"
          title: "Agent Id"
          description: "The Agent ID"
        "target":
          type: "string"
          title: "Target"
          description: "The Target"
        "target_mode": {"$ref": "#/components/schemas/TargetModes", "description": "The target mode"}
        "channel_id":
          type: "integer"
          title: "Channel Id"
          description: "The Channel ID"
        "fallback_target":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Fallback Target"
          description: "The Fallback Target"
        "is_test":
          type: "boolean"
          title: "Is Test"
          description: "Whether the Target is for testing"
          default: false
        "id":
          type: "integer"
          title: "Id"
          description: "The Target ID"
        "channel_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Channel Name"
          description: "The Channel Name"
      type: "object"
      required:
        - "agent_id"
        - "target"
        - "target_mode"
        - "channel_id"
        - "id"
      title: "Target"
    "TargetModes":
      type: "string"
      enum:
        - "voice"
        - "chat"
        - "sms"
        - "email"
      title: "TargetModes"
    "TestMessage":
      properties:
        "service_name":
          type: "string"
          title: "Service Name"
          description: "Name of the service producing the message"
        "source":
          type: "string"
          title: "Source"
          description: "Name of the source of the message, should identify the user, like an email or username"
        "text":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Text"
        "test_id":
          type: "string"
          title: "Test Id"
        "agent_id":
          type: "string"
          title: "Agent Id"
        "org_name":
          type: "string"
          title: "Org Name"
        "override_timestamp":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Override Timestamp"
      type: "object"
      required:
        - "service_name"
        - "source"
        - "test_id"
        - "agent_id"
        - "org_name"
      title: "TestMessage"
    "TestMessageResponse":
      properties:
        "test_id":
          type: "string"
          title: "Test Id"
        "agent_id":
          type: "string"
          title: "Agent Id"
        "text":
          type: "string"
          title: "Text"
        "response":
          type: "object"
          title: "Response"
        "response_text":
          type: "string"
          title: "Response Text"
      type: "object"
      required:
        - "test_id"
        - "agent_id"
        - "text"
        - "response_text"
      title: "TestMessageResponse"
    "Tool":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the tool"
        "definition":
          type: "object"
          title: "Definition"
          description: "The definition of the tool"
        "service_id":
          type: "integer"
          title: "Service Id"
          description: "The service this tool belongs to"
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the tool"
        "service_name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Service Name"
          description: "The name of the service this tool belongs to"
      type: "object"
      required:
        - "name"
        - "service_id"
        - "id"
      title: "Tool"
    "ToolCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the tool"
        "definition":
          type: "object"
          title: "Definition"
          description: "The definition of the tool"
        "service_id":
          type: "integer"
          title: "Service Id"
          description: "The service this tool belongs to"
      type: "object"
      required:
        - "name"
        - "service_id"
      title: "ToolCreate"
    "ToolDetailResponse":
      properties:
        "id":
          type: "integer"
          title: "Id"
        "name":
          type: "string"
          title: "Name"
        "description":
          type: "string"
          title: "Description"
        "fields":
          items:
            type: "string"
          type: "array"
          title: "Fields"
      type: "object"
      required:
        - "id"
        - "name"
        - "description"
        - "fields"
      title: "ToolDetailResponse"
    "ToolProperties":
      type: "string"
      enum:
        - "id"
        - "name"
        - "service_name"
        - "definition"
        - "service_id"
      title: "ToolProperties"
    "ToolUpdate":
      properties:
        "name":
          type: "string"
          title: "Name"
          description: "The name of the tool"
        "definition":
          type: "object"
          title: "Definition"
          description: "The definition of the tool"
        "service_id":
          type: "integer"
          title: "Service Id"
          description: "The service this tool belongs to"
        "id":
          type: "integer"
          title: "Id"
          description: "The ID of the tool"
      type: "object"
      required:
        - "name"
        - "service_id"
        - "id"
      title: "ToolUpdate"
    "ValidationError":
      properties:
        "loc":
          items:
            anyOf:
              - type: "string"
              - type: "integer"
          type: "array"
          title: "Location"
        "msg":
          type: "string"
          title: "Message"
        "type":
          type: "string"
          title: "Error Type"
      type: "object"
      required:
        - "loc"
        - "msg"
        - "type"
      title: "ValidationError"
  securitySchemes:
    "APIKeyHeader":
      type: "apiKey"
      in: "header"
      name: "Syllable-API-Key"
tags:
  - name: "agents"
    description: "Operations related to agents"
  - name: "agents.test"
    description: "Operations for testing agents with live text"
  - name: "channels"
    description: "Operations related to channels"
  - name: "channels.targets"
    description: "Operations related to channel targets"
  - name: "conversations"
    description: "Operations related to conversations"
  - name: "custom_messages"
    description: "Operations related to custom messages"
  - name: "directory"
    description: "Operations related to directory"
  - name: "events"
    description: "Operations related to agent events"
  - name: "organizations"
    description: "Operations related to organizations"
  - name: "prompts"
    description: "Operations related to prompts"
  - name: "services"
    description: "Operations related to services"
  - name: "sessions"
    description: "Operations related to agent sessions"
  - name: "sessions.labels"
    description: "Operations related to labeling sessions"
  - name: "sessions.transcript"
    description: "Operations related to session transcription"
  - name: "tools"
    description: "Operations related to tools"
x-speakeasy-name-override: [{"operationId": ".*_list$", "methodNameOverride": "list"}, {"operationId": ".*_create$", "methodNameOverride": "create"}, {"operationId": ".*_update$", "methodNameOverride": "update"}, {"operationId": ".*_delete$", "methodNameOverride": "delete"}, {"operationId": ".*_get_by_id$", "methodNameOverride": "get_by_id"}, {"operationId": ".*_get_by_name$", "methodNameOverride": "get_by_name"}]
