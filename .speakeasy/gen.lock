lockVersion: 2.0.0
id: a9998797-242d-43f8-a716-12c3814c32c2
management:
  docChecksum: c4105ecf5331e5e69de5f0954bea85ef
  docVersion: 0.0.2
  speakeasyVersion: 1.493.2
  generationVersion: 2.512.4
  releaseVersion: 0.1.0-alpha.76
  configChecksum: 61dba58fea41be61c75a6c65e428e09f
  repoURL: https://github.com/asksyllable/syllable-sdk-typescript.git
  installationURL: https://github.com/asksyllable/syllable-sdk-typescript
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.11
    core: 3.19.0
    defaultEnabledRetries: 0.1.0
    deprecations: 2.81.1
    devContainers: 2.90.0
    downloadStreams: 0.1.1
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    globalSecurity: 2.82.13
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.4
    ignores: 2.81.1
    nameOverrides: 2.81.2
    nullables: 0.1.0
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.2.0
    unions: 2.85.8
    uploadStreams: 0.1.0
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .npmignore
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/components/action.md
  - docs/models/components/agentcreate.md
  - docs/models/components/agentlanguage.md
  - docs/models/components/agentproperties.md
  - docs/models/components/agentresponse.md
  - docs/models/components/agentsttprovider.md
  - docs/models/components/agenttooldefaults.md
  - docs/models/components/agenttoolfielddefault.md
  - docs/models/components/agentupdate.md
  - docs/models/components/agentvoice.md
  - docs/models/components/agentvoicedisplayname.md
  - docs/models/components/agentvoicegender.md
  - docs/models/components/agentvoicemodel.md
  - docs/models/components/agentvoicevarname.md
  - docs/models/components/agentwaitsound.md
  - docs/models/components/attributes.md
  - docs/models/components/availabletarget.md
  - docs/models/components/availabletargetproperties.md
  - docs/models/components/batchdetails.md
  - docs/models/components/batchproperties.md
  - docs/models/components/batchstatus.md
  - docs/models/components/bodyoutboundbatchdelete.md
  - docs/models/components/bodyoutboundbatchupload.md
  - docs/models/components/campaignproperties.md
  - docs/models/components/campaignvariables.md
  - docs/models/components/channel.md
  - docs/models/components/channelproperties.md
  - docs/models/components/channelservices.md
  - docs/models/components/channeltargetcreaterequest.md
  - docs/models/components/channeltargetproperties.md
  - docs/models/components/channeltargetresponse.md
  - docs/models/components/channeltargetupdaterequest.md
  - docs/models/components/communicationbatch.md
  - docs/models/components/communicationbatchinput.md
  - docs/models/components/communicationrequest.md
  - docs/models/components/communicationrequestrequestvariables.md
  - docs/models/components/communicationrequestresult.md
  - docs/models/components/conditions.md
  - docs/models/components/conversation.md
  - docs/models/components/conversationproperties.md
  - docs/models/components/createtakeoutresponse.md
  - docs/models/components/custommessagecreaterequest.md
  - docs/models/components/custommessageproperties.md
  - docs/models/components/custommessageresponse.md
  - docs/models/components/custommessagerule.md
  - docs/models/components/custommessageupdaterequest.md
  - docs/models/components/dashboard.md
  - docs/models/components/dashboardproperties.md
  - docs/models/components/dashboardresponse.md
  - docs/models/components/dashboardtokenresponse.md
  - docs/models/components/datasourcecreaterequest.md
  - docs/models/components/datasourcedetailresponse.md
  - docs/models/components/datasourcemetadataresponse.md
  - docs/models/components/datasourceproperties.md
  - docs/models/components/datasourceupdaterequest.md
  - docs/models/components/dayofweek.md
  - docs/models/components/defaults.md
  - docs/models/components/dialogmessage.md
  - docs/models/components/dialogrole.md
  - docs/models/components/dialogtoolcall.md
  - docs/models/components/event.md
  - docs/models/components/eventproperties.md
  - docs/models/components/filet.md
  - docs/models/components/incidentcreaterequest.md
  - docs/models/components/incidentorganizationresponse.md
  - docs/models/components/incidentproperties.md
  - docs/models/components/incidentresponse.md
  - docs/models/components/incidentupdaterequest.md
  - docs/models/components/insights.md
  - docs/models/components/insightsoutput.md
  - docs/models/components/insightsproperties.md
  - docs/models/components/insightsworkflowqueuesession.md
  - docs/models/components/insighttooldefinition.md
  - docs/models/components/insighttoolinput.md
  - docs/models/components/insighttoolinputtoolarguments.md
  - docs/models/components/insighttooloutput.md
  - docs/models/components/insighttoolproperties.md
  - docs/models/components/insighttooltestinput.md
  - docs/models/components/insightworkflowinput.md
  - docs/models/components/insightworkflowinputconditions.md
  - docs/models/components/insightworkflowoutput.md
  - docs/models/components/insightworkflowproperties.md
  - docs/models/components/inspectlatencyresponse.md
  - docs/models/components/internaltool.md
  - docs/models/components/jsonvalue.md
  - docs/models/components/languagecode.md
  - docs/models/components/languageconfig.md
  - docs/models/components/languagegroupagentinfo.md
  - docs/models/components/languagegroupcreaterequest.md
  - docs/models/components/languagegroupproperties.md
  - docs/models/components/languagegroupresponse.md
  - docs/models/components/languagegroupupdaterequest.md
  - docs/models/components/latencycategory.md
  - docs/models/components/latencyentry.md
  - docs/models/components/latencyunittype.md
  - docs/models/components/listresponseagentresponse.md
  - docs/models/components/listresponseavailabletarget.md
  - docs/models/components/listresponsechannel.md
  - docs/models/components/listresponsechanneltargetresponse.md
  - docs/models/components/listresponsecommunicationbatch.md
  - docs/models/components/listresponseconversation.md
  - docs/models/components/listresponsecustommessageresponse.md
  - docs/models/components/listresponsedashboardresponse.md
  - docs/models/components/listresponsedatasourcemetadataresponse.md
  - docs/models/components/listresponseevent.md
  - docs/models/components/listresponseincidentresponse.md
  - docs/models/components/listresponseinsightsoutput.md
  - docs/models/components/listresponseinsighttooloutput.md
  - docs/models/components/listresponseinsightworkflowoutput.md
  - docs/models/components/listresponselanguagegroupresponse.md
  - docs/models/components/listresponseoutboundcampaign.md
  - docs/models/components/listresponsepromptresponse.md
  - docs/models/components/listresponseserviceresponse.md
  - docs/models/components/listresponsesession.md
  - docs/models/components/listresponsesessionlabel.md
  - docs/models/components/listresponsetoolresponse.md
  - docs/models/components/loc.md
  - docs/models/components/orderbydirection.md
  - docs/models/components/outboundcampaign.md
  - docs/models/components/outboundcampaigninput.md
  - docs/models/components/outboundcampaigninputcampaignvariables.md
  - docs/models/components/promptcreaterequest.md
  - docs/models/components/prompthistory.md
  - docs/models/components/promptllmconfig.md
  - docs/models/components/promptllmprovider.md
  - docs/models/components/promptproperties.md
  - docs/models/components/promptresponse.md
  - docs/models/components/promptupdaterequest.md
  - docs/models/components/requestvariables.md
  - docs/models/components/response.md
  - docs/models/components/security.md
  - docs/models/components/servicecreaterequest.md
  - docs/models/components/serviceproperties.md
  - docs/models/components/serviceresponse.md
  - docs/models/components/serviceupdaterequest.md
  - docs/models/components/session.md
  - docs/models/components/sessionaction.md
  - docs/models/components/sessiondata.md
  - docs/models/components/sessionlabel.md
  - docs/models/components/sessionlabelcreate.md
  - docs/models/components/sessionlabelproperties.md
  - docs/models/components/sessionmessage.md
  - docs/models/components/sessionproperties.md
  - docs/models/components/sessionrecordingresponse.md
  - docs/models/components/sessionsummaryresponse.md
  - docs/models/components/sessiontext.md
  - docs/models/components/sessiontranscriptionresponse.md
  - docs/models/components/statictoolparameter.md
  - docs/models/components/statictoolparametertype.md
  - docs/models/components/statuscounts.md
  - docs/models/components/summaryentry.md
  - docs/models/components/supportedllm.md
  - docs/models/components/takeoutrequeststatus.md
  - docs/models/components/takeoutstatusresponse.md
  - docs/models/components/targetmodes.md
  - docs/models/components/testmessage.md
  - docs/models/components/testmessageresponse.md
  - docs/models/components/toolagentinfo.md
  - docs/models/components/toolargumentlocation.md
  - docs/models/components/toolarguments.md
  - docs/models/components/toolcreaterequest.md
  - docs/models/components/tooldefinition.md
  - docs/models/components/tooldetailresponse.md
  - docs/models/components/toolfunction.md
  - docs/models/components/toolhttpendpoint.md
  - docs/models/components/toolhttpmethod.md
  - docs/models/components/toolparameterdefault.md
  - docs/models/components/toolparameters.md
  - docs/models/components/toolparametertransform.md
  - docs/models/components/toolparametertransformcondition.md
  - docs/models/components/toolpromptinfo.md
  - docs/models/components/toolproperties.md
  - docs/models/components/toolresponse.md
  - docs/models/components/toolresultdata.md
  - docs/models/components/toolresultset.md
  - docs/models/components/toolupdaterequest.md
  - docs/models/components/ttsprovider.md
  - docs/models/components/type.md
  - docs/models/components/validationerror.md
  - docs/models/errors/httpvalidationerror.md
  - docs/models/operations/agentdeleterequest.md
  - docs/models/operations/agentgetbyidrequest.md
  - docs/models/operations/agentlistrequest.md
  - docs/models/operations/availabletargetsrequest.md
  - docs/models/operations/channelslistrequest.md
  - docs/models/operations/channeltargetscreaterequest.md
  - docs/models/operations/channeltargetsdeleterequest.md
  - docs/models/operations/channeltargetsgetbyidrequest.md
  - docs/models/operations/channeltargetslistrequest.md
  - docs/models/operations/channeltargetsupdaterequest.md
  - docs/models/operations/conversationslistrequest.md
  - docs/models/operations/custommessagegetbyidrequest.md
  - docs/models/operations/custommessagesdeleterequest.md
  - docs/models/operations/custommessageslistrequest.md
  - docs/models/operations/datasourcesdeleterequest.md
  - docs/models/operations/datasourcesgetbyidrequest.md
  - docs/models/operations/datasourceslistrequest.md
  - docs/models/operations/eventslistrequest.md
  - docs/models/operations/generatesessionrecordingurlsrequest.md
  - docs/models/operations/getsessiondatabysessionidrequest.md
  - docs/models/operations/getsessiondatabysidrequest.md
  - docs/models/operations/getsessiontoolcallresultbyidrequest.md
  - docs/models/operations/incidentdeleterequest.md
  - docs/models/operations/incidentgetbyidrequest.md
  - docs/models/operations/incidentlistrequest.md
  - docs/models/operations/insightslistrequest.md
  - docs/models/operations/insightstoolupdaterequest.md
  - docs/models/operations/insightsworkflowdeleterequest.md
  - docs/models/operations/insightsworkflowgetbyidrequest.md
  - docs/models/operations/insightsworkflowlistrequest.md
  - docs/models/operations/insightsworkflowupdaterequest.md
  - docs/models/operations/insighttoolgetbyidrequest.md
  - docs/models/operations/insighttoollistrequest.md
  - docs/models/operations/languagegroupsdeleterequest.md
  - docs/models/operations/languagegroupsgetbyidrequest.md
  - docs/models/operations/languagegroupslistrequest.md
  - docs/models/operations/outboundbatchaddrequest.md
  - docs/models/operations/outboundbatchdeleterequest.md
  - docs/models/operations/outboundbatchgetbyidrequest.md
  - docs/models/operations/outboundbatchlistrequest.md
  - docs/models/operations/outboundbatchremoverequest.md
  - docs/models/operations/outboundbatchresultsrequest.md
  - docs/models/operations/outboundbatchupdaterequest.md
  - docs/models/operations/outboundbatchuploadrequest.md
  - docs/models/operations/outboundcampaigngetbyidrequest.md
  - docs/models/operations/outboundcampaignlistrequest.md
  - docs/models/operations/outboundcampaignupdaterequest.md
  - docs/models/operations/postgetdashboardrequest.md
  - docs/models/operations/postlistdashboardrequest.md
  - docs/models/operations/promptsdeleterequest.md
  - docs/models/operations/promptsgetbyidrequest.md
  - docs/models/operations/promptshistoryrequest.md
  - docs/models/operations/promptslistrequest.md
  - docs/models/operations/servicedeleterequest.md
  - docs/models/operations/servicelistrequest.md
  - docs/models/operations/servicesgetbyidrequest.md
  - docs/models/operations/sessionfullsummarygetbyidrequest.md
  - docs/models/operations/sessiongetbyidrequest.md
  - docs/models/operations/sessionlabelgetbyidrequest.md
  - docs/models/operations/sessionlabelslistrequest.md
  - docs/models/operations/sessionlatencygetbyidrequest.md
  - docs/models/operations/sessionrecordingstreamrequest.md
  - docs/models/operations/sessionslistrequest.md
  - docs/models/operations/sessiontranscriptgetbyidrequest.md
  - docs/models/operations/takeoutsgetbyjobidrequest.md
  - docs/models/operations/tooldeleterequest.md
  - docs/models/operations/toolgetbynamerequest.md
  - docs/models/operations/toollistrequest.md
  - docs/sdks/agents/README.md
  - docs/sdks/batches/README.md
  - docs/sdks/campaigns/README.md
  - docs/sdks/channels/README.md
  - docs/sdks/conversations/README.md
  - docs/sdks/custommessages/README.md
  - docs/sdks/dashboards/README.md
  - docs/sdks/datasources/README.md
  - docs/sdks/events/README.md
  - docs/sdks/fullsummary/README.md
  - docs/sdks/incidents/README.md
  - docs/sdks/insights/README.md
  - docs/sdks/languagegroups/README.md
  - docs/sdks/latency/README.md
  - docs/sdks/outbound/README.md
  - docs/sdks/prompts/README.md
  - docs/sdks/services/README.md
  - docs/sdks/sessiondebug/README.md
  - docs/sdks/sessionlabels/README.md
  - docs/sdks/sessions/README.md
  - docs/sdks/syllablesdk/README.md
  - docs/sdks/syllablesdktools/README.md
  - docs/sdks/takeouts/README.md
  - docs/sdks/targets/README.md
  - docs/sdks/test/README.md
  - docs/sdks/tools/README.md
  - docs/sdks/transcript/README.md
  - docs/sdks/workflows/README.md
  - eslint.config.mjs
  - jsr.json
  - package.json
  - src/core.ts
  - src/funcs/agentsAgentGetAvailableVoices.ts
  - src/funcs/agentsCreate.ts
  - src/funcs/agentsDelete.ts
  - src/funcs/agentsGetById.ts
  - src/funcs/agentsList.ts
  - src/funcs/agentsTestSendTestMessage.ts
  - src/funcs/agentsUpdate.ts
  - src/funcs/channelsDelete.ts
  - src/funcs/channelsList.ts
  - src/funcs/channelsTargetsAvailableTargets.ts
  - src/funcs/channelsTargetsCreate.ts
  - src/funcs/channelsTargetsGetById.ts
  - src/funcs/channelsTargetsList.ts
  - src/funcs/channelsTargetsUpdate.ts
  - src/funcs/conversationsList.ts
  - src/funcs/customMessagesCreate.ts
  - src/funcs/customMessagesDelete.ts
  - src/funcs/customMessagesGetById.ts
  - src/funcs/customMessagesList.ts
  - src/funcs/customMessagesUpdate.ts
  - src/funcs/dashboardsPostGetDashboard.ts
  - src/funcs/dashboardsPostListDashboard.ts
  - src/funcs/dashboardsPostSessionEventsDashboard.ts
  - src/funcs/dashboardsPostSessionSummaryDashboard.ts
  - src/funcs/dashboardsPostSessionTransfersDashboard.ts
  - src/funcs/dashboardsPostSessionsDashboard.ts
  - src/funcs/dataSourcesCreate.ts
  - src/funcs/dataSourcesDelete.ts
  - src/funcs/dataSourcesGetById.ts
  - src/funcs/dataSourcesList.ts
  - src/funcs/dataSourcesUpdate.ts
  - src/funcs/eventsList.ts
  - src/funcs/incidentsCreate.ts
  - src/funcs/incidentsDelete.ts
  - src/funcs/incidentsGetById.ts
  - src/funcs/incidentsIncidentGetOrganizations.ts
  - src/funcs/incidentsList.ts
  - src/funcs/incidentsUpdate.ts
  - src/funcs/insightsList.ts
  - src/funcs/insightsToolsCreate.ts
  - src/funcs/insightsToolsGetById.ts
  - src/funcs/insightsToolsInsightToolGetDefinitions.ts
  - src/funcs/insightsToolsInsightsToolTest.ts
  - src/funcs/insightsToolsList.ts
  - src/funcs/insightsToolsUpdate.ts
  - src/funcs/insightsWorkflowsCreate.ts
  - src/funcs/insightsWorkflowsDelete.ts
  - src/funcs/insightsWorkflowsGetById.ts
  - src/funcs/insightsWorkflowsList.ts
  - src/funcs/insightsWorkflowsQueueSessionsWorkflow.ts
  - src/funcs/insightsWorkflowsUpdate.ts
  - src/funcs/languageGroupsCreate.ts
  - src/funcs/languageGroupsDelete.ts
  - src/funcs/languageGroupsGetById.ts
  - src/funcs/languageGroupsList.ts
  - src/funcs/languageGroupsUpdate.ts
  - src/funcs/outboundBatchesAdd.ts
  - src/funcs/outboundBatchesCreate.ts
  - src/funcs/outboundBatchesDelete.ts
  - src/funcs/outboundBatchesGetById.ts
  - src/funcs/outboundBatchesList.ts
  - src/funcs/outboundBatchesRemove.ts
  - src/funcs/outboundBatchesResults.ts
  - src/funcs/outboundBatchesUpdate.ts
  - src/funcs/outboundBatchesUpload.ts
  - src/funcs/outboundCampaignsCreate.ts
  - src/funcs/outboundCampaignsGetById.ts
  - src/funcs/outboundCampaignsList.ts
  - src/funcs/outboundCampaignsUpdate.ts
  - src/funcs/promptsCreate.ts
  - src/funcs/promptsDelete.ts
  - src/funcs/promptsGetById.ts
  - src/funcs/promptsList.ts
  - src/funcs/promptsPromptGetSupportedLlms.ts
  - src/funcs/promptsPromptsHistory.ts
  - src/funcs/promptsUpdate.ts
  - src/funcs/servicesCreate.ts
  - src/funcs/servicesDelete.ts
  - src/funcs/servicesGetById.ts
  - src/funcs/servicesList.ts
  - src/funcs/servicesUpdate.ts
  - src/funcs/sessionDebugGetSessionDataBySessionId.ts
  - src/funcs/sessionDebugGetSessionDataBySid.ts
  - src/funcs/sessionDebugGetSessionToolCallResultById.ts
  - src/funcs/sessionLabelsCreate.ts
  - src/funcs/sessionLabelsGetById.ts
  - src/funcs/sessionLabelsList.ts
  - src/funcs/sessionsFullSummaryGetById.ts
  - src/funcs/sessionsGenerateSessionRecordingUrls.ts
  - src/funcs/sessionsGetById.ts
  - src/funcs/sessionsLatencyGetById.ts
  - src/funcs/sessionsList.ts
  - src/funcs/sessionsSessionRecordingStream.ts
  - src/funcs/sessionsTranscriptGetById.ts
  - src/funcs/takeoutsCreate.ts
  - src/funcs/takeoutsTakeoutsGetByJobId.ts
  - src/funcs/toolsCreate.ts
  - src/funcs/toolsDelete.ts
  - src/funcs/toolsGetByName.ts
  - src/funcs/toolsList.ts
  - src/funcs/toolsUpdate.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/env.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/models/components/agentcreate.ts
  - src/models/components/agentlanguage.ts
  - src/models/components/agentproperties.ts
  - src/models/components/agentresponse.ts
  - src/models/components/agentsttprovider.ts
  - src/models/components/agenttooldefaults.ts
  - src/models/components/agenttoolfielddefault.ts
  - src/models/components/agentupdate.ts
  - src/models/components/agentvoice.ts
  - src/models/components/agentvoicedisplayname.ts
  - src/models/components/agentvoicegender.ts
  - src/models/components/agentvoicemodel.ts
  - src/models/components/agentvoicevarname.ts
  - src/models/components/agentwaitsound.ts
  - src/models/components/availabletarget.ts
  - src/models/components/availabletargetproperties.ts
  - src/models/components/batchdetails.ts
  - src/models/components/batchproperties.ts
  - src/models/components/batchstatus.ts
  - src/models/components/bodyoutboundbatchdelete.ts
  - src/models/components/bodyoutboundbatchupload.ts
  - src/models/components/campaignproperties.ts
  - src/models/components/channel.ts
  - src/models/components/channelproperties.ts
  - src/models/components/channelservices.ts
  - src/models/components/channeltargetcreaterequest.ts
  - src/models/components/channeltargetproperties.ts
  - src/models/components/channeltargetresponse.ts
  - src/models/components/channeltargetupdaterequest.ts
  - src/models/components/communicationbatch.ts
  - src/models/components/communicationbatchinput.ts
  - src/models/components/communicationrequest.ts
  - src/models/components/communicationrequestresult.ts
  - src/models/components/conversation.ts
  - src/models/components/conversationproperties.ts
  - src/models/components/createtakeoutresponse.ts
  - src/models/components/custommessagecreaterequest.ts
  - src/models/components/custommessageproperties.ts
  - src/models/components/custommessageresponse.ts
  - src/models/components/custommessagerule.ts
  - src/models/components/custommessageupdaterequest.ts
  - src/models/components/dashboard.ts
  - src/models/components/dashboardproperties.ts
  - src/models/components/dashboardresponse.ts
  - src/models/components/dashboardtokenresponse.ts
  - src/models/components/datasourcecreaterequest.ts
  - src/models/components/datasourcedetailresponse.ts
  - src/models/components/datasourcemetadataresponse.ts
  - src/models/components/datasourceproperties.ts
  - src/models/components/datasourceupdaterequest.ts
  - src/models/components/dayofweek.ts
  - src/models/components/dialogmessage.ts
  - src/models/components/dialogrole.ts
  - src/models/components/dialogtoolcall.ts
  - src/models/components/event.ts
  - src/models/components/eventproperties.ts
  - src/models/components/incidentcreaterequest.ts
  - src/models/components/incidentorganizationresponse.ts
  - src/models/components/incidentproperties.ts
  - src/models/components/incidentresponse.ts
  - src/models/components/incidentupdaterequest.ts
  - src/models/components/index.ts
  - src/models/components/insightsoutput.ts
  - src/models/components/insightsproperties.ts
  - src/models/components/insightsworkflowqueuesession.ts
  - src/models/components/insighttooldefinition.ts
  - src/models/components/insighttoolinput.ts
  - src/models/components/insighttooloutput.ts
  - src/models/components/insighttoolproperties.ts
  - src/models/components/insighttooltestinput.ts
  - src/models/components/insightworkflowinput.ts
  - src/models/components/insightworkflowoutput.ts
  - src/models/components/insightworkflowproperties.ts
  - src/models/components/inspectlatencyresponse.ts
  - src/models/components/internaltool.ts
  - src/models/components/languagecode.ts
  - src/models/components/languageconfig.ts
  - src/models/components/languagegroupagentinfo.ts
  - src/models/components/languagegroupcreaterequest.ts
  - src/models/components/languagegroupproperties.ts
  - src/models/components/languagegroupresponse.ts
  - src/models/components/languagegroupupdaterequest.ts
  - src/models/components/latencycategory.ts
  - src/models/components/latencyentry.ts
  - src/models/components/latencyunittype.ts
  - src/models/components/listresponseagentresponse.ts
  - src/models/components/listresponseavailabletarget.ts
  - src/models/components/listresponsechannel.ts
  - src/models/components/listresponsechanneltargetresponse.ts
  - src/models/components/listresponsecommunicationbatch.ts
  - src/models/components/listresponseconversation.ts
  - src/models/components/listresponsecustommessageresponse.ts
  - src/models/components/listresponsedashboardresponse.ts
  - src/models/components/listresponsedatasourcemetadataresponse.ts
  - src/models/components/listresponseevent.ts
  - src/models/components/listresponseincidentresponse.ts
  - src/models/components/listresponseinsightsoutput.ts
  - src/models/components/listresponseinsighttooloutput.ts
  - src/models/components/listresponseinsightworkflowoutput.ts
  - src/models/components/listresponselanguagegroupresponse.ts
  - src/models/components/listresponseoutboundcampaign.ts
  - src/models/components/listresponsepromptresponse.ts
  - src/models/components/listresponseserviceresponse.ts
  - src/models/components/listresponsesession.ts
  - src/models/components/listresponsesessionlabel.ts
  - src/models/components/listresponsetoolresponse.ts
  - src/models/components/orderbydirection.ts
  - src/models/components/outboundcampaign.ts
  - src/models/components/outboundcampaigninput.ts
  - src/models/components/promptcreaterequest.ts
  - src/models/components/prompthistory.ts
  - src/models/components/promptllmconfig.ts
  - src/models/components/promptllmprovider.ts
  - src/models/components/promptproperties.ts
  - src/models/components/promptresponse.ts
  - src/models/components/promptupdaterequest.ts
  - src/models/components/security.ts
  - src/models/components/servicecreaterequest.ts
  - src/models/components/serviceproperties.ts
  - src/models/components/serviceresponse.ts
  - src/models/components/serviceupdaterequest.ts
  - src/models/components/session.ts
  - src/models/components/sessionaction.ts
  - src/models/components/sessiondata.ts
  - src/models/components/sessionlabel.ts
  - src/models/components/sessionlabelcreate.ts
  - src/models/components/sessionlabelproperties.ts
  - src/models/components/sessionmessage.ts
  - src/models/components/sessionproperties.ts
  - src/models/components/sessionrecordingresponse.ts
  - src/models/components/sessionsummaryresponse.ts
  - src/models/components/sessiontext.ts
  - src/models/components/sessiontranscriptionresponse.ts
  - src/models/components/statictoolparameter.ts
  - src/models/components/statictoolparametertype.ts
  - src/models/components/summaryentry.ts
  - src/models/components/supportedllm.ts
  - src/models/components/takeoutrequeststatus.ts
  - src/models/components/takeoutstatusresponse.ts
  - src/models/components/targetmodes.ts
  - src/models/components/testmessage.ts
  - src/models/components/testmessageresponse.ts
  - src/models/components/toolagentinfo.ts
  - src/models/components/toolargumentlocation.ts
  - src/models/components/toolcreaterequest.ts
  - src/models/components/tooldefinition.ts
  - src/models/components/tooldetailresponse.ts
  - src/models/components/toolfunction.ts
  - src/models/components/toolhttpendpoint.ts
  - src/models/components/toolhttpmethod.ts
  - src/models/components/toolparameterdefault.ts
  - src/models/components/toolparametertransform.ts
  - src/models/components/toolparametertransformcondition.ts
  - src/models/components/toolpromptinfo.ts
  - src/models/components/toolproperties.ts
  - src/models/components/toolresponse.ts
  - src/models/components/toolresultdata.ts
  - src/models/components/toolupdaterequest.ts
  - src/models/components/ttsprovider.ts
  - src/models/components/validationerror.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/httpvalidationerror.ts
  - src/models/errors/index.ts
  - src/models/errors/sdkerror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/operations/agentdelete.ts
  - src/models/operations/agentgetbyid.ts
  - src/models/operations/agentlist.ts
  - src/models/operations/availabletargets.ts
  - src/models/operations/channelslist.ts
  - src/models/operations/channeltargetscreate.ts
  - src/models/operations/channeltargetsdelete.ts
  - src/models/operations/channeltargetsgetbyid.ts
  - src/models/operations/channeltargetslist.ts
  - src/models/operations/channeltargetsupdate.ts
  - src/models/operations/conversationslist.ts
  - src/models/operations/custommessagegetbyid.ts
  - src/models/operations/custommessagesdelete.ts
  - src/models/operations/custommessageslist.ts
  - src/models/operations/datasourcesdelete.ts
  - src/models/operations/datasourcesgetbyid.ts
  - src/models/operations/datasourceslist.ts
  - src/models/operations/eventslist.ts
  - src/models/operations/generatesessionrecordingurls.ts
  - src/models/operations/getsessiondatabysessionid.ts
  - src/models/operations/getsessiondatabysid.ts
  - src/models/operations/getsessiontoolcallresultbyid.ts
  - src/models/operations/incidentdelete.ts
  - src/models/operations/incidentgetbyid.ts
  - src/models/operations/incidentlist.ts
  - src/models/operations/index.ts
  - src/models/operations/insightslist.ts
  - src/models/operations/insightstoolupdate.ts
  - src/models/operations/insightsworkflowdelete.ts
  - src/models/operations/insightsworkflowgetbyid.ts
  - src/models/operations/insightsworkflowlist.ts
  - src/models/operations/insightsworkflowupdate.ts
  - src/models/operations/insighttoolgetbyid.ts
  - src/models/operations/insighttoollist.ts
  - src/models/operations/languagegroupsdelete.ts
  - src/models/operations/languagegroupsgetbyid.ts
  - src/models/operations/languagegroupslist.ts
  - src/models/operations/outboundbatchadd.ts
  - src/models/operations/outboundbatchdelete.ts
  - src/models/operations/outboundbatchgetbyid.ts
  - src/models/operations/outboundbatchlist.ts
  - src/models/operations/outboundbatchremove.ts
  - src/models/operations/outboundbatchresults.ts
  - src/models/operations/outboundbatchupdate.ts
  - src/models/operations/outboundbatchupload.ts
  - src/models/operations/outboundcampaigngetbyid.ts
  - src/models/operations/outboundcampaignlist.ts
  - src/models/operations/outboundcampaignupdate.ts
  - src/models/operations/postgetdashboard.ts
  - src/models/operations/postlistdashboard.ts
  - src/models/operations/promptsdelete.ts
  - src/models/operations/promptsgetbyid.ts
  - src/models/operations/promptshistory.ts
  - src/models/operations/promptslist.ts
  - src/models/operations/servicedelete.ts
  - src/models/operations/servicelist.ts
  - src/models/operations/servicesgetbyid.ts
  - src/models/operations/sessionfullsummarygetbyid.ts
  - src/models/operations/sessiongetbyid.ts
  - src/models/operations/sessionlabelgetbyid.ts
  - src/models/operations/sessionlabelslist.ts
  - src/models/operations/sessionlatencygetbyid.ts
  - src/models/operations/sessionrecordingstream.ts
  - src/models/operations/sessionslist.ts
  - src/models/operations/sessiontranscriptgetbyid.ts
  - src/models/operations/takeoutsgetbyjobid.ts
  - src/models/operations/tooldelete.ts
  - src/models/operations/toolgetbyname.ts
  - src/models/operations/toollist.ts
  - src/sdk/agents.ts
  - src/sdk/batches.ts
  - src/sdk/campaigns.ts
  - src/sdk/channels.ts
  - src/sdk/conversations.ts
  - src/sdk/custommessages.ts
  - src/sdk/dashboards.ts
  - src/sdk/datasources.ts
  - src/sdk/events.ts
  - src/sdk/fullsummary.ts
  - src/sdk/incidents.ts
  - src/sdk/index.ts
  - src/sdk/insights.ts
  - src/sdk/languagegroups.ts
  - src/sdk/latency.ts
  - src/sdk/outbound.ts
  - src/sdk/prompts.ts
  - src/sdk/sdk.ts
  - src/sdk/services.ts
  - src/sdk/sessiondebug.ts
  - src/sdk/sessionlabels.ts
  - src/sdk/sessions.ts
  - src/sdk/syllablesdktools.ts
  - src/sdk/takeouts.ts
  - src/sdk/targets.ts
  - src/sdk/test.ts
  - src/sdk/tools.ts
  - src/sdk/transcript.ts
  - src/sdk/workflows.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - tsconfig.json
examples:
  agent_list:
    speakeasy-default-agent-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 2", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-01-24T00:05:25.844Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-12-01T18:25:37.169Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-07-12T19:57:33.016Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}, {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V1", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-02-26T15:25:42.165Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-09-13T22:04:07.138Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}, {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-04-11T03:59:08.538Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-12-03T21:35:05.453Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-03T17:49:22.042Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-28T03:47:03.515Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-04-19T11:47:41.889Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  agent_create:
    speakeasy-default-agent-create:
      requestBody:
        application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1"}
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V1", "wait_sound": "Call Center", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-11-15T07:40:19.243Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-07-23T12:28:22.635Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-18T01:06:03.366Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-04-09T14:25:29.356Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-12T13:17:54.745Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_update:
    speakeasy-default-agent-update:
      requestBody:
        application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1}
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-02T06:16:41.919Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-04-26T07:27:10.489Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-02-18T20:59:13.521Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-09T13:32:29.600Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-02T06:16:41.919Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_get_by_id:
    speakeasy-default-agent-get-by-id:
      parameters:
        path:
          agent_id: 931598
      responses:
        "200":
          application/json: {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-02T11:26:09.976Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "channel_targets": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com"}], "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-26T07:58:27.777Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-08-28T21:10:29.980Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}
        "422":
          application/json: {}
  agent_delete:
    speakeasy-default-agent-delete:
      parameters:
        path:
          agent_id: 545907
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  agent_get_available_voices:
    speakeasy-default-agent-get-available-voices:
      responses:
        "200":
          application/json: [{"provider": "OpenAI", "display_name": "Alloy", "var_name": "elevenlabs:Chris", "gender": "female", "model": "Multilingual_v2", "supported_languages": [{"name": "English", "code": "es-US"}], "deprecated": false}]
  send_test_message:
    speakeasy-default-send-test-message:
      requestBody:
        application/json: {"service_name": "<value>", "source": "user@email.com", "text": "Hello", "test_id": "<id>", "agent_id": "<id>", "org_name": "<value>", "session_start": false}
      responses:
        "200":
          application/json: {"test_id": "<id>", "agent_id": "<id>"}
        "422":
          application/json: {}
  channels_list:
    speakeasy-default-channels-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "syllable-webchat", "channel_service": "email", "supported_modes": "[\"chat\",\"voice\"]", "id": 678317}, {"name": "syllable-webchat", "channel_service": "sip", "supported_modes": "[\"chat\",\"voice\"]", "id": 229716}, {"name": "syllable-webchat", "channel_service": "sip", "supported_modes": "[\"chat\",\"voice\"]", "id": 635532}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_delete:
    speakeasy-default-channel-targets-delete:
      parameters:
        path:
          channel_id: "<id>"
        query:
          target_id: "<id>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  available_targets:
    speakeasy-default-available-targets:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["channel_name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"organization_id": 1, "channel_id": 1, "channel_name": "Twilio", "target": "+19995551234"}, {"organization_id": 1, "channel_id": 1, "channel_name": "Twilio", "target": "+19995551234"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_list:
    speakeasy-default-channel-targets-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["fallback_target"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "voice", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Deepgram Nova 2", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-01-24T00:05:25.844Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-20T06:21:22.156Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-11-25T18:23:24.264Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-17T13:20:28.265Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 2", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-01T05:06:49.492Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-05-29T14:05:29.727Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-28T03:47:03.515Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-04-19T11:47:41.889Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}, {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V1", "wait_sound": "No Sound", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-07-18T12:08:53.113Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-07-18T12:08:53.113Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-01-29T10:30:11.361Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  channel_targets_create:
    speakeasy-default-channel-targets-create:
      parameters:
        path:
          channel_id: 134365
      requestBody:
        application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true}
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/New_York", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-10-04T11:56:21.731Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-04-09T14:25:29.356Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-12T13:17:54.745Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  channel_targets_get_by_id:
    speakeasy-default-channel-targets-get-by-id:
      parameters:
        path:
          channel_id: 931598
          target_id: 505057
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "sms", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-02T11:26:09.976Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-08-06T14:15:50.659Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-08-28T21:10:29.980Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  channel_targets_update:
    speakeasy-default-channel-targets-update:
      parameters:
        path:
          channel_id: 627690
          target_id: 488852
      requestBody:
        application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "chat", "fallback_target": "+19995551235", "is_test": true, "id": 1}
      responses:
        "200":
          application/json: {"agent_id": 1, "channel_id": 1, "target": "+19995551234", "target_mode": "email", "fallback_target": "+19995551235", "is_test": true, "id": 1, "channel_name": "+19995551234", "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "agent": {"name": "Weather agent", "description": "Agent for answering questions about weather.", "label": "Information", "type": "ca_v1", "prompt_id": 1, "custom_message_id": 1, "language_group_id": 1, "timezone": "America/Chicago", "prompt_tool_defaults": [{"tool_name": "get_weather", "default_values": [{"field_name": "temperature_unit", "default_value": "fahrenheit"}]}], "languages": ["en-US", "es-US"], "variables": {"vars.location_name": "Main Street Pizza"}, "tool_headers": {"Authorization": "Basic sometoken"}, "agent_initiated": false, "stt_provider": "Google STT V2", "wait_sound": "Keyboard 1", "id": 1, "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@email.com", "prompt": {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-06-02T23:29:52.263Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-02-07T05:49:27.174Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "query"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-06-22T20:20:38.468Z", "last_updated_by": "user@email.com"}]}, "custom_message": {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, "tools": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-09T13:32:29.600Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-09-02T06:16:41.919Z", "last_updated_by": "user@email.com"}], "language_group": {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}}}
        "422":
          application/json: {}
  conversations_list:
    speakeasy-default-conversations-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["llm_model"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"timestamp": "2024-08-22T19:26:20.850Z", "conversation_id": "<id>"}, {"timestamp": "2025-01-13T10:26:00.433Z", "conversation_id": "<id>"}, {"timestamp": "2023-07-14T18:23:27.528Z", "conversation_id": "<id>"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  events_list:
    speakeasy-default-events-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["user_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"timestamp": "2024-08-22T19:26:20.850Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}, {"timestamp": "2025-01-13T10:26:00.433Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}, {"timestamp": "2023-07-14T18:23:27.528Z", "source": "tool-call", "category": "automation", "type": "phone-transfer", "user_id": "+18042221111", "description": "Transfer to phone number +18042221111"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  custom_messages_list:
    speakeasy-default-custom-messages-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}, {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  custom_messages_create:
    speakeasy-default-custom-messages-create:
      requestBody:
        application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "type": "greeting"}
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_messages_update:
    speakeasy-default-custom-messages-update:
      requestBody:
        application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "type": "greeting"}
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_message_get_by_id:
    speakeasy-default-custom-message-get-by-id:
      parameters:
        path:
          custom_message_id: 931598
      responses:
        "200":
          application/json: {"name": "Customer service greeting", "text": "Hello and thank you for calling customer service. How can I help you today?", "label": "Customer service", "rules": [{"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}, {"description": "Closed on New Year's Day", "time_range_start": "09:00", "time_range_end": "17:00", "date": "2025-01-01", "days_of_week": ["mo", "tu", "we", "th", "fr"], "invert": false, "text": "Hello, thank you for calling. Sorry, we're closed today."}], "id": 1, "updated_at": "2024-01-01T00:00:00Z", "agent_count": 1, "last_updated_by": "user@email.com", "type": "greeting"}
        "422":
          application/json: {}
  custom_messages_delete:
    speakeasy-default-custom-messages-delete:
      parameters:
        path:
          custom_message_id: 545907
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  prompts_list:
    speakeasy-default-prompts-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-20T06:21:22.156Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-03-01T20:22:54.911Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-02-26T15:25:42.165Z", "last_updated_by": "user@email.com"}]}, {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-05-29T14:05:29.727Z", "last_updated_by": "user@email.com"}]}, {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-04T08:35:41.482Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-10-21T17:10:37.357Z", "last_updated_by": "user@email.com"}]}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  prompts_create:
    speakeasy-default-prompts-create:
      requestBody:
        application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "tools": ["summary", "hangup"], "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "include_default_tools": true}
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-07-06T00:30:20.403Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2023-01-20T11:09:16.789Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_update:
    speakeasy-default-prompts-update:
      requestBody:
        application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "tools": ["summary", "hangup"], "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "include_default_tools": true}
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-05-04T18:16:40.936Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-04-25T05:43:42.397Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-05-02T19:54:17.078Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_get_by_id:
    speakeasy-default-prompts-get-by-id:
      parameters:
        path:
          prompt_id: 931598
      responses:
        "200":
          application/json: {"name": "Weather Agent Prompt", "description": "Prompt for a weather agent.", "type": "prompt_v1", "context": "You are a weather agent. Answer the user's questions about weather and nothing else.", "llm_config": {"model": "gpt-4o", "version": "2024-05-13", "api_version": "2024-06-01", "temperature": 1, "seed": 123}, "id": 1, "edit_comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "agent_count": 5, "tools_full": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "form"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-10-26T07:58:27.777Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-08-08T12:04:05.284Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "query"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}], "last_updated": "2024-10-08T23:21:57.432Z", "last_updated_by": "user@email.com"}]}
        "422":
          application/json: {}
  prompts_delete:
    speakeasy-default-prompts-delete:
      parameters:
        path:
          prompt_id: 545907
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  prompts_history:
    speakeasy-default-prompts-history:
      parameters:
        path:
          prompt_id: 627932
      responses:
        "200":
          application/json: [{"timestamp": "2024-01-01T12:00:00Z", "prompt_id": "1", "prompt_text": "You are a weather agent. Answer the user's questions about weather and nothing else.", "prompt_description": "Prompt for a weather agent.", "prompt_name": "Weather Agent Prompt", "comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "user_email": "user@email.com"}, {"timestamp": "2024-01-01T12:00:00Z", "prompt_id": "1", "prompt_text": "You are a weather agent. Answer the user's questions about weather and nothing else.", "prompt_description": "Prompt for a weather agent.", "prompt_name": "Weather Agent Prompt", "comments": "Updated prompt text to include requirement to not answer questions that aren't about weather.", "user_email": "user@email.com"}]
        "422":
          application/json: {}
  service_list:
    speakeasy-default-service-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}, {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}, {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  service_create:
    speakeasy-default-service-create:
      requestBody:
        application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information"}
      responses:
        "200":
          application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  service_update:
    speakeasy-default-service-update:
      requestBody:
        application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo"}
      responses:
        "200":
          application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  session_label_get_by_id:
    speakeasy-default-session-label-get-by-id:
      parameters:
        path:
          session_label_id: 931598
      responses:
        "200":
          application/json: {"session_id": 1, "type": "human-rating", "code": "BAD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}
        "422":
          application/json: {}
  session_label_create:
    speakeasy-default-session-label-create:
      requestBody:
        application/json: {"session_id": 1, "type": "auto-rating", "code": "BAD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"]}
      responses:
        "200":
          application/json: {"session_id": 1, "type": "auto-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Speech transcription (STT)"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}
        "422":
          application/json: {}
  session_labels_list:
    speakeasy-default-session-labels-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["issue_categories"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"session_id": 1, "type": "human-rating", "code": "BAD", "user_email": "user@email.com", "issue_categories": ["Silent treatment"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}, {"session_id": 1, "type": "auto-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Speech transcription (STT)"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}, {"session_id": 1, "type": "human-rating", "code": "GOOD", "user_email": "user@email.com", "issue_categories": ["Speech transcription (STT)"], "id": 1, "timestamp": "2024-01-01T12:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  sessions_list:
    speakeasy-default-sessions-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["target"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"timestamp": "2024-08-22T19:26:20.850Z", "channel_manager_service": "console", "channel_manager_type": "web_chat_v1", "source": "+18042221111"}, {"timestamp": "2023-06-17T12:14:27.999Z", "channel_manager_service": "hedy", "channel_manager_type": "voice_sip_v1", "source": "user@email.com"}, {"timestamp": "2025-02-26T06:14:46.641Z", "channel_manager_service": "console", "channel_manager_type": "voice_sip_v1", "source": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  session_get_by_id:
    speakeasy-default-session-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"timestamp": "2025-10-18T00:43:47.367Z", "channel_manager_service": "console", "channel_manager_type": "voice_twilio_v1", "source": "+18042221111"}
        "422":
          application/json: {}
  generate_session_recording_urls:
    speakeasy-default-generate-session-recording-urls:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {}
        "422":
          application/json: {}
  session_recording_stream:
    speakeasy-default-session-recording-stream:
      parameters:
        query:
          token: "<value>"
      responses:
        "200":
          application/octet-stream: "x-file: example.file"
        "422":
          application/json: {}
  session_transcript_get_by_id:
    speakeasy-default-session-transcript-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"session_id": "<id>", "transcription": [{"timestamp": "2024-07-07T13:01:26.809Z", "lang": "unset", "source": "agent"}, {"timestamp": "2024-08-03T14:44:32.694Z", "lang": "es-US", "source": "user"}, {"timestamp": "2025-06-21T03:22:37.071Z", "lang": "es-US", "source": "agent"}], "actions": []}
        "422":
          application/json: {}
  tool_list:
    speakeasy-default-tool-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": {}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-04-22T08:39:55.981Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-08-22T19:26:20.850Z", "last_updated_by": "user@email.com"}, {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-01-13T10:26:00.433Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  tool_create:
    speakeasy-default-tool-create:
      requestBody:
        application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1}
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key1": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}, "key2": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2024-06-17T07:14:55.338Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  tool_update:
    speakeasy-default-tool-update:
      requestBody:
        application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint"}
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "post", "argument_location": "path"}, "defaults": "<value>", "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2025-07-28T19:04:48.565Z", "last_updated_by": "user@email.com"}
        "422":
          application/json: {}
  tool_get_by_name:
    speakeasy-default-tool-get-by-name:
      parameters:
        path:
          tool_name: "<value>"
      responses:
        "200":
          application/json: {"name": "Weather Fetcher", "definition": {"type": "endpoint", "tool": {"type": "function", "function": {"name": "get_weather", "description": "Get the weather for a city", "parameters": {}}}, "endpoint": {"url": "https://api.example.com", "method": "get", "argument_location": "body"}, "defaults": {"key": {"transform": {"action": "default", "when": {"key": "key", "value": "value"}}}}, "static_parameters": [{"name": "temperature_unit", "description": "Whether the temperature information should be fetched in celsius or fahrenheit.", "required": true, "type": "string", "default": "fahrenheit"}]}, "service_id": 1, "id": 1, "last_updated_comments": "Updated to use new API endpoint", "prompts_info": [{"id": 1, "name": "Test Prompt"}, {"id": 1, "name": "Test Prompt"}], "agents_info": [{"id": 1, "name": "Test Agent"}, {"id": 1, "name": "Test Agent"}], "last_updated": "2023-11-12T08:16:17.918Z", "last_updated_by": "user@email.com", "fields": ["<value>", "<value>"]}
        "422":
          application/json: {}
  post_session_events_dashboard:
    speakeasy-default-post-session-events-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://black-and-white-forgery.name"}
  post_session_summary_dashboard:
    speakeasy-default-post-session-summary-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://white-elevation.org"}
  post_session_transfers_dashboard:
    speakeasy-default-post-session-transfers-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://private-deer.biz/"}
  post_sessions_dashboard:
    speakeasy-default-post-sessions-dashboard:
      responses:
        "200":
          application/json: {"embedded_id": "<id>", "guest_token": "<value>", "name": "<value>", "superset_url": "https://only-napkin.net"}
  data_sources_list:
    speakeasy-default-data-sources-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2025-01-13T10:26:00.433Z", "last_updated_by": "user@email.com"}, {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2023-09-09T18:28:08.953Z", "last_updated_by": "user@email.com"}, {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2024-11-27T13:02:27.296Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  data_sources_create:
    speakeasy-default-data-sources-create:
      requestBody:
        application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "text": "The following are names and addresses of pizza shops.\n\nCool Pizza, 123 Main St.\n\nReally Good Pizza, 456 Water St.\n\nThe Best Pizza, 789 Circle Dr."}
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2024-04-02T12:48:32.253Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_update:
    speakeasy-default-data-sources-update:
      requestBody:
        application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "text": "The following are names and addresses of pizza shops.\n\nCool Pizza, 123 Main St.\n\nReally Good Pizza, 456 Water St.\n\nThe Best Pizza, 789 Circle Dr."}
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2024-01-13T16:52:57.274Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_get_by_name:
    speakeasy-default-data-sources-get-by-name:
      parameters:
        path:
          name: "<value>"
          data_source_name: "<value>"
      responses:
        "200":
          application/json: {"name": "<value>", "labels": ["Location Info"], "chunk": true, "chunk_delimiter": "\n\n", "updated_at": "2023-08-22T11:18:37.447Z", "last_updated_by": "<value>", "text": "<value>"}
        "422":
          application/json: {}
  data_sources_delete_by_name:
    speakeasy-default-data-sources-delete-by-name:
      parameters:
        path:
          name: "<value>"
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  data_sources_delete:
    speakeasy-default-data-sources-delete:
      parameters:
        path:
          data_source_name: "<value>"
          data_source_id: 545907
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  services_get_by_id:
    speakeasy-default-services-get-by-id:
      parameters:
        path:
          service_id: 931598
      responses:
        "200":
          application/json: {"name": "Weather tools", "description": "Service containing tools for fetching weather information", "id": 1, "last_updated_comments": "Updated description to correct typo", "last_updated": "2024-01-01T12:00:00Z", "last_updated_by": "user@email.com", "tools": ["hangup", "summary"]}
        "422":
          application/json: {}
  service_delete:
    speakeasy-default-service-delete:
      parameters:
        path:
          service_id: 545907
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  tool_delete:
    speakeasy-default-tool-delete:
      parameters:
        path:
          tool_name: "<value>"
        query:
          reason: "<value>"
      responses:
        "200":
          application/json: "<value>"
        "422":
          application/json: {}
  post_list_dashboard:
    speakeasy-default-post-list-dashboard:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}, {"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}, {"name": "session_summary", "display_name": "Session Summary", "rank": 0, "label": "dashboard"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422":
          application/json: {}
  post_get_dashboard:
    speakeasy-default-post-get-dashboard:
      parameters:
        query:
          dashboard_name: "<value>"
      responses:
        "200":
          application/json: {"embedded_id": "976ef486-d1ea-49c7-ba81-18e955d80286", "guest_token": "some-guest-token", "name": "session_summary", "display_name": "Session Summary", "superset_url": "https://somesuperseturl.com", "rank": 0, "label": "dashboard"}
        "422":
          application/json: {}
  data_sources_get_by_id:
    speakeasy-default-data-sources-get-by-id:
      parameters:
        path:
          data_source_id: 931598
      responses:
        "200":
          application/json: {"name": "Rain", "description": "Information about rain.", "labels": ["Weather Info"], "chunk": false, "chunk_delimiter": "", "id": 1, "edit_comments": "Added new info", "updated_at": "2023-02-06T16:50:06.315Z", "last_updated_by": "user@email.com", "text": "<value>"}
        "422": {}
  insights_workflow_list:
    speakeasy-default-insights-workflow-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  insights_workflow_create:
    speakeasy-default-insights-workflow-create:
      requestBody:
        application/json: {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE"}
      responses:
        "200":
          application/json: {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  insights_workflow_get_by_id:
    speakeasy-default-insights-workflow-get-by-id:
      parameters:
        path:
          workflow_id: 931598
      responses:
        "200":
          application/json: {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  insights_workflow_update:
    speakeasy-default-insights-workflow-update:
      parameters:
        path:
          workflow_id: 265006
      requestBody:
        application/json: {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE"}
      responses:
        "200":
          application/json: {"name": "summary-workflow", "description": "Default workflow - generates a summary of the call", "insight_tool_ids": [1], "conditions": {}, "status": "ACTIVE", "id": 1, "insight_tools": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  directory_workflow_delete:
    speakeasy-default-directory-workflow-delete:
      parameters:
        path:
          workflow_id: 545907
  insight_tool_list:
    speakeasy-default-insight-tool-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  insights_tool_create:
    speakeasy-default-insights-tool-create:
      requestBody:
        application/json: {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1}
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  insight_tool_get_by_id:
    speakeasy-default-insight-tool-get-by-id:
      parameters:
        path:
          tool_id: "<id>"
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  insights_tool_update:
    speakeasy-default-insights-tool-update:
      parameters:
        path:
          tool_id: 198183
      requestBody:
        application/json: {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1}
      responses:
        "200":
          application/json: {"name": "summary-tool", "description": "Default tool - generates a summary of the call", "version": 1, "tool_arguments": {}, "insight_tool_definition_id": 1, "id": 1, "insight_tool_definition": {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  insight_tool_get_definitions:
    speakeasy-default-insight-tool-get-definitions:
      responses:
        "200":
          application/json: [{"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}, {"id": 1, "name": "llm_tool", "type": "<value>", "description": "An LLM tool evaluates a transcript with a given prompt", "tool_parameters": {}, "tool_result_set": {}}]
  session_summary_get_by_id:
    speakeasy-default-session-summary-get-by-id:
      parameters:
        path:
          session_id: "<id>"
  session_full_summary_get_by_id:
    speakeasy-default-session-full-summary-get-by-id:
      parameters:
        path:
          session_id: "<id>"
      responses:
        "200":
          application/json: {"summary": "The customer service agent successfully assisted the caller with their inquiry and the call ended positively.", "rating": "Good"}
        "422": {}
  language_groups_list:
    speakeasy-default-language-groups-list:
      parameters:
        query:
          limit: 25
          page: 0
          search_fields: ["name"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}, {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}, {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  language_groups_create:
    speakeasy-default-language-groups-create:
      requestBody:
        application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true}
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422": {}
  language_groups_update:
    speakeasy-default-language-groups-update:
      requestBody:
        application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support."}
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422": {}
  language_groups_get_by_id:
    speakeasy-default-language-groups-get-by-id:
      parameters:
        path:
          language_group_id: 931598
      responses:
        "200":
          application/json: {"name": "Call Center 1 Languages", "description": "Languages spoken by operators at Call Center 1", "language_configs": [{"language_code": "en-US", "voice_provider": "OpenAI", "voice_display_name": "Alloy", "dtmf_code": 1}, {"language_code": "es-US", "voice_provider": "Google", "voice_display_name": "Alejandro", "dtmf_code": 1}], "skip_current_language_in_message": true, "id": 1, "edit_comments": "Added Spanish support.", "agents_info": [{"id": 1, "name": "Test Agent"}], "updated_at": "2024-01-01T00:00:00Z", "last_updated_by": "user@mail.com"}
        "422": {}
  language_groups_delete:
    speakeasy-default-language-groups-delete:
      parameters:
        path:
          language_group_id: 545907
        query:
          reason: "<value>"
  get_session_data_by_sid:
    speakeasy-default-get-session-data-by-sid:
      parameters:
        path:
          channel_manager_service: "<value>"
          channel_manager_sid: "<id>"
      responses:
        "200":
          application/json: {"session_id": "123", "source": "+1234567890", "target": "+1239876543", "is_test": false, "messages": [{"role": "user", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}, {"role": "user", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}]}
        "422": {}
  get_session_data_by_session_id:
    speakeasy-default-get-session-data-by-session-id:
      parameters:
        path:
          session_id: 744354
      responses:
        "200":
          application/json: {"session_id": "123", "source": "+1234567890", "target": "+1239876543", "is_test": false, "messages": [{"role": "user", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}, {"role": "agent", "dialog": {"text": "Tell me about Syllable.ai!"}, "tool_calls": [{"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}, {"tool_call_id": "call_arbitrary_id", "tool_name": "general_information_web", "tool_arguments": {"question": "Tell me about Syllable.ai!"}, "timestamp": "2024-06-19T00:00:00"}], "timestamp": "2024-06-19T00:00:00"}]}
        "422": {}
  get_session_tool_call_result_by_id:
    speakeasy-default-get-session-tool-call-result-by-id:
      parameters:
        path:
          session_id: 187795
          tool_call_id: "<id>"
      responses:
        "200":
          application/json: {"tool_name": "general_information_web", "tool_result": {"answer": "Syllable is a platform for building and managing AI voice agents..."}}
        "422": {}
  insights_list:
    speakeasy-default-insights-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["insight_tool_id"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"id": 1, "session_id": 1, "insight_tool_id": 1, "insight_tool_version": 1, "insight_key": "summary", "string_value": "This is a summary of the call", "numeric_value": 1, "json_value": {}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z"}, {"id": 1, "session_id": 1, "insight_tool_id": 1, "insight_tool_version": 1, "insight_key": "summary", "string_value": "This is a summary of the call", "numeric_value": 1, "json_value": {}, "created_at": "2025-04-08T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  create_takeout_api_v1_takeouts_create_post:
    speakeasy-default-create-takeout-api-v1-takeouts-create-post:
      requestBody:
        application/json: {"sub_organization_id": 38300}
  get_takeout_api_v1_takeouts_get__job_id__get:
    speakeasy-default-get-takeout-api-v1-takeouts-get-job-id-get:
      parameters:
        path:
          job_id: "<id>"
  prompt_get_supported_llms:
    speakeasy-default-prompt-get-supported-llms:
      responses:
        "200":
          application/json: [{"model": "gpt-4o", "display_name": "GPT-4o", "version": "2024-05-13", "api_version": "2024-06-01", "deprecated": false}]
  insights_workflow_delete:
    speakeasy-default-insights-workflow-delete:
      parameters:
        path:
          workflow_id: 545907
  queue_sessions_workflow:
    speakeasy-default-queue-sessions-workflow:
      requestBody:
        application/json: {"workflow_name": "summary-workflow", "session_id_list": ["[12334,23445,34556]"]}
  outbound_batch_list:
    speakeasy-default-outbound-batch-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["expires_on"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  outbound_batch_create:
    speakeasy-default-outbound-batch-create:
      requestBody:
        application/json: {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z"}
      responses:
        "200":
          application/json: {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  outbound_batch_get_by_id:
    speakeasy-default-outbound-batch-get-by-id:
      parameters:
        path:
          batch_id: "<id>"
      responses:
        "200":
          application/json: {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  outbound_batch_update:
    speakeasy-default-outbound-batch-update:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
      responses:
        "200":
          application/json: {"batch_id": "20250409.9", "campaign_id": 1, "expires_on": "2025-04-10T00:00:00Z", "count": 152, "created_at": "2025-04-09T00:00:00Z", "deleted_at": "2025-04-09T00:00:00Z", "deleted_reason": "User request", "last_worked_on": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  outbound_batch_delete:
    speakeasy-default-outbound-batch-delete:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/x-www-form-urlencoded: {"delete_reason": "<value>"}
  outbound_batch_upload:
    speakeasy-default-outbound-batch-upload:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        multipart/form-data: {"file": {"": "x-file: example.file"}}
  outbound_batch_results:
    speakeasy-default-outbound-batch-results:
      parameters:
        path:
          batch_id: "<id>"
        query: {}
      responses:
        "200":
          application/json: [{"reference_id": "12345", "target": "user@email.com", "request_variables": {}, "channel_manager_sid": "LMc4b16a9df2ce33d84b3d30581fe6598c", "created_at": "2025-04-08T00:00:00Z", "sent_at": "2025-04-09T00:00:00Z", "attempt_count": 0, "session_id": 1, "conversation_id": 1, "channel_manager_status": "FAILED", "insights_status": "PENDING"}, {"reference_id": "12345", "target": "user@email.com", "request_variables": {}, "channel_manager_sid": "LMc4b16a9df2ce33d84b3d30581fe6598c", "created_at": "2025-04-08T00:00:00Z", "sent_at": "2025-04-09T00:00:00Z", "attempt_count": 0, "session_id": 1, "conversation_id": 1, "channel_manager_status": "BUSY", "insights_status": "FAILED"}]
        "422": {}
  outbound_batch_add:
    speakeasy-default-outbound-batch-add:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: {"reference_id": "12345", "target": "user@email.com", "request_variables": {}}
  outbound_batch_remove:
    speakeasy-default-outbound-batch-remove:
      parameters:
        path:
          batch_id: "<id>"
      requestBody:
        application/json: ["<value>", "<value>"]
  outbound_campaign_list:
    speakeasy-default-outbound-campaign-list:
      parameters:
        query:
          page: 0
          limit: 25
          search_fields: ["timezone"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "demo", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "account@email.com", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "30m", "pause_seconds": 30, "id": 1, "created_at": "2025-04-09T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}, {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "test", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "+19032900844", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "12h", "pause_seconds": 30, "id": 1, "created_at": "2025-04-09T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  outbound_campaign_create:
    speakeasy-default-outbound-campaign-create:
      requestBody:
        application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "test", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "account@email.com", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "12h", "pause_seconds": 30}
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "test", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "+19032900844", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "7d", "pause_seconds": 30, "id": 1, "created_at": "2025-04-09T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  outbound_campaign_get_by_id:
    speakeasy-default-outbound-campaign-get-by-id:
      parameters:
        path:
          campaign_id: "<id>"
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "demo", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "account@email.com", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "12h", "pause_seconds": 30, "id": 1, "created_at": "2025-04-09T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  outbound_campaign_update:
    speakeasy-default-outbound-campaign-update:
      parameters:
        path:
          campaign_id: 344620
      requestBody:
        application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "demo", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "account@email.com", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "12h", "pause_seconds": 30}
      responses:
        "200":
          application/json: {"campaign_name": "Outbound Campaign 1", "description": "This is a test campaign", "label": "demo", "campaign_variables": {}, "daily_start_time": "09:00:00", "daily_end_time": "17:00:00", "timezone": "America/New_York", "source": "account@email.com", "caller_id": "19995551234", "rate": 5, "retry_count": 1, "retry_interval": "12h", "pause_seconds": 30, "id": 1, "created_at": "2025-04-09T00:00:00Z", "updated_at": "2025-04-09T00:00:00Z", "last_updated_by": "user@email.com"}
        "422": {}
  incident_get_by_id:
    speakeasy-default-incident-get-by-id:
      parameters:
        path:
          incident_id: 931598
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}
        "422": {}
  incident_update:
    speakeasy-default-incident-update:
      parameters:
        path:
          incident_id: 656776
      requestBody:
        application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}
        "422": {}
  incident_delete:
    speakeasy-default-incident-delete:
      parameters:
        path:
          incident_id: 545907
        query:
          reason: "<value>"
  incident_create:
    speakeasy-default-incident-create:
      requestBody:
        application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A"}
      responses:
        "200":
          application/json: {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}
        "422": {}
  incident_list:
    speakeasy-default-incident-list:
      parameters:
        query:
          limit: 25
          offset: 0
          page: 0
          search_fields: ["start_datetime"]
          search_field_values: ["Some Object Name"]
          start_datetime: "2023-01-01T00:00:00Z"
          end_datetime: "2024-01-01T00:00:00Z"
      responses:
        "200":
          application/json: {"items": [{"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}, {"description": "Service outage in region X", "start_datetime": "2023-10-01T08:00:00Z", "resolution_datetime": "2023-10-01T12:00:00Z", "impact_category": "High", "sessions_impacted": 1500, "markdown": "**Incident Details**", "organization_id": 123, "sub_organization_id": 456, "sub_organization": "SubOrg A", "id": 1, "created_at": "2023-10-01T08:00:00Z", "updated_at": "2023-10-01T08:00:00Z"}], "page": 0, "page_size": 25, "total_pages": 4, "total_count": 100}
        "422": {}
  incident_get_organizations: {}
  insights_tool_test:
    speakeasy-default-insights-tool-test:
      requestBody:
        application/json: {"tool_name": "summary-tool", "session_id": "283467"}
  takeouts_create: {}
  takeouts_get_by_job_id:
    speakeasy-default-takeouts-get-by-job-id:
      parameters:
        path:
          job_id: "<id>"
  session_latency_get_by_id:
    speakeasy-default-session-latency-get-by-id:
      parameters:
        path:
          session_id: "<id>"
examplesVersion: 1.0.0
generatedTests: {}
