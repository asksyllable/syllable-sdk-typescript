{
  "openapi": "3.1.0",
  "info": {
    "title": "SyllableSDK",
    "description": "\n# Syllable Platform SDK\n\nSyllable SDK gives you the power of awesome AI agentry. ðŸš€\n\n## Overview\n\nThe Syllable SDK provides a comprehensive set of tools and APIs to integrate powerful AI  \ncapabilities into your communication applications. Whether you're building chatbots, virtual\nassistants, or any other AI-driven solutions, Syllable SDK has got you covered.\n\n## Features\n\n- **Natural Language Processing (NLP)**: Understand and generate human language with ease.\n- **Machine Learning Models**: Leverage pre-trained models or train your own custom models.\n- **Speech Recognition**: Convert speech to text and vice versa.\n- **Data Analytics**: Analyze and visualize data to gain insights.\n- **Integration**: Seamlessly integrate with other services and platforms.\n\n",
    "version": "0.0.2"
  },
  "servers": [
    {
      "url": "https://api.syllable.ai",
      "description": "API server"
    },
    {
      "url": "https://trial.api.syllable.ai",
      "description": "Trial API server"
    }
  ],
  "paths": {
    "/api/v1/agents/": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Agent List",
        "description": "List the existing agents",
        "operationId": "agent_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AgentProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AgentProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_AgentResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Create Agent",
        "description": "Create a new agent",
        "operationId": "agent_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Update Agent",
        "description": "Update an existing agent",
        "operationId": "agent_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/{agent_id}": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Get Agent By Id",
        "description": "Get an agent by ID.",
        "operationId": "agent_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Delete Agent",
        "operationId": "agent_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Agent Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/voices/available": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Get Available Agent Voices",
        "description": "Get available agent voices.",
        "operationId": "agent_get_available_voices",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AgentVoice"
                  },
                  "type": "array",
                  "title": "Response Agent Get Available Voices"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/channels/": {
      "get": {
        "tags": [
          "channels",
          "V1"
        ],
        "summary": "Get Channels",
        "operationId": "channels_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChannelProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Channel_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/test/messages": {
      "post": {
        "tags": [
          "agents.test",
          "V1"
        ],
        "summary": "Send New Message",
        "description": "Send a new message",
        "operationId": "send_test_message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/conversations/": {
      "get": {
        "tags": [
          "conversations",
          "V1"
        ],
        "summary": "Conversations List",
        "operationId": "conversations_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConversationProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ConversationProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Conversation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/": {
      "get": {
        "tags": [
          "events",
          "V1"
        ],
        "summary": "Events List",
        "operationId": "events_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Event_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/custom_messages/": {
      "get": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Custom Messages List",
        "description": "List the existing custom_messages",
        "operationId": "custom_messages_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomMessageProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomMessageProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomMessageProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_CustomMessageResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Create Custom Message",
        "description": "Create a new custom message",
        "operationId": "custom_messages_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomMessageCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Update Custom Message",
        "description": "Update a custom message",
        "operationId": "custom_messages_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomMessageUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/custom_messages/{custom_message_id}": {
      "get": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Get Custom Message By Id",
        "description": "Get the custom message by its ID",
        "operationId": "custom_message_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "custom_message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Custom Message Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Delete Custom Message",
        "description": "Delete custom message by ID",
        "operationId": "custom_messages_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "custom_message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Custom Message Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Prompt List",
        "description": "List the existing prompts",
        "operationId": "prompts_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PromptProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_PromptResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Create Prompt",
        "description": "Create a new prompt",
        "operationId": "prompts_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Update Prompt",
        "description": "Update an existing prompt",
        "operationId": "prompts_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/{prompt_id}": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Get Prompt By Id",
        "description": "Get a prompt by ID",
        "operationId": "prompts_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Delete Prompt",
        "description": "Delete a prompt",
        "operationId": "prompts_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/{prompt_id}/history": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Get Prompt History",
        "description": "Get a prompt by ID",
        "operationId": "prompts_history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptHistory"
                  },
                  "title": "Response Prompts History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/services/": {
      "get": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Service List",
        "description": "List the existing agents",
        "operationId": "service_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ServiceProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Service_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Create Service",
        "operationId": "service_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Update Service",
        "operationId": "service_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session_labels/{session_label_id}": {
      "get": {
        "tags": [
          "sessions.labels",
          "V1"
        ],
        "summary": "Get Label By Id",
        "operationId": "session_label_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_label_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Session Label Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session_labels/": {
      "post": {
        "tags": [
          "sessions.labels",
          "V1"
        ],
        "summary": "Create Label",
        "description": "Create a new label",
        "operationId": "session_label_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLabelCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "sessions.labels",
          "V1"
        ],
        "summary": "Session Labels List",
        "operationId": "session_labels_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionLabelProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SessionLabelProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionLabelProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_SessionLabel_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Sessions List",
        "operationId": "sessions_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SessionProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Session_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/transcript/{session_id}": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Get Session Transcript By Id",
        "operationId": "session_transcript_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Get A Single Session By Id",
        "operationId": "session_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/recording/{session_id}": {
      "post": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Generate Recording Urls",
        "operationId": "generate_session_recording_urls",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/recording/stream": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Stream Recording",
        "operationId": "session_recording_stream",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/": {
      "get": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Tool List",
        "description": "List the existing tools",
        "operationId": "tool_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ToolProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ToolProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToolProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ToolResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Create Tool",
        "description": "Create a new tool",
        "operationId": "tool_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Update Tool",
        "description": "Update an existing tool",
        "operationId": "tool_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/{tool_name}": {
      "get": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Tool Info",
        "description": "Get the details of a specific tool",
        "operationId": "tool_get_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "tool_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/available-targets": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Available Targets List",
        "description": "List the available phone numbers",
        "operationId": "available_targets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AvailableTargetProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AvailableTargetProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableTargetProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_AvailableTarget_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/targets": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Get Channel Targets",
        "operationId": "channel_targets_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelTargetProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChannelTargetProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelTargetProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ChannelTargetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}/targets": {
      "post": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Assign A Channel Target",
        "operationId": "channel_targets_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelTargetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}/targets/{target_id}": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Get A Channel Target",
        "operationId": "channel_targets_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Target Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "channels.targets",
          "V1"
        ],
        "summary": "Edit Channel Target",
        "description": "Update channel target by ID",
        "operationId": "channel_targets_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Target Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelTargetUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}": {
      "delete": {
        "tags": [
          "channels.targets",
          "V1"
        ],
        "summary": "Delete Channel Target",
        "description": "Hard-delete a channel target by ID",
        "operationId": "channel_targets_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/directory_members/": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Directory Member List",
        "description": "List the existing directory_members",
        "operationId": "directory_member_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DirectoryMemberProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DirectoryMemberProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectoryMemberProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_DirectoryMember_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Create Directory Member",
        "description": "Create a new member in the directory",
        "operationId": "directory_member_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryMemberCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/directory_members/{member_id}": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Get Directory Member By Id",
        "description": "Get a DirectoryMember by ID.",
        "operationId": "directory_member_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Update Directory Member",
        "description": "Update a DirectoryMember.",
        "operationId": "directory_member_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Delete Directory Member",
        "description": "Delete a DirectoryMember.",
        "operationId": "directory_member_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/directory_members/upload/": {
      "put": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Bulk Load Directory Members",
        "description": "Update Directory Members in chunks of 100.",
        "operationId": "directory_member_bulk_load",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_directory_member_bulk_load"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/directory_members/download/": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Download Directory Members",
        "description": "Download the entire directory as a JSON file.",
        "operationId": "directory_member_download",
        "responses": {
          "200": {
            "description": "Directory downloaded successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/session_events": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Events",
        "description": "METHOD: POST\nURL: /dashboard/session_events\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_events_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/session_summary": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Summary",
        "description": "METHOD: POST\nURL: /dashboard/session_summary\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_summary_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/session_transfers": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Transfers",
        "description": "METHOD: POST\nURL: /dashboard/session_transfers\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_transfers_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/sessions": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Sessions",
        "description": "METHOD: POST\nURL: /dashboard/sessions\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_sessions_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AgentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-MX"
              ]
            ]
          },
          "variables": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Should be prefixed with \"vars.\".",
            "examples": [
              {
                "vars.hospital": "Weill Cornell Medical Center"
              }
            ]
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers"
        ],
        "title": "AgentCreate"
      },
      "AgentProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "label",
          "name_description",
          "type",
          "timezone",
          "prompt_id",
          "prompt_id_list",
          "custom_message_id",
          "languages",
          "variables",
          "prompt_tool_defaults",
          "tool_headers",
          "updated_at",
          "last_updated_by"
        ],
        "title": "AgentProperties"
      },
      "AgentResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-MX"
              ]
            ]
          },
          "variables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Should be prefixed with \"vars.\".",
            "examples": [
              {
                "vars.hospital": "Weill Cornell Medical Center"
              }
            ]
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The agent ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of most recent update"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email of the user who last updated the agent"
          },
          "prompt": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "The prompt associated with the agent."
          },
          "custom_message": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomMessageResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom message associated with the agent. Will be delivered as a greeting at the beginning of a conversation."
          },
          "channel_targets": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Targets",
            "description": "Channel targets associated with the agent"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers",
          "id",
          "updated_at",
          "last_updated_by"
        ],
        "title": "AgentResponse"
      },
      "AgentToolDefaults": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool"
          },
          "default_values": {
            "items": {
              "$ref": "#/components/schemas/AgentToolFieldDefault"
            },
            "type": "array",
            "title": "Default Values",
            "description": "The default values for fields used in the tool"
          }
        },
        "type": "object",
        "required": [
          "tool_name",
          "default_values"
        ],
        "title": "AgentToolDefaults"
      },
      "AgentToolFieldDefault": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name",
            "description": "The name of the field"
          },
          "default_value": {
            "title": "Default Value",
            "description": "The default value for the field"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "default_value"
        ],
        "title": "AgentToolFieldDefault"
      },
      "AgentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-MX"
              ]
            ]
          },
          "variables": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Should be prefixed with \"vars.\".",
            "examples": [
              {
                "vars.hospital": "Weill Cornell Medical Center"
              }
            ]
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The agent ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers",
          "id"
        ],
        "title": "AgentUpdate"
      },
      "AgentVoice": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/SttProvider"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "var_name": {
            "$ref": "#/components/schemas/AgentVoiceVarName"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "display_name",
          "var_name"
        ],
        "title": "AgentVoice"
      },
      "AgentVoiceVarName": {
        "type": "string",
        "enum": [
          "openai:alloy",
          "openai:echo",
          "openai:fable",
          "openai:nova",
          "openai:onyx",
          "openai:shimmer",
          "elevenlabs:Alice",
          "elevenlabs:Bill",
          "elevenlabs:Brian",
          "elevenlabs:Callum",
          "elevenlabs:Charlie",
          "elevenlabs:Charlotte",
          "elevenlabs:Chris",
          "elevenlabs:Daniel",
          "elevenlabs:Eric",
          "elevenlabs:George",
          "elevenlabs:Jessica",
          "elevenlabs:Laura",
          "elevenlabs:Liam",
          "elevenlabs:Lily",
          "elevenlabs:Matilda",
          "elevenlabs:River",
          "elevenlabs:Roger",
          "elevenlabs:Sarah",
          "elevenlabs:Will",
          "wavenet:female/en-US-Neural2-F",
          "wavenet:male/en-US-Neural2-D",
          "wavenet:female/en-US-Studio-O"
        ],
        "title": "AgentVoiceVarName"
      },
      "AvailableTarget": {
        "properties": {
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id"
          },
          "channel_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Name"
          },
          "target": {
            "type": "string",
            "title": "Target"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "channel_id",
          "channel_name",
          "target"
        ],
        "title": "AvailableTarget"
      },
      "AvailableTargetProperties": {
        "type": "string",
        "enum": [
          "channel_id",
          "channel_name",
          "target"
        ],
        "title": "AvailableTargetProperties"
      },
      "Body_directory_member_bulk_load": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_directory_member_bulk_load"
      },
      "Channel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The channel name"
          },
          "channel_service": {
            "$ref": "#/components/schemas/ChannelServices",
            "description": "The service for the channel"
          },
          "supported_modes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Modes",
            "description": "The comma-delimited list of supported modes for the channel"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The channel ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "channel_service",
          "id"
        ],
        "title": "Channel"
      },
      "ChannelProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "channel_service",
          "supported_modes"
        ],
        "title": "ChannelProperties"
      },
      "ChannelServices": {
        "type": "string",
        "enum": [
          "sip",
          "twilio",
          "email",
          "webchat"
        ],
        "title": "ChannelServices"
      },
      "ChannelTargetCreateRequest": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode"
        ],
        "title": "ChannelTargetCreateRequest"
      },
      "ChannelTargetProperties": {
        "type": "string",
        "enum": [
          "id",
          "channel_id",
          "channel_name",
          "agent_id",
          "target",
          "target_mode",
          "fallback_target",
          "is_test",
          "updated_at"
        ],
        "title": "ChannelTargetProperties"
      },
      "ChannelTargetResponse": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the channel target"
          },
          "channel_name": {
            "type": "string",
            "title": "Channel Name",
            "description": "The name of the channel associated with the channel target"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of the most recent update to the channel target"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "Email of the user who last updated the channel target"
          },
          "agent": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "Definition of the agent for the channel target"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode",
          "id",
          "channel_name",
          "updated_at",
          "last_updated_by"
        ],
        "title": "ChannelTargetResponse",
        "description": "Class for all Channel Target responses"
      },
      "ChannelTargetUpdateRequest": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the channel target"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode",
          "id"
        ],
        "title": "ChannelTargetUpdateRequest"
      },
      "Conversation": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id"
          },
          "agent_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Name"
          },
          "agent_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Type"
          },
          "prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Id"
          },
          "prompt_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Name"
          },
          "prompt_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Version"
          },
          "llm_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Provider"
          },
          "llm_model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Model"
          },
          "llm_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Version"
          },
          "is_legacy": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Legacy"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "conversation_id"
        ],
        "title": "Conversation"
      },
      "ConversationProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "agent_type",
          "agent_id",
          "agent_name",
          "prompt_id",
          "prompt_name",
          "llm_provider",
          "llm_model",
          "llm_version",
          "is_legacy"
        ],
        "title": "ConversationProperties"
      },
      "CustomMessageCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text"
        ],
        "title": "CustomMessageCreateRequest"
      },
      "CustomMessageProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "text",
          "label",
          "updated_at"
        ],
        "title": "CustomMessageProperties"
      },
      "CustomMessageResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the custom message"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of the most recent update to the custom message"
          },
          "agent_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Count",
            "description": "The number of agents using the custom message"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "The email address of the user who most recently updated the custom message",
            "examples": [
              "user@email.com"
            ]
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text",
          "id",
          "updated_at",
          "last_updated_by"
        ],
        "title": "CustomMessageResponse"
      },
      "CustomMessageRule": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the rule"
          },
          "time_range_start": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Range Start",
            "description": "The start of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)",
            "examples": [
              "09:00"
            ]
          },
          "time_range_end": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Range End",
            "description": "The end of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)",
            "examples": [
              "17:00"
            ]
          },
          "date": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "\\b(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date",
            "description": "The date for the rule in YYYY-MM-DD format",
            "examples": [
              "2025-01-01"
            ]
          },
          "days_of_week": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DayOfWeek"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Of Week",
            "description": "The days of the week for the rule",
            "examples": [
              [
                "mo",
                "tu",
                "we",
                "th",
                "fr"
              ]
            ]
          },
          "invert": {
            "type": "boolean",
            "title": "Invert",
            "description": "Whether the rule logic should be inverted (i.e. \"not\")"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Message text associated with the rule",
            "examples": [
              "Sorry, we're closed today"
            ]
          }
        },
        "type": "object",
        "required": [
          "description",
          "invert",
          "text"
        ],
        "title": "CustomMessageRule"
      },
      "CustomMessageUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the custom message"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text",
          "id"
        ],
        "title": "CustomMessageUpdateRequest"
      },
      "Dashboard": {
        "properties": {
          "embedded_id": {
            "type": "string",
            "title": "Embedded Id"
          },
          "guest_token": {
            "type": "string",
            "title": "Guest Token"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "superset_url": {
            "type": "string",
            "title": "Superset Url"
          }
        },
        "type": "object",
        "required": [
          "embedded_id",
          "guest_token",
          "name",
          "superset_url"
        ],
        "title": "Dashboard"
      },
      "DayOfWeek": {
        "type": "string",
        "enum": [
          "mo",
          "tu",
          "we",
          "th",
          "fr",
          "sa",
          "su"
        ],
        "title": "DayOfWeek"
      },
      "DirectoryExtension": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "numbers": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Numbers"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DirectoryExtension"
      },
      "DirectoryMember": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "extensions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DirectoryExtension"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extensions"
          },
          "contact_tags": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Tags"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "DirectoryMember"
      },
      "DirectoryMemberCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "extensions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DirectoryExtension"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extensions"
          },
          "contact_tags": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Tags"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "DirectoryMemberCreate"
      },
      "DirectoryMemberProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "type",
          "extensions",
          "contact_tags",
          "updated_at"
        ],
        "title": "DirectoryMemberProperties"
      },
      "Event": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "attributes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributes"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "Event"
      },
      "EventProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "conversation_id",
          "source",
          "source_id",
          "category",
          "type",
          "user_id",
          "description",
          "attributes"
        ],
        "title": "EventProperties"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InternalTool": {
        "properties": {
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type",
            "description": "Always `function`.",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/ToolFunction",
            "description": "The tool definition including the JSON Schema of its parameters."
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "InternalTool",
        "description": "A tool definition to be used by the OpenAI API."
      },
      "ListResponse_AgentResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AgentResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[AgentResponse]"
      },
      "ListResponse_AvailableTarget_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AvailableTarget"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[AvailableTarget]"
      },
      "ListResponse_ChannelTargetResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ChannelTargetResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[ChannelTargetResponse]"
      },
      "ListResponse_Channel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Channel]"
      },
      "ListResponse_Conversation_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Conversation"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Conversation]"
      },
      "ListResponse_CustomMessageResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[CustomMessageResponse]"
      },
      "ListResponse_DirectoryMember_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DirectoryMember"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[DirectoryMember]"
      },
      "ListResponse_Event_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Event]"
      },
      "ListResponse_PromptResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PromptResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[PromptResponse]"
      },
      "ListResponse_Service_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Service]"
      },
      "ListResponse_SessionLabel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SessionLabel"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[SessionLabel]"
      },
      "ListResponse_Session_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Session"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Session]"
      },
      "ListResponse_ToolResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[ToolResponse]"
      },
      "OrderByDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "OrderByDirection"
      },
      "PromptCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config"
        ],
        "title": "PromptCreateRequest"
      },
      "PromptHistory": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the change"
          },
          "prompt_id": {
            "type": "string",
            "title": "Prompt Id",
            "description": "ID of the prompt"
          },
          "prompt_text": {
            "type": "string",
            "title": "Prompt Text",
            "description": "Text of the prompt"
          },
          "prompt_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Description",
            "description": "Description of the prompt"
          },
          "prompt_name": {
            "type": "string",
            "title": "Prompt Name",
            "description": "Name of the prompt"
          },
          "llm_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Config",
            "description": "String representation of LLM config for the prompt"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Comments describing the change"
          },
          "user_email": {
            "type": "string",
            "title": "User Email",
            "description": "Email address of the user who made the change"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "prompt_id",
          "prompt_text",
          "prompt_name",
          "user_email"
        ],
        "title": "PromptHistory",
        "description": "Record of a change to a prompt. Values reflect post-change state."
      },
      "PromptLlmConfig": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/PromptLlmProvider",
            "description": "Provider of the LLM model.",
            "default": "azure_openai",
            "examples": [
              "azure_openai",
              "openai"
            ]
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Name of the model. Must match the deployment name in Azure AI Studio.",
            "default": "gpt-4o",
            "examples": [
              "gpt-4o"
            ]
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Optional model version.",
            "examples": [
              "2024-05-13"
            ]
          },
          "api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Version",
            "description": "Version of the API. (Currently only used for Azure OpenAI.)",
            "examples": [
              "2024-06-01"
            ]
          }
        },
        "type": "object",
        "title": "PromptLlmConfig"
      },
      "PromptLlmProvider": {
        "type": "string",
        "enum": [
          "azure_openai",
          "openai"
        ],
        "title": "PromptLlmProvider",
        "description": "LLM API provider."
      },
      "PromptProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "name_description",
          "context",
          "tools",
          "llm_config",
          "last_updated",
          "last_updated_by",
          "agent_count"
        ],
        "title": "PromptProperties"
      },
      "PromptResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of the tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The prompt ID"
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the prompt"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated",
            "description": "The last updated date of the prompt"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email address of the user who most recently updated the prompt",
            "examples": [
              "user@email.com"
            ]
          },
          "agent_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Count",
            "description": "The number of agents using the prompt"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config",
          "id",
          "last_updated"
        ],
        "title": "PromptResponse"
      },
      "PromptUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The prompt ID"
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the prompt"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config",
          "id"
        ],
        "title": "PromptUpdateRequest"
      },
      "Service": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the service"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of the tools that belong to the service"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "tools"
        ],
        "title": "Service"
      },
      "ServiceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ServiceCreate"
      },
      "ServiceProperties": {
        "type": "string",
        "enum": [
          "id",
          "name"
        ],
        "title": "ServiceProperties"
      },
      "ServiceUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the service"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id"
        ],
        "title": "ServiceUpdate"
      },
      "Session": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id"
          },
          "channel_manager_service": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Service"
          },
          "channel_manager_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Type"
          },
          "channel_manager_sid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Sid"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id"
          },
          "agent_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Name"
          },
          "agent_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Type"
          },
          "agent_timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Timezone"
          },
          "prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Id"
          },
          "prompt_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Name"
          },
          "prompt_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Version"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration"
          },
          "session_label_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Label Id"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target"
          },
          "is_legacy": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Legacy"
          },
          "is_test": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Test"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "Session"
      },
      "SessionAction": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "tool_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Name"
          },
          "tool_request": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Request"
          },
          "tool_result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Result"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "SessionAction"
      },
      "SessionLabel": {
        "properties": {
          "session_id": {
            "type": "integer",
            "title": "Session Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "user_email": {
            "type": "string",
            "title": "User Email"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments"
          },
          "issue_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Categories",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The label ID"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "The timestamp of the label creation"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "type",
          "code",
          "user_email",
          "id",
          "timestamp"
        ],
        "title": "SessionLabel"
      },
      "SessionLabelCreate": {
        "properties": {
          "session_id": {
            "type": "integer",
            "title": "Session Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "user_email": {
            "type": "string",
            "title": "User Email"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments"
          },
          "issue_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Categories",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "type",
          "code",
          "user_email"
        ],
        "title": "SessionLabelCreate"
      },
      "SessionLabelProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "type",
          "code",
          "user_email",
          "issue_categories",
          "session_id_list"
        ],
        "title": "SessionLabelProperties"
      },
      "SessionProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "conversation_id",
          "channel_manager_service",
          "channel_manager_type",
          "channel_manager_sid",
          "agent_type",
          "agent_id",
          "agent_name",
          "prompt_id",
          "prompt_name",
          "source",
          "target",
          "duration",
          "is_legacy",
          "is_test"
        ],
        "title": "SessionProperties"
      },
      "SessionRecordingResponse": {
        "properties": {
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "recordings": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recordings"
          },
          "expiration": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration"
          }
        },
        "type": "object",
        "title": "SessionRecordingResponse"
      },
      "SessionText": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "SessionText"
      },
      "SessionTranscriptionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "transcription": {
            "items": {
              "$ref": "#/components/schemas/SessionText"
            },
            "type": "array",
            "title": "Transcription"
          },
          "actions": {
            "items": {
              "$ref": "#/components/schemas/SessionAction"
            },
            "type": "array",
            "title": "Actions"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "transcription",
          "actions"
        ],
        "title": "SessionTranscriptionResponse"
      },
      "SttProvider": {
        "type": "string",
        "enum": [
          "OpenAI",
          "ElevenLabs",
          "Google"
        ],
        "title": "SttProvider"
      },
      "TargetModes": {
        "type": "string",
        "enum": [
          "voice",
          "chat",
          "sms",
          "email"
        ],
        "title": "TargetModes",
        "description": "Available modes (communication methods) for channel targets."
      },
      "TestMessage": {
        "properties": {
          "service_name": {
            "type": "string",
            "title": "Service Name",
            "description": "Name of the service producing the message"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Name of the source of the message, should identify the user, like an email or username"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          },
          "test_id": {
            "type": "string",
            "title": "Test Id"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id"
          },
          "org_name": {
            "type": "string",
            "title": "Org Name"
          },
          "override_timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Override Timestamp"
          },
          "session_start": {
            "type": "boolean",
            "title": "Session Start",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "service_name",
          "source",
          "test_id",
          "agent_id",
          "org_name"
        ],
        "title": "TestMessage"
      },
      "TestMessageResponse": {
        "properties": {
          "test_id": {
            "type": "string",
            "title": "Test Id"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "response": {
            "type": "object",
            "title": "Response"
          },
          "response_text": {
            "type": "string",
            "title": "Response Text"
          }
        },
        "type": "object",
        "required": [
          "test_id",
          "agent_id",
          "text",
          "response_text"
        ],
        "title": "TestMessageResponse"
      },
      "ToolArgumentLocation": {
        "type": "string",
        "enum": [
          "body",
          "form",
          "path",
          "query"
        ],
        "title": "ToolArgumentLocation",
        "description": "The location of the argument in the request.\n'body' is used for JSON data in the POST request body.\n'form' is used for form data in the POST request body.\n'path' is used for URL path parameters.\n'query' is used for query parameters in the URL."
      },
      "ToolCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id"
        ],
        "title": "ToolCreateRequest"
      },
      "ToolDefinition": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "action",
                  "endpoint",
                  "context",
                  "log"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "The action to take when the LLM calls the tool."
          },
          "tool": {
            "$ref": "#/components/schemas/InternalTool",
            "description": "The tool definition to be used by the OpenAI API."
          },
          "endpoint": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToolHttpEndpoint"
              },
              {
                "type": "null"
              }
            ],
            "description": "The configuration for an HTTP API call."
          },
          "defaults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/ToolParameterDefault"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaults",
            "description": "The default values for the parameters of the function/tool call."
          },
          "result": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result",
            "description": "The optional result of the tool call. Only used for `context` tools."
          }
        },
        "type": "object",
        "required": [
          "tool"
        ],
        "title": "ToolDefinition",
        "description": "A tool that can be called from an LLM during the conversation.\n\nThe tool can result in one of the following actions depending on the `type` field:\n- `action`:\n  A request to perform an action.\n- `endpoint`:\n  An HTTP API call to an external tool. Requires the `endpoint` field to be set too.\n- `context`:\n  Sets context variables based on the tool arguments, e.g. to change the session language. Only\n  `language` and `say` context vars are currently supported, but this will be made more generic.\n\nFor example, to change the current session language:\n```\n{\n  \"type\": \"context\",\n  \"tool\": {\n    \"function\": {\n      \"name\": \"set_language\",\n      \"parameters\": {\n        \"language\": {\n          \"type\": \"string\",\n          \"description\": \"The ISO 639 language code to set for the session e.g. 'en-US'.\"\n        },\n        \"message\": {\n          \"type\": \"string\",\n          \"description\": \"Inform the caller we're now speaking in the new language.\"\n        }\n      }\n    }\n  }\n}\n```\n\nIf `defaults` is provided, it will be used as the default values for the parameters of the\ntool call, if the LLM doesn't provide them:\n```\n\"defaults\": {\n  \"hospital\": \"Queens Hospital\"\n}\n```\n\nSome special \"transform\" handling is supported if the value is a dict with a single `transform`\nkey. The parameter value will be transformed by the given `action` before being used as the\ndefault value:\n\nRemoving an unwanted parameter:\n```\n\"defaults\": {\n  \"hospital\": {\n    \"transform\": {\n      \"action\": \"remove\"\n    }\n  }\n}\n```\n\nUsing a value from another parameter and converting it to a dictionary:\n```\n\"defaults\": {\n  \"tags.hospital\": \"{vars.hospital}\",\n  \"tags.foo\": \"{params.foo}\",\n  \"foo\": {\n    \"transform\": {\n      \"action\": \"remove\"\n    }\n  }\n}\n```\n\nAdd custom parameters from other parameters using Python's `format`:\n```\n\"defaults\": {\n  \"hello\": {\n    \"transform\": {\n      \"format\": \"Hello, {name}!\"\n    }\n  }\n}\n\nModify a value conditionally, e.g. change a `city` parameter with value \"Bronx\" to \"The Bronx\":\n```\n{\n  \"defaults\": {\n    \"city\": {\n      \"transform\": {\n        \"when\": {\"operator\": \"eq\", \"key\": \"city\", \"value\": \"Bronx\"},\n        \"action\": \"override\",\n        \"format\": \"The {city}\"\n      }\n    }\n  }\n}\n```\n\nSome common transform actions can be abbreviated using the `@` prefix to support a string syntax:\n```\n\"defaults\": {\n  \"foo\": \"@remove\",\n  \"name\": \"@override Hello, {name}!\"\n}\n```"
      },
      "ToolDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Fields"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "fields"
        ],
        "title": "ToolDetailResponse"
      },
      "ToolFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function/tool call."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool."
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "The JSON Schema of parameters of the function/tool call."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "parameters"
        ],
        "title": "ToolFunction",
        "description": "A function available to the tool.\n\nSee:\n- https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling"
      },
      "ToolHttpEndpoint": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The endpoint URL of the external service to call."
          },
          "method": {
            "$ref": "#/components/schemas/ToolHttpMethod",
            "description": "The HTTP method to use for the service call."
          },
          "argument_location": {
            "$ref": "#/components/schemas/ToolArgumentLocation",
            "description": "How to pass the arguments to the request."
          }
        },
        "type": "object",
        "required": [
          "url",
          "method",
          "argument_location"
        ],
        "title": "ToolHttpEndpoint",
        "description": "The configuration for an HTTP API call."
      },
      "ToolHttpMethod": {
        "type": "string",
        "enum": [
          "get",
          "post"
        ],
        "title": "ToolHttpMethod",
        "description": "The HTTP method to use for the request."
      },
      "ToolParameterDefault": {
        "properties": {
          "transform": {
            "$ref": "#/components/schemas/ToolParameterTransform",
            "description": "The transform to apply to the value before using it as the default."
          }
        },
        "type": "object",
        "required": [
          "transform"
        ],
        "title": "ToolParameterDefault",
        "description": "The default value for a parameter of the tool call."
      },
      "ToolParameterTransform": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "default",
              "override",
              "remove"
            ],
            "title": "Action",
            "description": "The action to perform on the value: `default` means only set the value (using the `format` field) if the parameter doesn't exist or is empty, `override` means always set the value, and `remove` means remove the parameter value.",
            "default": "default"
          },
          "when": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToolParameterTransformCondition"
              },
              {
                "type": "null"
              }
            ],
            "description": "Only apply the transform if the condition is met."
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "The default value to use for the parameter."
          },
          "format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Format",
            "description": "The string value to use for the parameter. The value will be evaluated with the Python `str.format` method, for example, `Hello, {name}!`"
          }
        },
        "type": "object",
        "title": "ToolParameterTransform",
        "description": "A transform to be applied to the value of a parameter.\n\nEither `value` or `format` must be set:\n- `value` is any arbitrary value: string, list or dictionary.\n- `format` is a string composed of other parameters or context variables."
      },
      "ToolParameterTransformCondition": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The name of the parameter to check."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value to check against the parameter."
          },
          "operator": {
            "anyOf": [
              {
                "type": "string",
                "const": "eq"
              },
              {
                "type": "null"
              }
            ],
            "title": "Operator",
            "description": "The operator to use for the comparison.",
            "default": "eq"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "ToolParameterTransformCondition",
        "description": "A condition to be met for a transform to be applied to the value of a parameter."
      },
      "ToolProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "service_name",
          "definition",
          "service_id"
        ],
        "title": "ToolProperties"
      },
      "ToolResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the tool"
          },
          "service_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Name",
            "description": "The name of the service to which the tool belongs"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id",
          "id"
        ],
        "title": "ToolResponse"
      },
      "ToolUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the tool"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id",
          "id"
        ],
        "title": "ToolUpdateRequest"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Syllable-API-Key"
      }
    }
  },
  "tags": [
    {
      "name": "agents",
      "description": "Operations related to agents"
    },
    {
      "name": "agents.test",
      "description": "Operations for testing agents with live text"
    },
    {
      "name": "channels",
      "description": "Operations related to channels"
    },
    {
      "name": "channels.targets",
      "description": "Operations related to channel targets"
    },
    {
      "name": "conversations",
      "description": "Operations related to conversations"
    },
    {
      "name": "custom_messages",
      "description": "Operations related to custom messages"
    },
    {
      "name": "dashboards",
      "description": "Operations related to dashboards"
    },
    {
      "name": "directory",
      "description": "Operations related to directory"
    },
    {
      "name": "events",
      "description": "Operations related to agent events"
    },
    {
      "name": "prompts",
      "description": "Operations related to prompts"
    },
    {
      "name": "services",
      "description": "Operations related to services"
    },
    {
      "name": "sessions",
      "description": "Operations related to agent sessions"
    },
    {
      "name": "sessions.labels",
      "description": "Operations related to labeling sessions"
    },
    {
      "name": "sessions.transcript",
      "description": "Operations related to session transcription"
    },
    {
      "name": "tools",
      "description": "Operations related to tools"
    }
  ],
  "x-speakeasy-name-override": [
    {
      "operationId": ".*_list$",
      "methodNameOverride": "list"
    },
    {
      "operationId": ".*_create$",
      "methodNameOverride": "create"
    },
    {
      "operationId": ".*_update$",
      "methodNameOverride": "update"
    },
    {
      "operationId": ".*_delete$",
      "methodNameOverride": "delete"
    },
    {
      "operationId": ".*_get_by_id$",
      "methodNameOverride": "get_by_id"
    },
    {
      "operationId": ".*_get_by_name$",
      "methodNameOverride": "get_by_name"
    }
  ]
}