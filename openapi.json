{
  "openapi": "3.1.0",
  "info": {
    "title": "SyllableSDK",
    "description": "\n# Syllable Platform SDK\n\nSyllable SDK gives you the power of awesome AI agentry. ðŸš€\n\n## Overview\n\nThe Syllable SDK provides a comprehensive set of tools and APIs to integrate powerful AI  \ncapabilities into your communication applications. Whether you're building chatbots, virtual\nassistants, or any other AI-driven solutions, Syllable SDK has got you covered.\n\n## Features\n\n- **Natural Language Processing (NLP)**: Understand and generate human language with ease.\n- **Machine Learning Models**: Leverage pre-trained models or train your own custom models.\n- **Speech Recognition**: Convert speech to text and vice versa.\n- **Data Analytics**: Analyze and visualize data to gain insights.\n- **Integration**: Seamlessly integrate with other services and platforms.\n\n",
    "version": "0.0.2"
  },
  "servers": [
    {
      "url": "https://api.syllable.ai",
      "description": "API server"
    },
    {
      "url": "https://trial.api.syllable.ai",
      "description": "Trial API server"
    }
  ],
  "paths": {
    "/api/v1/agents/": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Agent List",
        "description": "List the existing agents",
        "operationId": "agent_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AgentProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AgentProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_AgentResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Create Agent",
        "description": "Create a new agent",
        "operationId": "agent_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Update Agent",
        "description": "Update an existing agent",
        "operationId": "agent_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/{agent_id}": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Get Agent By Id",
        "description": "Get an agent by ID.",
        "operationId": "agent_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Agent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Delete Agent",
        "operationId": "agent_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Agent Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/voices/available": {
      "get": {
        "tags": [
          "agents",
          "V1"
        ],
        "summary": "Get Available Agent Voices",
        "description": "Get available agent voices.",
        "operationId": "agent_get_available_voices",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AgentVoice"
                  },
                  "type": "array",
                  "title": "Response Agent Get Available Voices"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/channels/": {
      "get": {
        "tags": [
          "channels",
          "V1"
        ],
        "summary": "Get Channels",
        "operationId": "channels_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChannelProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Channel_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/test/messages": {
      "post": {
        "tags": [
          "agents.test",
          "V1"
        ],
        "summary": "Send New Message",
        "description": "Send a new message",
        "operationId": "send_test_message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/conversations/": {
      "get": {
        "tags": [
          "conversations",
          "V1"
        ],
        "summary": "Conversations List",
        "operationId": "conversations_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConversationProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ConversationProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Conversation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data_sources/": {
      "get": {
        "tags": [
          "data_sources",
          "V1"
        ],
        "summary": "List Data Sources",
        "description": "Fetch metadata about all data sources, not including their text.",
        "operationId": "data_sources_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataSourceProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DataSourceProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_DataSourceMetadataResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "data_sources",
          "V1"
        ],
        "summary": "Create Data Source",
        "description": "Create a new data source.",
        "operationId": "data_sources_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "data_sources",
          "V1"
        ],
        "summary": "Update Data Source",
        "description": "Update an existing data source.",
        "operationId": "data_sources_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data_sources/{name}": {
      "get": {
        "tags": [
          "data_sources",
          "V1"
        ],
        "summary": "Get Data Source",
        "description": "Fetch a given data source, including its text.",
        "operationId": "data_sources_get_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data_sources",
          "V1"
        ],
        "summary": "Delete Data Source",
        "description": "Delete a given data source.",
        "operationId": "data_sources_delete_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/": {
      "get": {
        "tags": [
          "events",
          "V1"
        ],
        "summary": "Events List",
        "operationId": "events_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EventProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Event_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/custom_messages/": {
      "get": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Custom Messages List",
        "description": "List the existing custom_messages",
        "operationId": "custom_messages_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomMessageProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomMessageProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomMessageProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_CustomMessageResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Create Custom Message",
        "description": "Create a new custom message",
        "operationId": "custom_messages_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomMessageCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Update Custom Message",
        "description": "Update a custom message",
        "operationId": "custom_messages_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomMessageUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/custom_messages/{custom_message_id}": {
      "get": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Get Custom Message By Id",
        "description": "Get the custom message by its ID",
        "operationId": "custom_message_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "custom_message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Custom Message Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomMessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "custom_messages",
          "V1"
        ],
        "summary": "Delete Custom Message",
        "description": "Delete custom message by ID",
        "operationId": "custom_messages_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "custom_message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Custom Message Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Prompt List",
        "description": "List the existing prompts",
        "operationId": "prompts_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PromptProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_PromptResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Create Prompt",
        "description": "Create a new prompt",
        "operationId": "prompts_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Update Prompt",
        "description": "Update an existing prompt",
        "operationId": "prompts_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/{prompt_id}": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Get Prompt By Id",
        "description": "Get a prompt by ID",
        "operationId": "prompts_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Delete Prompt",
        "description": "Delete a prompt",
        "operationId": "prompts_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompts/{prompt_id}/history": {
      "get": {
        "tags": [
          "prompts",
          "V1"
        ],
        "summary": "Get Prompt History",
        "description": "Get a prompt by ID",
        "operationId": "prompts_history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptHistory"
                  },
                  "title": "Response Prompts History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/services/": {
      "get": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Service List",
        "description": "List the existing services",
        "operationId": "service_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ServiceProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ServiceResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Create Service",
        "description": "Create a new service.",
        "operationId": "service_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Update Service",
        "description": "Update an existing service.",
        "operationId": "service_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/services/{service_id}": {
      "get": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Get Service By Id",
        "description": "Get a service by its ID",
        "operationId": "services_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Service Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "services",
          "V1"
        ],
        "summary": "Delete Service",
        "description": "Delete a service. A service with linked tools cannot be deleted.",
        "operationId": "service_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Service Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session_labels/{session_label_id}": {
      "get": {
        "tags": [
          "session_labels",
          "V1"
        ],
        "summary": "Get Label By Id",
        "operationId": "session_label_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_label_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Session Label Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session_labels/": {
      "post": {
        "tags": [
          "session_labels",
          "V1"
        ],
        "summary": "Create Label",
        "description": "Create a new label",
        "operationId": "session_label_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLabelCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "session_labels",
          "V1"
        ],
        "summary": "Session Labels List",
        "operationId": "session_labels_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionLabelProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SessionLabelProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionLabelProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_SessionLabel_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Sessions List",
        "operationId": "sessions_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SessionProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_Session_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/transcript/{session_id}": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Get Session Transcript By Id",
        "operationId": "session_transcript_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/{session_id}": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Get A Single Session By Id",
        "operationId": "session_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/recording/{session_id}": {
      "post": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Generate Recording Urls",
        "operationId": "generate_session_recording_urls",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/recording/stream": {
      "get": {
        "tags": [
          "sessions",
          "V1"
        ],
        "summary": "Stream Recording",
        "operationId": "session_recording_stream",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/": {
      "get": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Tool List",
        "description": "List the existing tools",
        "operationId": "tool_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ToolProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ToolProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToolProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ToolResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Create Tool",
        "description": "Create a new tool",
        "operationId": "tool_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Update Tool",
        "description": "Update an existing tool",
        "operationId": "tool_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/{name}": {
      "get": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Tool Info",
        "description": "Get the details of a specific tool",
        "operationId": "tool_get_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tools",
          "V1"
        ],
        "summary": "Delete Tool",
        "description": "Delete a tool.",
        "operationId": "tool_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/available-targets": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Available Targets List",
        "description": "List the available phone numbers",
        "operationId": "available_targets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AvailableTargetProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AvailableTargetProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableTargetProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_AvailableTarget_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/targets": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Get Channel Targets",
        "operationId": "channel_targets_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelTargetProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChannelTargetProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelTargetProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ChannelTargetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}/targets": {
      "post": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Assign A Channel Target",
        "operationId": "channel_targets_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelTargetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}/targets/{target_id}": {
      "get": {
        "tags": [
          "channels.targets",
          "V1",
          "channels.targets",
          "V1"
        ],
        "summary": "Get A Channel Target",
        "operationId": "channel_targets_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Target Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "channels.targets",
          "V1"
        ],
        "summary": "Edit Channel Target",
        "description": "Update channel target by ID",
        "operationId": "channel_targets_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Target Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelTargetUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/{channel_id}": {
      "delete": {
        "tags": [
          "channels.targets",
          "V1"
        ],
        "summary": "Delete Channel Target",
        "description": "Hard-delete a channel target by ID",
        "operationId": "channel_targets_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Channel Id"
            }
          },
          {
            "name": "target_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/directory_members/": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Directory Member List",
        "description": "List the existing directory_members",
        "operationId": "directory_member_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DirectoryMemberProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DirectoryMemberProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectoryMemberProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_DirectoryMember_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "post": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Create Directory Member",
        "description": "Create a new member in the directory",
        "operationId": "directory_member_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryMemberCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/directory_members/{member_id}": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Get Directory Member By Id",
        "description": "Get a DirectoryMember by ID.",
        "operationId": "directory_member_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "put": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Update Directory Member",
        "description": "Update a DirectoryMember.",
        "operationId": "directory_member_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryMember"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "delete": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Delete Directory Member",
        "description": "Delete a DirectoryMember.",
        "operationId": "directory_member_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Member Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/directory_members/upload/": {
      "put": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Bulk Load Directory Members",
        "description": "Update Directory Members in chunks of 100.",
        "operationId": "directory_member_bulk_load",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_directory_member_bulk_load"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/directory_members/download/": {
      "get": {
        "tags": [
          "directory",
          "V1"
        ],
        "summary": "Download Directory Members",
        "description": "Download the entire directory as a JSON file.",
        "operationId": "directory_member_download",
        "responses": {
          "200": {
            "description": "Directory downloaded successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/dashboards/session_events": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Events",
        "description": "METHOD: POST\nURL: /dashboard/session_events\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_events_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/session_summary": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Summary",
        "description": "METHOD: POST\nURL: /dashboard/session_summary\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_summary_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/session_transfers": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Session Transfers",
        "description": "METHOD: POST\nURL: /dashboard/session_transfers\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_session_transfers_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/dashboards/sessions": {
      "post": {
        "tags": [
          "dashboards",
          "V1"
        ],
        "summary": "Post Sessions",
        "description": "METHOD: POST\nURL: /dashboard/sessions\nARGUMENTS: None\nRETURNS: Dashboard info for embedding",
        "operationId": "post_sessions_dashboard",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/outbound/batches": {
      "get": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "List Outbound Communication Batches",
        "operationId": "outbound_batch_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BatchProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BatchProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunicationBatch"
                  },
                  "title": "Response Outbound Batch List"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "put": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Create Outbound Communication Batch",
        "operationId": "outbound_batch_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationBatchInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/CommunicationBatch"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Outbound Batch Create"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/batches/{batch_id}": {
      "get": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Get Outbound Communication Batch",
        "operationId": "outbound_batch_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationBatch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "delete": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Delete Outbound Communication Batch",
        "operationId": "outbound_batch_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_outbound_batch_delete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/batches/{batch_id}/upload_batch": {
      "post": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Upload Outbound Communication Batch",
        "operationId": "outbound_batch_upload",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_outbound_batch_upload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/batches/{batch_id}/results": {
      "get": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Fetch Outbound Communication Batch Results",
        "operationId": "outbound_batch_results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunicationRequestResult"
                  },
                  "title": "Response Outbound Batch Results"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/batches/{batch_id}/requests": {
      "post": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Create Outbound Communication Request",
        "operationId": "outbound_batch_add",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/batches/{batch_id}/remove-requests": {
      "post": {
        "tags": [
          "outbound.batches",
          "V1"
        ],
        "summary": "Delete Requests By List Of Reference Ids",
        "operationId": "outbound_batch_remove",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Reference Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/campaigns": {
      "get": {
        "tags": [
          "outbound.campaigns",
          "V1"
        ],
        "summary": "List Outbound Communication Campaigns",
        "operationId": "outbound_campaign_list",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25,
              "title": "Limit"
            }
          },
          {
            "name": "search_fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignProperties"
              },
              "default": [],
              "title": "Search Fields"
            }
          },
          {
            "name": "search_field_values",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Search Field Values"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CampaignProperties"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By"
            }
          },
          {
            "name": "order_by_direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderByDirection"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By Direction"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignProperties"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "default": [],
              "title": "Fields"
            }
          },
          {
            "name": "start_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Datetime"
            }
          },
          {
            "name": "end_datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Datetime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OutboundCampaign"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Outbound Campaign List"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "post": {
        "tags": [
          "outbound.campaigns",
          "V1"
        ],
        "summary": "Create Outbound Communication Campaign",
        "operationId": "outbound_campaign_create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutboundCampaignInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OutboundCampaign"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Outbound Campaign Create"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    },
    "/api/v1/outbound/campaigns/{campaign_id}": {
      "get": {
        "tags": [
          "outbound.campaigns",
          "V1"
        ],
        "summary": "Get Outbound Communication Campaign",
        "operationId": "outbound_campaign_get_by_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      },
      "put": {
        "tags": [
          "outbound.campaigns",
          "V1"
        ],
        "summary": "Update Outbound Communication Campaign",
        "operationId": "outbound_campaign_update",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Campaign Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutboundCampaignInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-ignore": true
      }
    }
  },
  "components": {
    "schemas": {
      "ActionMode": {
        "type": "string",
        "enum": [
          "BATCH",
          "INTERACTIVE"
        ],
        "title": "ActionMode"
      },
      "AgentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-US"
              ]
            ]
          },
          "variables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Keys should be prefixed with \"vars.\"."
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          },
          "agent_initiated": {
            "type": "boolean",
            "title": "Agent Initiated",
            "description": "Whether the agent initiates conversation with a user after the custom_message is delivered",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers"
        ],
        "title": "AgentCreate"
      },
      "AgentProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "label",
          "name_description",
          "type",
          "timezone",
          "prompt_id",
          "prompt_id_list",
          "custom_message_id",
          "languages",
          "variables",
          "prompt_tool_defaults",
          "tool_headers",
          "updated_at",
          "last_updated_by"
        ],
        "title": "AgentProperties"
      },
      "AgentResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-US"
              ]
            ]
          },
          "variables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Keys should be prefixed with \"vars.\"."
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          },
          "agent_initiated": {
            "type": "boolean",
            "title": "Agent Initiated",
            "description": "Whether the agent initiates conversation with a user after the custom_message is delivered",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The agent ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of most recent update"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email of the user who last updated the agent"
          },
          "prompt": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "The prompt associated with the agent."
          },
          "custom_message": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomMessageResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "The custom message associated with the agent. Will be delivered as a greeting at the beginning of a conversation."
          },
          "channel_targets": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChannelTargetResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Targets",
            "description": "Channel targets associated with the agent"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers",
          "id",
          "updated_at",
          "last_updated_by"
        ],
        "title": "AgentResponse",
        "description": "When a user interacts with the Syllable system, they do so by communicating with an agent.\nAn agent is linked to a prompt, a custom message, and one or more channel targets to define its\nbehavior and capabilities."
      },
      "AgentToolDefaults": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool"
          },
          "default_values": {
            "items": {
              "$ref": "#/components/schemas/AgentToolFieldDefault"
            },
            "type": "array",
            "title": "Default Values",
            "description": "The default values for fields used in the tool"
          }
        },
        "type": "object",
        "required": [
          "tool_name",
          "default_values"
        ],
        "title": "AgentToolDefaults",
        "description": "An agent-level configuration of default values for tool parameters for its tools."
      },
      "AgentToolFieldDefault": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name",
            "description": "The name of the field"
          },
          "default_value": {
            "title": "Default Value",
            "description": "The default value for the field"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "default_value"
        ],
        "title": "AgentToolFieldDefault",
        "description": "An agent-level configuration of default values for tool parameters for a given tool."
      },
      "AgentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The agent name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The agent description"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The agent label"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The agent type. Can be an arbitrary string",
            "examples": [
              "ca_v1"
            ]
          },
          "prompt_id": {
            "type": "integer",
            "title": "Prompt Id",
            "description": "ID of the prompt associated with the agent"
          },
          "custom_message_id": {
            "type": "integer",
            "title": "Custom Message Id",
            "description": "ID of the custom message that should be delivered at the beginning of a conversation with the agent"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "The time zone in which the agent operates",
            "examples": [
              "America/New_York",
              "America/Chicago"
            ]
          },
          "prompt_tool_defaults": {
            "items": {
              "$ref": "#/components/schemas/AgentToolDefaults"
            },
            "type": "array",
            "title": "Prompt Tool Defaults",
            "description": "The prompt tool defaults"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Languages",
            "description": "BCP 47 codes of languages the agent supports",
            "examples": [
              [
                "en-US",
                "es-US"
              ]
            ]
          },
          "variables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Variables",
            "description": "Custom context variables for the conversation session. Keys should be prefixed with \"vars.\"."
          },
          "tool_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Headers",
            "description": "Optional headers to include in tool calls for agent."
          },
          "agent_initiated": {
            "type": "boolean",
            "title": "Agent Initiated",
            "description": "Whether the agent initiates conversation with a user after the custom_message is delivered",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The agent ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "prompt_id",
          "custom_message_id",
          "timezone",
          "variables",
          "tool_headers",
          "id"
        ],
        "title": "AgentUpdate"
      },
      "AgentVoice": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/SttProvider",
            "description": "The provider for the voice",
            "examples": [
              "OpenAI",
              "ElevenLabs",
              "Google"
            ]
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "The display name of the voice",
            "examples": [
              "Alloy"
            ]
          },
          "var_name": {
            "$ref": "#/components/schemas/AgentVoiceVarName",
            "description": "The variable name of the voice (used when procesing messages)",
            "examples": [
              "openai:alloy"
            ]
          }
        },
        "type": "object",
        "required": [
          "provider",
          "display_name",
          "var_name"
        ],
        "title": "AgentVoice",
        "description": "Voice option for an agent."
      },
      "AgentVoiceVarName": {
        "type": "string",
        "enum": [
          "openai:alloy",
          "openai:echo",
          "openai:fable",
          "openai:nova",
          "openai:onyx",
          "openai:shimmer",
          "elevenlabs:Alice",
          "elevenlabs:Bill",
          "elevenlabs:Brian",
          "elevenlabs:Callum",
          "elevenlabs:Charlie",
          "elevenlabs:Charlotte",
          "elevenlabs:Chris",
          "elevenlabs:Daniel",
          "elevenlabs:Eric",
          "elevenlabs:George",
          "elevenlabs:Jessica",
          "elevenlabs:Laura",
          "elevenlabs:Liam",
          "elevenlabs:Lily",
          "elevenlabs:Matilda",
          "elevenlabs:River",
          "elevenlabs:Roger",
          "elevenlabs:Sarah",
          "elevenlabs:Will",
          "wavenet:female/en-US-Neural2-F",
          "wavenet:male/en-US-Neural2-D",
          "wavenet:female/en-US-Studio-O"
        ],
        "title": "AgentVoiceVarName",
        "description": "The variable name of an agent voice (used when procesing messages)."
      },
      "AvailableTarget": {
        "properties": {
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id"
          },
          "channel_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Name"
          },
          "target": {
            "type": "string",
            "title": "Target"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "channel_id",
          "channel_name",
          "target"
        ],
        "title": "AvailableTarget"
      },
      "AvailableTargetProperties": {
        "type": "string",
        "enum": [
          "channel_id",
          "channel_name",
          "target"
        ],
        "title": "AvailableTargetProperties"
      },
      "BatchProperties": {
        "type": "string",
        "enum": [
          "batch_id",
          "campaign_id",
          "status",
          "type",
          "source",
          "rate",
          "expires_on",
          "retry_count",
          "retry_interval"
        ],
        "title": "BatchProperties"
      },
      "BatchStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "IDLE",
          "CANCELED",
          "COMPLETED"
        ],
        "title": "BatchStatus"
      },
      "Body_directory_member_bulk_load": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_directory_member_bulk_load"
      },
      "Body_outbound_batch_delete": {
        "properties": {
          "deleteReason": {
            "type": "string",
            "title": "Deletereason"
          }
        },
        "type": "object",
        "required": [
          "deleteReason"
        ],
        "title": "Body_outbound_batch_delete"
      },
      "Body_outbound_batch_upload": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_outbound_batch_upload"
      },
      "CampaignProperties": {
        "type": "string",
        "enum": [
          "id",
          "campaign_name",
          "campaign_variables",
          "status",
          "daily_start_time",
          "daily_end_time",
          "timezone",
          "mode"
        ],
        "title": "CampaignProperties"
      },
      "CampaignStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "PAUSED",
          "CANCELED"
        ],
        "title": "CampaignStatus"
      },
      "Channel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The channel name"
          },
          "channel_service": {
            "$ref": "#/components/schemas/ChannelServices",
            "description": "The service for the channel"
          },
          "supported_modes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Modes",
            "description": "The comma-delimited list of supported modes for the channel, which defines the       possible communication methods for channel targets linked to it.",
            "examples": [
              [
                "chat",
                "voice"
              ]
            ]
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The channel ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "channel_service",
          "id"
        ],
        "title": "Channel"
      },
      "ChannelProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "channel_service",
          "supported_modes"
        ],
        "title": "ChannelProperties"
      },
      "ChannelServices": {
        "type": "string",
        "enum": [
          "sip",
          "twilio",
          "email",
          "webchat"
        ],
        "title": "ChannelServices",
        "description": "The communication service for a channel."
      },
      "ChannelTargetCreateRequest": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode"
        ],
        "title": "ChannelTargetCreateRequest"
      },
      "ChannelTargetProperties": {
        "type": "string",
        "enum": [
          "id",
          "channel_id",
          "channel_name",
          "agent_id",
          "target",
          "target_mode",
          "fallback_target",
          "is_test",
          "updated_at"
        ],
        "title": "ChannelTargetProperties"
      },
      "ChannelTargetResponse": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the channel target"
          },
          "channel_name": {
            "type": "string",
            "title": "Channel Name",
            "description": "The name of the channel associated with the channel target"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of the most recent update to the channel target"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "Email of the user who last updated the channel target"
          },
          "agent": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "Definition of the agent for the channel target"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode",
          "id",
          "channel_name",
          "updated_at",
          "last_updated_by"
        ],
        "title": "ChannelTargetResponse",
        "description": "A channel target links a channel to an agent, allowing users to communicate with the agent\nthrough that channel."
      },
      "ChannelTargetUpdateRequest": {
        "properties": {
          "agent_id": {
            "type": "integer",
            "title": "Agent Id",
            "description": "The ID of the agent associated with the channel target"
          },
          "channel_id": {
            "type": "integer",
            "title": "Channel Id",
            "description": "The ID of the channel associated with the channel target"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "The name of the channel target (must correspond to an organization-level target)"
          },
          "target_mode": {
            "$ref": "#/components/schemas/TargetModes",
            "description": "The mode of the channel target (must match one of the supported modes of the associated channel)"
          },
          "fallback_target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Target",
            "description": "The fallback for the channel target (currently only supported for \"voice\" mode)"
          },
          "is_test": {
            "type": "boolean",
            "title": "Is Test",
            "description": "Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as test.",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the channel target"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "channel_id",
          "target",
          "target_mode",
          "id"
        ],
        "title": "ChannelTargetUpdateRequest"
      },
      "CommunicationBatch": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id",
            "description": "Unique ID for conversation batch"
          },
          "campaign_id": {
            "type": "integer",
            "title": "Campaign Id",
            "description": "Unique ID for campaign"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Call, SMS, email"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source phone number, email, or SMS number"
          },
          "rate": {
            "type": "integer",
            "title": "Rate",
            "description": "Target number of outreach calls per minute"
          },
          "expires_on": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires On",
            "description": "Timestamp of batch expiration"
          },
          "retry_count": {
            "type": "integer",
            "title": "Retry Count",
            "description": "Number of retries per target",
            "default": 0
          },
          "retry_interval": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retry Interval",
            "description": "How long (30m, 12h, 7d) to wait before retrying"
          },
          "status": {
            "$ref": "#/components/schemas/BatchStatus",
            "description": "Status of batch",
            "default": "PENDING"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Timestamp of batch creation"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At",
            "description": "Timestamp of batch deletion"
          },
          "deleted_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted Reason",
            "description": "Reason for batch deletion"
          },
          "last_worked_on": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Worked On",
            "description": "Timestamp of last batch activity"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "User who last updated campaign"
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "campaign_id",
          "type",
          "source",
          "rate",
          "last_updated_by"
        ],
        "title": "CommunicationBatch"
      },
      "CommunicationBatchInput": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id",
            "description": "Unique ID for conversation batch"
          },
          "campaign_id": {
            "type": "integer",
            "title": "Campaign Id",
            "description": "Unique ID for campaign"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Call, SMS, email"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source phone number, email, or SMS number"
          },
          "rate": {
            "type": "integer",
            "title": "Rate",
            "description": "Target number of outreach calls per minute"
          },
          "expires_on": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires On",
            "description": "Timestamp of batch expiration"
          },
          "retry_count": {
            "type": "integer",
            "title": "Retry Count",
            "description": "Number of retries per target",
            "default": 0
          },
          "retry_interval": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retry Interval",
            "description": "How long (30m, 12h, 7d) to wait before retrying"
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "campaign_id",
          "type",
          "source",
          "rate"
        ],
        "title": "CommunicationBatchInput"
      },
      "CommunicationRequest": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id",
            "description": "Unique ID for conversation batch"
          },
          "reference_id": {
            "type": "string",
            "title": "Reference Id",
            "description": "Unique ID for target call"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "Target phone number or email address"
          },
          "request_status": {
            "$ref": "#/components/schemas/RequestStatus",
            "description": "Status of request",
            "default": "PENDING"
          },
          "request_variables": {
            "type": "object",
            "title": "Request Variables",
            "description": "Variables for request"
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "reference_id",
          "target",
          "request_variables"
        ],
        "title": "CommunicationRequest"
      },
      "CommunicationRequestResult": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id",
            "description": "Unique ID for conversation batch"
          },
          "reference_id": {
            "type": "string",
            "title": "Reference Id",
            "description": "Unique ID for target call"
          },
          "target": {
            "type": "string",
            "title": "Target",
            "description": "Target phone number or email address"
          },
          "request_status": {
            "$ref": "#/components/schemas/RequestStatus",
            "description": "Status of request",
            "default": "PENDING"
          },
          "request_variables": {
            "type": "object",
            "title": "Request Variables",
            "description": "Variables for request"
          },
          "call_manager_sid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Call Manager Sid",
            "description": "Call manager SID"
          },
          "sent_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sent At",
            "description": "Timestamp of request sent"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Timestamp of request creation"
          },
          "attempt_count": {
            "type": "integer",
            "title": "Attempt Count",
            "description": "Number of attempts for request",
            "default": 0
          },
          "session_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Unique ID for call session"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id",
            "description": "Unique ID for conversation"
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "reference_id",
          "target",
          "request_variables"
        ],
        "title": "CommunicationRequestResult"
      },
      "Conversation": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the conversation"
          },
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id",
            "description": "ID of the conversation"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "ID of the agent with which the conversation occurred"
          },
          "agent_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Name",
            "description": "Name of the agent with which the conversation occurred"
          },
          "agent_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Type",
            "description": "Value of the \"type\" field of the agent with which the conversation occurred"
          },
          "prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Id",
            "description": "ID of the prompt used in the conversation"
          },
          "prompt_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Name",
            "description": "Name of the prompt used in the conversation"
          },
          "prompt_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Version",
            "description": "Version of the prompt used in the conversation"
          },
          "llm_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Provider",
            "description": "Provider for the LLM used in the conversation (see PromptResponse.llm_config.provider)"
          },
          "llm_model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Model",
            "description": "Model for the LLM used in the conversation (see PromptResponse.llm_config.model)"
          },
          "llm_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Version",
            "description": "Version for the LLM used in the conversation (see PromptResponse.llm_config.version)"
          },
          "is_legacy": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Legacy",
            "description": "Whether the conversation occurred on the legacy Syllable system"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "conversation_id"
        ],
        "title": "Conversation",
        "description": "A conversation is a record of messages between a user and an agent, and is composed of one or\nmore sessions."
      },
      "ConversationProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "agent_type",
          "agent_id",
          "agent_name",
          "prompt_id",
          "prompt_name",
          "llm_provider",
          "llm_model",
          "llm_version",
          "is_legacy"
        ],
        "title": "ConversationProperties"
      },
      "CustomMessageCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text"
        ],
        "title": "CustomMessageCreateRequest"
      },
      "CustomMessageProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "text",
          "label",
          "updated_at"
        ],
        "title": "CustomMessageProperties"
      },
      "CustomMessageResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the custom message"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of the most recent update to the custom message"
          },
          "agent_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Count",
            "description": "The number of agents using the custom message"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "The email address of the user who most recently updated the custom message",
            "examples": [
              "user@email.com"
            ]
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text",
          "id",
          "updated_at",
          "last_updated_by"
        ],
        "title": "CustomMessageResponse",
        "description": "A custom message is a pre-configured message delivered by an agent as a greeting at the\nbeginning of a conversation. Multiple agents can use the same custom mesasage. A custom message\nhas one or more rules defined, which allow for different messages to be dynamically selected and\ndelivered at runtime based on the current time and either date or day of the week."
      },
      "CustomMessageRule": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the rule"
          },
          "time_range_start": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Range Start",
            "description": "The start of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)",
            "examples": [
              "09:00"
            ]
          },
          "time_range_end": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([01]\\d|2[0-3]):[0-5]\\d$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Range End",
            "description": "The end of the time range for the rule in 24-hour format hh:mm (should be null for \"all day\" cases)",
            "examples": [
              "17:00"
            ]
          },
          "date": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "\\b(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date",
            "description": "The date for the rule in YYYY-MM-DD format",
            "examples": [
              "2025-01-01"
            ]
          },
          "days_of_week": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DayOfWeek"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Of Week",
            "description": "The days of the week for the rule",
            "examples": [
              [
                "mo",
                "tu",
                "we",
                "th",
                "fr"
              ]
            ]
          },
          "invert": {
            "type": "boolean",
            "title": "Invert",
            "description": "Whether the rule logic should be inverted (i.e. \"not\")"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Message text associated with the rule",
            "examples": [
              "Sorry, we're closed today"
            ]
          }
        },
        "type": "object",
        "required": [
          "description",
          "invert",
          "text"
        ],
        "title": "CustomMessageRule"
      },
      "CustomMessageUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the custom message"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the custom message"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label of the custom message"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "Rules for time-specific message variants",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the custom message"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "greeting"
          }
        },
        "type": "object",
        "required": [
          "name",
          "text",
          "id"
        ],
        "title": "CustomMessageUpdateRequest"
      },
      "Dashboard": {
        "properties": {
          "embedded_id": {
            "type": "string",
            "title": "Embedded Id",
            "description": "Superset embedded ID of the dashboard"
          },
          "guest_token": {
            "type": "string",
            "title": "Guest Token",
            "description": "Superset guest token of the dashboard"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the dashboard"
          },
          "superset_url": {
            "type": "string",
            "title": "Superset Url",
            "description": "Superset URL of the dashboard"
          }
        },
        "type": "object",
        "required": [
          "embedded_id",
          "guest_token",
          "name",
          "superset_url"
        ],
        "title": "Dashboard",
        "description": "Basic information about a dashboard."
      },
      "DataSourceCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The data source name. Must be unique within suborg."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the data source."
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels",
            "description": "Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.",
            "default": [],
            "examples": [
              [
                "Location Info"
              ]
            ]
          },
          "chunk": {
            "type": "boolean",
            "title": "Chunk",
            "description": "Whether the content should be split into smaller chunks. This can improve agent performance when searching a large data source but risks some relevant information being left off search results if chunk_delimiter is not set up properly."
          },
          "chunk_delimiter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Delimiter",
            "description": "String that should be treated as delimiter between intended chunks if chunk == True. This string will not be included in any chunks. If chunk == True and chunk_delimiter is None, the default chunking algorithm will be used. It is recommended that a delimiter be specified if chunking is enabled."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Information that the data source will provide to the agent accessing it."
          }
        },
        "type": "object",
        "required": [
          "name",
          "chunk",
          "text"
        ],
        "title": "DataSourceCreateRequest"
      },
      "DataSourceDetailResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The data source name. Must be unique within suborg."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the data source."
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels",
            "description": "Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.",
            "default": [],
            "examples": [
              [
                "Location Info"
              ]
            ]
          },
          "chunk": {
            "type": "boolean",
            "title": "Chunk",
            "description": "Whether the content should be split into smaller chunks. This can improve agent performance when searching a large data source but risks some relevant information being left off search results if chunk_delimiter is not set up properly."
          },
          "chunk_delimiter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Delimiter",
            "description": "String that should be treated as delimiter between intended chunks if chunk == True. This string will not be included in any chunks. If chunk == True and chunk_delimiter is None, the default chunking algorithm will be used. It is recommended that a delimiter be specified if chunking is enabled."
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the data source"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of most recent update"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email of the user who last updated the data source"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Information that the data source will provide to the agent accessing it."
          }
        },
        "type": "object",
        "required": [
          "name",
          "chunk",
          "updated_at",
          "last_updated_by",
          "text"
        ],
        "title": "DataSourceDetailResponse",
        "description": "Metadata about a data source, along with the text."
      },
      "DataSourceMetadataResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The data source name. Must be unique within suborg."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the data source."
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels",
            "description": "Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.",
            "default": [],
            "examples": [
              [
                "Location Info"
              ]
            ]
          },
          "chunk": {
            "type": "boolean",
            "title": "Chunk",
            "description": "Whether the content should be split into smaller chunks. This can improve agent performance when searching a large data source but risks some relevant information being left off search results if chunk_delimiter is not set up properly."
          },
          "chunk_delimiter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Delimiter",
            "description": "String that should be treated as delimiter between intended chunks if chunk == True. This string will not be included in any chunks. If chunk == True and chunk_delimiter is None, the default chunking algorithm will be used. It is recommended that a delimiter be specified if chunking is enabled."
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the data source"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of most recent update"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email of the user who last updated the data source"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chunk",
          "updated_at",
          "last_updated_by"
        ],
        "title": "DataSourceMetadataResponse",
        "description": "Metadata about a data source, not including the text."
      },
      "DataSourceProperties": {
        "type": "string",
        "enum": [
          "name",
          "description",
          "labels",
          "chunk",
          "chunk_delimiter",
          "updated_at",
          "last_updated_by"
        ],
        "title": "DataSourceProperties"
      },
      "DataSourceUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The data source name. Must be unique within suborg."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the data source."
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels",
            "description": "Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.",
            "default": [],
            "examples": [
              [
                "Location Info"
              ]
            ]
          },
          "chunk": {
            "type": "boolean",
            "title": "Chunk",
            "description": "Whether the content should be split into smaller chunks. This can improve agent performance when searching a large data source but risks some relevant information being left off search results if chunk_delimiter is not set up properly."
          },
          "chunk_delimiter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Delimiter",
            "description": "String that should be treated as delimiter between intended chunks if chunk == True. This string will not be included in any chunks. If chunk == True and chunk_delimiter is None, the default chunking algorithm will be used. It is recommended that a delimiter be specified if chunking is enabled."
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the data source"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Information that the data source will provide to the agent accessing it."
          }
        },
        "type": "object",
        "required": [
          "name",
          "chunk",
          "text"
        ],
        "title": "DataSourceUpdateRequest"
      },
      "DayOfWeek": {
        "type": "string",
        "enum": [
          "mo",
          "tu",
          "we",
          "th",
          "fr",
          "sa",
          "su"
        ],
        "title": "DayOfWeek"
      },
      "DirectoryExtension": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "numbers": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Numbers"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DirectoryExtension"
      },
      "DirectoryMember": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "extensions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DirectoryExtension"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extensions"
          },
          "contact_tags": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Tags"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "DirectoryMember"
      },
      "DirectoryMemberCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "extensions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DirectoryExtension"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extensions"
          },
          "contact_tags": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Tags"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "DirectoryMemberCreate"
      },
      "DirectoryMemberProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "type",
          "extensions",
          "contact_tags",
          "updated_at"
        ],
        "title": "DirectoryMemberProperties"
      },
      "Event": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp at which the event occurred"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "ID of the session in which the event occurred"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id",
            "description": "ID of the conversation associated with the session in which the event occurred"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source of the event (either a tool call or an LLM prompt)",
            "examples": [
              "tool-call"
            ]
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id",
            "description": "ID of the source of the event (either a tool ID or a prompt ID)"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Broad categorization of the event",
            "examples": [
              "automation"
            ]
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "More specific class of the event",
            "examples": [
              "phone-transfer"
            ]
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "ID of the user interacting with the system when the event occurred (e.g., their       phone number)",
            "examples": [
              "+18042221111"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Human-readable description of the event",
            "examples": [
              "Transfer to phone number +18042221111"
            ]
          },
          "attributes": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributes",
            "description": "Arbitrary additional metadata for the event"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "Event",
        "description": "An event represents a specific occurrence during a session."
      },
      "EventProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "conversation_id",
          "source",
          "source_id",
          "category",
          "type",
          "user_id",
          "description",
          "attributes"
        ],
        "title": "EventProperties"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InternalTool": {
        "properties": {
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type",
            "description": "Always `function`.",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/ToolFunction",
            "description": "The tool definition including the JSON Schema of its parameters."
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "InternalTool",
        "description": "A tool definition to be used by the OpenAI API."
      },
      "ListResponse_AgentResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AgentResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[AgentResponse]"
      },
      "ListResponse_AvailableTarget_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AvailableTarget"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[AvailableTarget]"
      },
      "ListResponse_ChannelTargetResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ChannelTargetResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[ChannelTargetResponse]"
      },
      "ListResponse_Channel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Channel]"
      },
      "ListResponse_Conversation_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Conversation"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Conversation]"
      },
      "ListResponse_CustomMessageResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CustomMessageResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[CustomMessageResponse]"
      },
      "ListResponse_DataSourceMetadataResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DataSourceMetadataResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[DataSourceMetadataResponse]"
      },
      "ListResponse_DirectoryMember_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DirectoryMember"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[DirectoryMember]"
      },
      "ListResponse_Event_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Event]"
      },
      "ListResponse_PromptResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PromptResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[PromptResponse]"
      },
      "ListResponse_ServiceResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ServiceResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[ServiceResponse]"
      },
      "ListResponse_SessionLabel_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SessionLabel"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[SessionLabel]"
      },
      "ListResponse_Session_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Session"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[Session]"
      },
      "ListResponse_ToolResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Pages"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size"
        ],
        "title": "ListResponse[ToolResponse]"
      },
      "OrderByDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "OrderByDirection"
      },
      "OutboundCampaign": {
        "properties": {
          "campaign_name": {
            "type": "string",
            "title": "Campaign Name",
            "description": "Human readable name of campaign"
          },
          "campaign_variables": {
            "type": "object",
            "title": "Campaign Variables",
            "description": "Variables for campaign"
          },
          "status": {
            "$ref": "#/components/schemas/CampaignStatus",
            "description": "Status of campaign",
            "default": "PENDING"
          },
          "daily_start_time": {
            "type": "string",
            "title": "Daily Start Time",
            "description": "Start time of campaign"
          },
          "daily_end_time": {
            "type": "string",
            "title": "Daily End Time",
            "description": "End time of campaign"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "Timezone of campaign"
          },
          "mode": {
            "$ref": "#/components/schemas/ActionMode",
            "description": "Batch or Interactive",
            "default": "BATCH"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique ID for campaign"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Timestamp of campaign creation"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Timestamp of campaign update"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "User who last updated campaign"
          }
        },
        "type": "object",
        "required": [
          "campaign_name",
          "campaign_variables",
          "daily_start_time",
          "daily_end_time",
          "timezone",
          "id",
          "last_updated_by"
        ],
        "title": "OutboundCampaign"
      },
      "OutboundCampaignInput": {
        "properties": {
          "campaign_name": {
            "type": "string",
            "title": "Campaign Name",
            "description": "Human readable name of campaign"
          },
          "campaign_variables": {
            "type": "object",
            "title": "Campaign Variables",
            "description": "Variables for campaign"
          },
          "status": {
            "$ref": "#/components/schemas/CampaignStatus",
            "description": "Status of campaign",
            "default": "PENDING"
          },
          "daily_start_time": {
            "type": "string",
            "title": "Daily Start Time",
            "description": "Start time of campaign"
          },
          "daily_end_time": {
            "type": "string",
            "title": "Daily End Time",
            "description": "End time of campaign"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "Timezone of campaign"
          },
          "mode": {
            "$ref": "#/components/schemas/ActionMode",
            "description": "Batch or Interactive",
            "default": "BATCH"
          }
        },
        "type": "object",
        "required": [
          "campaign_name",
          "campaign_variables",
          "daily_start_time",
          "daily_end_time",
          "timezone"
        ],
        "title": "OutboundCampaignInput"
      },
      "PromptCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config"
        ],
        "title": "PromptCreateRequest"
      },
      "PromptHistory": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the change"
          },
          "prompt_id": {
            "type": "string",
            "title": "Prompt Id",
            "description": "ID of the prompt"
          },
          "prompt_text": {
            "type": "string",
            "title": "Prompt Text",
            "description": "Text of the prompt"
          },
          "prompt_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Description",
            "description": "Description of the prompt"
          },
          "prompt_name": {
            "type": "string",
            "title": "Prompt Name",
            "description": "Name of the prompt"
          },
          "llm_config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Config",
            "description": "String representation of LLM config for the prompt"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Comments describing the change"
          },
          "user_email": {
            "type": "string",
            "title": "User Email",
            "description": "Email address of the user who made the change"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "prompt_id",
          "prompt_text",
          "prompt_name",
          "user_email"
        ],
        "title": "PromptHistory",
        "description": "Record of a change to a prompt. Values reflect post-change state."
      },
      "PromptLlmConfig": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/PromptLlmProvider",
            "description": "Provider of the LLM model.",
            "default": "azure_openai",
            "examples": [
              "azure_openai",
              "openai"
            ]
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Name of the model. Must match the deployment name in Azure AI Studio.",
            "default": "gpt-4o",
            "examples": [
              "gpt-4o"
            ]
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Optional model version.",
            "examples": [
              "2024-05-13"
            ]
          },
          "api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Version",
            "description": "Version of the API. (Currently only used for Azure OpenAI.)",
            "examples": [
              "2024-06-01"
            ]
          }
        },
        "type": "object",
        "title": "PromptLlmConfig"
      },
      "PromptLlmProvider": {
        "type": "string",
        "enum": [
          "azure_openai",
          "openai"
        ],
        "title": "PromptLlmProvider",
        "description": "LLM API provider."
      },
      "PromptProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "name_description",
          "context",
          "tools",
          "llm_config",
          "last_updated",
          "last_updated_by",
          "agent_count"
        ],
        "title": "PromptProperties"
      },
      "PromptResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of the tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The prompt ID"
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the prompt"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated",
            "description": "The last updated date of the prompt"
          },
          "last_updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By",
            "description": "Email address of the user who most recently updated the prompt",
            "examples": [
              "user@email.com"
            ]
          },
          "agent_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Count",
            "description": "The number of agents using the prompt"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config",
          "id",
          "last_updated"
        ],
        "title": "PromptResponse",
        "description": "A prompt defines the behavior of an agent by delivering instructions to the LLM about how the\nagent should behave. A prompt can be linked to one or more agents. A prompt can also be linked to\ntools to allow an agent using it to use those tools."
      },
      "PromptUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The prompt name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the prompt"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the prompt"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "The prompt text"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of tools to which the prompt has access",
            "default": []
          },
          "llm_config": {
            "$ref": "#/components/schemas/PromptLlmConfig",
            "description": "The configuration for the LLM that the prompt uses"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The prompt ID"
          },
          "edit_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Edit Comments",
            "description": "The comments for the most recent edit to the prompt"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "llm_config",
          "id"
        ],
        "title": "PromptUpdateRequest"
      },
      "RequestStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "QUEUEING",
          "INITIATED",
          "CONNECTED",
          "FAILED",
          "CANCELED"
        ],
        "title": "RequestStatus"
      },
      "ServiceCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ServiceCreateRequest"
      },
      "ServiceProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "updated_at",
          "last_updated_by"
        ],
        "title": "ServiceProperties"
      },
      "ServiceResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the service"
          },
          "last_updated_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated Comments",
            "description": "Update comments"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp of the most recent update to the service"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "The email of the user who last updated the service"
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "Names of tools that belong to the service"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "last_updated",
          "last_updated_by",
          "tools"
        ],
        "title": "ServiceResponse",
        "description": "A service is a collection of tools."
      },
      "ServiceUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the service"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the service"
          },
          "last_updated_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated Comments",
            "description": "Update comments"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id"
        ],
        "title": "ServiceUpdateRequest"
      },
      "Session": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the session"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Internal ID of the session, generated based on interaction details"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id",
            "description": "ID of the conversation of which the session is a part"
          },
          "channel_manager_service": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Service",
            "description": "Name of the service used to facilitate the session",
            "examples": [
              "hedy",
              "console"
            ]
          },
          "channel_manager_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Type",
            "description": "Type of the service used to facilitate the session",
            "examples": [
              "voice_sip_v1",
              "voice_twilio_v1",
              "web_chat_v1"
            ]
          },
          "channel_manager_sid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Manager Sid",
            "description": "Channel-manager-side ID of the session (different from session_id)"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "ID of the agent with which the session occurred"
          },
          "agent_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Name",
            "description": "Name of the agent with which the session occurred"
          },
          "agent_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Type",
            "description": "Type of the agent with which the session occurred"
          },
          "agent_timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Timezone",
            "description": "Timezone of the agent with which the session occurred"
          },
          "prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Id",
            "description": "ID of the prompt used by the agent with which the session occurred"
          },
          "prompt_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Name",
            "description": "Name of the prompt used by the agent with which the session occurred"
          },
          "prompt_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Version",
            "description": "Version of the prompt used by the agent with which the session occurred"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration",
            "description": "Duration of the session in seconds"
          },
          "session_label_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Label Id",
            "description": "ID of the label (listing the quality of the session and any issues that occurred) associated with the session"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source of the session (e.g., for an inbound session, the user's phone number/username/email)",
            "examples": [
              "+18042221111",
              "user@email.com"
            ]
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target",
            "description": "The name of the channel target associated with the agent at the time of the session (see ChannelTargetResponse.target)"
          },
          "is_legacy": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Legacy",
            "description": "Whether the session occurred on the legacy Syllable system"
          },
          "is_test": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Test",
            "description": "Whether the session is a test session"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "Session",
        "description": "A session is a building block of a conversation."
      },
      "SessionAction": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the tool invocation"
          },
          "tool_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Name",
            "description": "Name of the tool that was invoked"
          },
          "tool_request": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Request",
            "description": "Request sent to the tool API, if applicable"
          },
          "tool_result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Result",
            "description": "Response received from the tool API, if applicable"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "SessionAction",
        "description": "Information about a given tool invocation as part of a session."
      },
      "SessionLabel": {
        "properties": {
          "session_id": {
            "type": "integer",
            "title": "Session Id",
            "description": "The internal ID of the session (see Session.session_id)"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the label",
            "examples": [
              "auto-rating",
              "human-rating"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "A code describing the quality of the labeled session",
            "examples": [
              "GOOD",
              "OK",
              "BAD",
              "N/A"
            ]
          },
          "user_email": {
            "type": "string",
            "title": "User Email",
            "description": "The email of the user who created the label"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Comment string describing additional details about the session"
          },
          "issue_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Categories",
            "description": "Descriptions of issues occurring in the labeled call",
            "default": [],
            "examples": [
              [
                "Silent treatment"
              ],
              [
                "Speech transcription (STT)"
              ]
            ]
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The internal ID of the label"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp",
            "description": "The timestamp of the label creation"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "type",
          "code",
          "user_email",
          "id",
          "timestamp"
        ],
        "title": "SessionLabel",
        "description": "A session label is associated with a given session and contains an evaluation of quality and\ndescriptions of issues the user encountered in that session or other details."
      },
      "SessionLabelCreate": {
        "properties": {
          "session_id": {
            "type": "integer",
            "title": "Session Id",
            "description": "The internal ID of the session (see Session.session_id)"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the label",
            "examples": [
              "auto-rating",
              "human-rating"
            ]
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "A code describing the quality of the labeled session",
            "examples": [
              "GOOD",
              "OK",
              "BAD",
              "N/A"
            ]
          },
          "user_email": {
            "type": "string",
            "title": "User Email",
            "description": "The email of the user who created the label"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments",
            "description": "Comment string describing additional details about the session"
          },
          "issue_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue Categories",
            "description": "Descriptions of issues occurring in the labeled call",
            "default": [],
            "examples": [
              [
                "Silent treatment"
              ],
              [
                "Speech transcription (STT)"
              ]
            ]
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "type",
          "code",
          "user_email"
        ],
        "title": "SessionLabelCreate"
      },
      "SessionLabelProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "type",
          "code",
          "user_email",
          "issue_categories",
          "session_id_list"
        ],
        "title": "SessionLabelProperties"
      },
      "SessionProperties": {
        "type": "string",
        "enum": [
          "timestamp",
          "session_id",
          "conversation_id",
          "channel_manager_service",
          "channel_manager_type",
          "channel_manager_sid",
          "agent_type",
          "agent_id",
          "agent_name",
          "prompt_id",
          "prompt_name",
          "source",
          "target",
          "duration",
          "is_legacy",
          "is_test"
        ],
        "title": "SessionProperties"
      },
      "SessionRecordingResponse": {
        "properties": {
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "The internal ID of the session"
          },
          "recordings": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recordings",
            "description": "List of recording URLs"
          },
          "expiration": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration",
            "description": "Expiration timestamp of the URLs"
          }
        },
        "type": "object",
        "title": "SessionRecordingResponse",
        "description": "Recording URLs for a given session."
      },
      "SessionText": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the message"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang",
            "description": "ISO 639 code of the language used for the message (may appear as \"unset\" if was not conclusively determined)",
            "examples": [
              "en-US",
              "es-US",
              "unset"
            ]
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Whether the user or agent sent the message",
            "examples": [
              "user",
              "agent"
            ]
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "Content of the message"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "SessionText",
        "description": "Information about a given message from a user to an agent or vice-versa."
      },
      "SessionTranscriptionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Internal ID of the session"
          },
          "transcription": {
            "items": {
              "$ref": "#/components/schemas/SessionText"
            },
            "type": "array",
            "title": "Transcription",
            "description": "Transcriptions of all messages in the session"
          },
          "actions": {
            "items": {
              "$ref": "#/components/schemas/SessionAction"
            },
            "type": "array",
            "title": "Actions",
            "description": "Tool invocations that occurred during the session"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "transcription",
          "actions"
        ],
        "title": "SessionTranscriptionResponse",
        "description": "Text transcript of a given session."
      },
      "SttProvider": {
        "type": "string",
        "enum": [
          "OpenAI",
          "ElevenLabs",
          "Google"
        ],
        "title": "SttProvider",
        "description": "Provider for an agent voice."
      },
      "TargetModes": {
        "type": "string",
        "enum": [
          "voice",
          "chat",
          "sms",
          "email"
        ],
        "title": "TargetModes",
        "description": "Available modes (communication methods) for channel targets."
      },
      "TestMessage": {
        "properties": {
          "service_name": {
            "type": "string",
            "title": "Service Name",
            "description": "Name of the service producing the message"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Name of the source of the message, should identify the user, like an email or username"
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "The text of the message"
          },
          "test_id": {
            "type": "string",
            "title": "Test Id",
            "description": "Channel-manager-side ID of the session (see Session.channel_manager_sid)"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent with which the chat is taking place"
          },
          "org_name": {
            "type": "string",
            "title": "Org Name",
            "description": "Name of the organization associated with the agent"
          },
          "override_timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Override Timestamp",
            "description": "Override for the timestamp of the message"
          },
          "session_start": {
            "type": "boolean",
            "title": "Session Start",
            "description": "Whether this message is the start of a new session",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "service_name",
          "source",
          "test_id",
          "agent_id",
          "org_name"
        ],
        "title": "TestMessage",
        "description": "Message sent in a test chat with an agent."
      },
      "TestMessageResponse": {
        "properties": {
          "test_id": {
            "type": "string",
            "title": "Test Id",
            "description": "Channel-manager-side ID of the session (see Session.channel_manager_sid)"
          },
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent with which the chat is taking place"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the message that elicited the response"
          },
          "response": {
            "type": "object",
            "title": "Response"
          },
          "response_text": {
            "type": "string",
            "title": "Response Text",
            "description": "The text of the response"
          }
        },
        "type": "object",
        "required": [
          "test_id",
          "agent_id"
        ],
        "title": "TestMessageResponse",
        "description": "Response from an agent in a test chat."
      },
      "ToolArgumentLocation": {
        "type": "string",
        "enum": [
          "body",
          "form",
          "path",
          "query"
        ],
        "title": "ToolArgumentLocation",
        "description": "The location of the argument in a tool HTTP request.\n'body' is used for JSON data in the POST request body.\n'form' is used for form data in the POST request body.\n'path' is used for URL path parameters.\n'query' is used for query parameters in the URL."
      },
      "ToolCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id"
        ],
        "title": "ToolCreateRequest"
      },
      "ToolDefinition": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "action",
                  "endpoint",
                  "context",
                  "log"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "The action to take when the LLM calls the tool."
          },
          "tool": {
            "$ref": "#/components/schemas/InternalTool",
            "description": "The tool definition to be used by the OpenAI API."
          },
          "endpoint": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToolHttpEndpoint"
              },
              {
                "type": "null"
              }
            ],
            "description": "The configuration for an HTTP API call."
          },
          "defaults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/ToolParameterDefault"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Defaults",
            "description": "The default values for the parameters of the function/tool call."
          },
          "result": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result",
            "description": "The optional result of the tool call. Only used for `context` tools."
          }
        },
        "type": "object",
        "required": [
          "tool"
        ],
        "title": "ToolDefinition",
        "description": "A tool that can be called from an LLM during the conversation."
      },
      "ToolDetailResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the tool"
          },
          "last_updated_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated Comments",
            "description": "Update comments"
          },
          "service_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Name",
            "description": "The name of the service to which the tool belongs"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp of the most recent update to the service"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "The email of the user who last updated the tool"
          },
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Fields",
            "description": "Fields that the tool accepts as input"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id",
          "id",
          "last_updated",
          "last_updated_by",
          "fields"
        ],
        "title": "ToolDetailResponse",
        "description": "A tool is a function that an agent can call to perform actions like accessing databases,\nmaking API calls, or processing data. For an agent to have access to a tool, the prompt\nassociated with that agent should be linked to the tool and include instructions to use it."
      },
      "ToolFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function/tool call."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool."
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "The JSON Schema of parameters of the function/tool call."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "parameters"
        ],
        "title": "ToolFunction",
        "description": "A function available to an agent.\n\nSee:\n- https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling"
      },
      "ToolHttpEndpoint": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The endpoint URL of the external service to call."
          },
          "method": {
            "$ref": "#/components/schemas/ToolHttpMethod",
            "description": "The HTTP method to use for the service call."
          },
          "argument_location": {
            "$ref": "#/components/schemas/ToolArgumentLocation",
            "description": "How to pass the arguments to the request."
          }
        },
        "type": "object",
        "required": [
          "url",
          "method",
          "argument_location"
        ],
        "title": "ToolHttpEndpoint",
        "description": "The configuration for an HTTP API call by a tool."
      },
      "ToolHttpMethod": {
        "type": "string",
        "enum": [
          "get",
          "post"
        ],
        "title": "ToolHttpMethod",
        "description": "The HTTP method to use for a tool HTTP request."
      },
      "ToolParameterDefault": {
        "properties": {
          "transform": {
            "$ref": "#/components/schemas/ToolParameterTransform",
            "description": "The transform to apply to the value before using it as the default."
          }
        },
        "type": "object",
        "required": [
          "transform"
        ],
        "title": "ToolParameterDefault",
        "description": "The default value for a parameter of a tool call."
      },
      "ToolParameterTransform": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "default",
              "override",
              "remove"
            ],
            "title": "Action",
            "description": "The action to perform on the tool parameter value: `default` means only set the value (using the `format` field) if the parameter doesn't exist or is empty, `override` means always set the value, and `remove` means remove the parameter value.",
            "default": "default"
          },
          "when": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToolParameterTransformCondition"
              },
              {
                "type": "null"
              }
            ],
            "description": "Only apply the transform if the condition is met."
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "The default value to use for the parameter."
          },
          "format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Format",
            "description": "The string value to use for the parameter. The value will be evaluated with the Python `str.format` method, for example, `Hello, {name}!`"
          }
        },
        "type": "object",
        "title": "ToolParameterTransform",
        "description": "A transform to be applied to the value of a tool parameter.\n\nEither `value` or `format` must be set:\n- `value` is any arbitrary value: string, list or dictionary.\n- `format` is a string composed of other parameters or context variables."
      },
      "ToolParameterTransformCondition": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The name of the parameter to check."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value to check against the parameter."
          },
          "operator": {
            "anyOf": [
              {
                "type": "string",
                "const": "eq"
              },
              {
                "type": "null"
              }
            ],
            "title": "Operator",
            "description": "The operator to use for the comparison.",
            "default": "eq"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "ToolParameterTransformCondition",
        "description": "A condition to be met for a transform to be applied to the value of a tool parameter."
      },
      "ToolProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "service_name",
          "definition",
          "service_id",
          "updated_at",
          "last_updated_by"
        ],
        "title": "ToolProperties"
      },
      "ToolResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the tool"
          },
          "last_updated_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated Comments",
            "description": "Update comments"
          },
          "service_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Name",
            "description": "The name of the service to which the tool belongs"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp of the most recent update to the service"
          },
          "last_updated_by": {
            "type": "string",
            "title": "Last Updated By",
            "description": "The email of the user who last updated the tool"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id",
          "id",
          "last_updated",
          "last_updated_by"
        ],
        "title": "ToolResponse",
        "description": "A tool is a function that an agent can call to perform actions like accessing databases,\nmaking API calls, or processing data. For an agent to have access to a tool, the prompt\nassociated with that agent should be linked to the tool and include instructions to use it."
      },
      "ToolUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "definition": {
            "$ref": "#/components/schemas/ToolDefinition",
            "description": "The definition of the tool"
          },
          "service_id": {
            "type": "integer",
            "title": "Service Id",
            "description": "The service this tool belongs to"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The ID of the tool"
          },
          "last_updated_comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated Comments",
            "description": "Update comments"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition",
          "service_id",
          "id"
        ],
        "title": "ToolUpdateRequest"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Syllable-API-Key"
      }
    }
  },
  "tags": [
    {
      "name": "agents",
      "description": "Operations related to agent configuration. When a user interacts with the           Syllable system, they do so by communicating with an agent.           An agent is linked to a prompt, a custom message, and one or more channel targets to           define its behavior and capabilities."
    },
    {
      "name": "agents.test",
      "description": "Operations for testing agents with live text.           These endpoints allow sending messages to an agent and receiving its responses."
    },
    {
      "name": "channels",
      "description": "Operations related to channel configuration.           A channel is an organization-level point of communication, like a phone number or a web           chat. A channel can be associated with an agent by creating a channel target linking           them."
    },
    {
      "name": "channels.targets",
      "description": "Operations related to channel target configuration. A channel target           links a channel to an agent, allowing users to communicate with the agent through that           channel."
    },
    {
      "name": "conversations",
      "description": "Operations related to conversations.           A conversation is a record of messages between a user and an agent, and is composed of           one or more sessions."
    },
    {
      "name": "custom_messages",
      "description": "Operations related to custom message configuration.           A custom message is a pre-configured message delivered by an agent as a greeting at the           beginning of a conversation. Multiple agents can use the same custom mesasage. A custom           message has one or more rules defined, which allow for different messages to be           dynamically selected and delivered at runtime based on the current time and either           date or day of the week."
    },
    {
      "name": "dashboards",
      "description": "Operations related to dashboards. Currently the API/SDK           only supports fetching basic information about dashboards."
    },
    {
      "name": "data_sources",
      "description": "Operations related to data sources. A data source is a blob of text that           can be made available to an agent's general info tools to provide more context to the           agent when generating its responses."
    },
    {
      "name": "directory",
      "description": "Operations related to directory"
    },
    {
      "name": "events",
      "description": "Operations related to events. An event represents a specific occurrence           during a session. Currently the API/SDK only supports fetching logged events."
    },
    {
      "name": "outbound.campaigns",
      "description": "Operations related to outbound message campaigns"
    },
    {
      "name": "outbound.batches",
      "description": "Operations related to outbound campaign batches"
    },
    {
      "name": "prompts",
      "description": "Operations related to prompts. A prompt defines the behavior of an           agent by delivering instructions to the LLM about how the agent should behave.           A prompt can be linked to one or more agents. A prompt can also be linked to tools to           allow an agent using the prompt to use them."
    },
    {
      "name": "services",
      "description": "Operations related to service configuration. A service is a collection of           tools."
    },
    {
      "name": "sessions",
      "description": "Operations related to sessions. A session is a building block of a           conversation."
    },
    {
      "name": "session_labels",
      "description": "Operations related to labeling sessions with evaluations of quality and           descriptions of issues the user encountered or other details."
    },
    {
      "name": "tools",
      "description": "Operations related to tool configuration. A tool is a function that an           agent can call to perform actions like accessing databases, making API calls, or           processing data. For an agent to have access to a tool, the prompt associated with that           agent should be linked to the tool and include instructions to use it."
    }
  ],
  "x-speakeasy-name-override": [
    {
      "operationId": ".*_list$",
      "methodNameOverride": "list"
    },
    {
      "operationId": ".*_create$",
      "methodNameOverride": "create"
    },
    {
      "operationId": ".*_update$",
      "methodNameOverride": "update"
    },
    {
      "operationId": ".*_upload$",
      "methodNameOverride": "upload"
    },
    {
      "operationId": ".*_delete$",
      "methodNameOverride": "delete"
    },
    {
      "operationId": ".*_get_by_id$",
      "methodNameOverride": "get_by_id"
    },
    {
      "operationId": ".*_get_by_name$",
      "methodNameOverride": "get_by_name"
    }
  ]
}