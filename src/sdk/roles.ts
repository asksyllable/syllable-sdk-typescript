/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rolesCreate } from "../funcs/rolesCreate.js";
import { rolesDelete } from "../funcs/rolesDelete.js";
import { rolesGetById } from "../funcs/rolesGetById.js";
import { rolesList } from "../funcs/rolesList.js";
import { rolesUpdate } from "../funcs/rolesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Roles extends ClientSDK {
  /**
   * List Roles
   *
   * @remarks
   * List the existing roles.
   */
  async list(
    request: operations.RolesListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseRoleResponse> {
    return unwrapAsync(rolesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Role
   *
   * @remarks
   * Create a new role.
   */
  async create(
    request: components.RoleCreateRequest,
    options?: RequestOptions,
  ): Promise<components.RoleResponse> {
    return unwrapAsync(rolesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Role
   *
   * @remarks
   * Update an existing role.
   */
  async update(
    request: components.RoleUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.RoleResponse> {
    return unwrapAsync(rolesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Role
   *
   * @remarks
   * Fetch a given role.
   */
  async getById(
    request: operations.RolesGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.RoleResponse> {
    return unwrapAsync(rolesGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Role
   *
   * @remarks
   * Delete a role.
   */
  async delete(
    request: operations.RolesDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(rolesDelete(
      this,
      request,
      options,
    ));
  }
}
