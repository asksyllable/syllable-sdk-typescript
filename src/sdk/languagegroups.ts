/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { languageGroupsCreate } from "../funcs/languageGroupsCreate.js";
import { languageGroupsDelete } from "../funcs/languageGroupsDelete.js";
import { languageGroupsGetById } from "../funcs/languageGroupsGetById.js";
import { languageGroupsLanguageGroupsCreateVoiceSample } from "../funcs/languageGroupsLanguageGroupsCreateVoiceSample.js";
import { languageGroupsList } from "../funcs/languageGroupsList.js";
import { languageGroupsUpdate } from "../funcs/languageGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LanguageGroups extends ClientSDK {
  /**
   * List Language Groups
   *
   * @remarks
   * Fetch language groups.
   */
  async list(
    request: operations.LanguageGroupsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseLanguageGroupResponse> {
    return unwrapAsync(languageGroupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Language Group
   *
   * @remarks
   * Create a new language group.
   */
  async create(
    request: components.LanguageGroupCreateRequest,
    options?: RequestOptions,
  ): Promise<components.LanguageGroupResponse> {
    return unwrapAsync(languageGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Language Group
   *
   * @remarks
   * Update an existing language group
   */
  async update(
    request: components.LanguageGroupUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.LanguageGroupResponse> {
    return unwrapAsync(languageGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Language Group
   *
   * @remarks
   * Fetch a given language group.
   */
  async getById(
    request: operations.LanguageGroupsGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.LanguageGroupResponse> {
    return unwrapAsync(languageGroupsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Language Group
   *
   * @remarks
   * Delete a language group.
   */
  async delete(
    request: operations.LanguageGroupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(languageGroupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Voice Sample
   *
   * @remarks
   * Generate voice sample.
   */
  async languageGroupsCreateVoiceSample(
    request: components.VoiceSampleCreateRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(languageGroupsLanguageGroupsCreateVoiceSample(
      this,
      request,
      options,
    ));
  }
}
