/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsDelete } from "../funcs/organizationsDelete.js";
import { organizationsOrganizationsGet } from "../funcs/organizationsOrganizationsGet.js";
import { organizationsUpdate } from "../funcs/organizationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organizations extends ClientSDK {
  /**
   * Get Current Organization
   *
   * @remarks
   * Fetch the current organization.
   */
  async organizationsGet(
    options?: RequestOptions,
  ): Promise<components.OrganizationResponse> {
    return unwrapAsync(organizationsOrganizationsGet(
      this,
      options,
    ));
  }

  /**
   * Update Current Organization
   *
   * @remarks
   * Update the current organization.
   */
  async update(
    request: components.BodyOrganizationsUpdate,
    options?: RequestOptions,
  ): Promise<components.OrganizationResponse> {
    return unwrapAsync(organizationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Organization
   *
   * @remarks
   * Create a new organization.
   */
  async create(
    request: components.BodyOrganizationsCreate,
    options?: RequestOptions,
  ): Promise<components.OrganizationResponse> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Current Organization
   *
   * @remarks
   * Delete the current organization and all its users.
   */
  async delete(
    request?: components.BodyOrganizationsDelete | undefined,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(organizationsDelete(
      this,
      request,
      options,
    ));
  }
}
