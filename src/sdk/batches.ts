/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { outboundBatchesAdd } from "../funcs/outboundBatchesAdd.js";
import { outboundBatchesCreate } from "../funcs/outboundBatchesCreate.js";
import { outboundBatchesDelete } from "../funcs/outboundBatchesDelete.js";
import { outboundBatchesGetById } from "../funcs/outboundBatchesGetById.js";
import { outboundBatchesList } from "../funcs/outboundBatchesList.js";
import { outboundBatchesRemove } from "../funcs/outboundBatchesRemove.js";
import { outboundBatchesResults } from "../funcs/outboundBatchesResults.js";
import { outboundBatchesUpdate } from "../funcs/outboundBatchesUpdate.js";
import { outboundBatchesUpload } from "../funcs/outboundBatchesUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Batches extends ClientSDK {
  /**
   * List Outbound Communication Batches
   */
  async list(
    request: operations.OutboundBatchListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseCommunicationBatch> {
    return unwrapAsync(outboundBatchesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Outbound Communication Batch
   */
  async create(
    request: components.CommunicationBatchInput,
    options?: RequestOptions,
  ): Promise<components.CommunicationBatch> {
    return unwrapAsync(outboundBatchesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Outbound Communication Batch
   */
  async getById(
    request: operations.OutboundBatchGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.BatchDetails> {
    return unwrapAsync(outboundBatchesGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Outbound Communication Batch
   */
  async update(
    request: operations.OutboundBatchUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.CommunicationBatch> {
    return unwrapAsync(outboundBatchesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Outbound Communication Batch
   */
  async delete(
    request: operations.OutboundBatchDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(outboundBatchesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload Outbound Communication Batch
   */
  async upload(
    request: operations.OutboundBatchUploadRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(outboundBatchesUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Fetch Outbound Communication Batch Results
   */
  async results(
    request: operations.OutboundBatchResultsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.CommunicationRequestResult>> {
    return unwrapAsync(outboundBatchesResults(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Outbound Communication Request
   */
  async add(
    request: operations.OutboundBatchAddRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(outboundBatchesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Requests By List Of Reference Ids
   */
  async remove(
    request: operations.OutboundBatchRemoveRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(outboundBatchesRemove(
      this,
      request,
      options,
    ));
  }
}
