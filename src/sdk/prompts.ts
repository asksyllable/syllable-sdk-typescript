/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { promptsCreate } from "../funcs/promptsCreate.js";
import { promptsDelete } from "../funcs/promptsDelete.js";
import { promptsGetById } from "../funcs/promptsGetById.js";
import { promptsList } from "../funcs/promptsList.js";
import { promptsPromptGetSupportedLlms } from "../funcs/promptsPromptGetSupportedLlms.js";
import { promptsPromptsHistory } from "../funcs/promptsPromptsHistory.js";
import { promptsUpdate } from "../funcs/promptsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Prompts extends ClientSDK {
  /**
   * Prompt List
   *
   * @remarks
   * List the existing prompts
   */
  async list(
    request: operations.PromptsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponsePromptResponse> {
    return unwrapAsync(promptsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Prompt
   *
   * @remarks
   * Create a new prompt
   */
  async create(
    request: components.PromptCreateRequest,
    options?: RequestOptions,
  ): Promise<components.PromptResponse> {
    return unwrapAsync(promptsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Prompt
   *
   * @remarks
   * Update an existing prompt
   */
  async update(
    request: components.PromptUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.PromptResponse> {
    return unwrapAsync(promptsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Prompt By Id
   *
   * @remarks
   * Get a prompt by ID
   */
  async getById(
    request: operations.PromptsGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.PromptResponse> {
    return unwrapAsync(promptsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Prompt
   *
   * @remarks
   * Delete a prompt
   */
  async delete(
    request: operations.PromptsDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(promptsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Prompt History
   *
   * @remarks
   * Get a list of historical versions of a prompt by its ID
   */
  async promptsHistory(
    request: operations.PromptsHistoryRequest,
    options?: RequestOptions,
  ): Promise<Array<components.PromptHistory>> {
    return unwrapAsync(promptsPromptsHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Supported Llm Configs
   *
   * @remarks
   * Get supported LLM configs.
   */
  async promptGetSupportedLlms(
    options?: RequestOptions,
  ): Promise<Array<components.SupportedLlm>> {
    return unwrapAsync(promptsPromptGetSupportedLlms(
      this,
      options,
    ));
  }
}
