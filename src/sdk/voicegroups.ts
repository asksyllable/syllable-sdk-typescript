/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { voiceGroupsCreate } from "../funcs/voiceGroupsCreate.js";
import { voiceGroupsDelete } from "../funcs/voiceGroupsDelete.js";
import { voiceGroupsGetById } from "../funcs/voiceGroupsGetById.js";
import { voiceGroupsList } from "../funcs/voiceGroupsList.js";
import { voiceGroupsUpdate } from "../funcs/voiceGroupsUpdate.js";
import { voiceGroupsVoiceGroupsCreateVoiceSample } from "../funcs/voiceGroupsVoiceGroupsCreateVoiceSample.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VoiceGroups extends ClientSDK {
  /**
   * List Voice Groups
   *
   * @remarks
   * Fetch voice groups.
   */
  async list(
    request: operations.VoiceGroupsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseVoiceGroupResponse> {
    return unwrapAsync(voiceGroupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Voice Group
   *
   * @remarks
   * Create a new voice group.
   */
  async create(
    request: components.VoiceGroupCreateRequest,
    options?: RequestOptions,
  ): Promise<components.VoiceGroupResponse> {
    return unwrapAsync(voiceGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Voice Group
   *
   * @remarks
   * Update an existing voice group
   */
  async update(
    request: components.VoiceGroupUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.VoiceGroupResponse> {
    return unwrapAsync(voiceGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Voice Group
   *
   * @remarks
   * Fetch a given voice group.
   */
  async getById(
    request: operations.VoiceGroupsGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.VoiceGroupResponse> {
    return unwrapAsync(voiceGroupsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Voice Group
   *
   * @remarks
   * Delete a voice group.
   */
  async delete(
    request: operations.VoiceGroupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(voiceGroupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Voice Sample
   *
   * @remarks
   * Generate voice sample.
   */
  async voiceGroupsCreateVoiceSample(
    request: components.VoiceSampleCreateRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(voiceGroupsVoiceGroupsCreateVoiceSample(
      this,
      request,
      options,
    ));
  }
}
