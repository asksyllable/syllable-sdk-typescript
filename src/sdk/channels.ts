/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { channelsAdd } from "../funcs/channelsAdd.js";
import { channelsCreate } from "../funcs/channelsCreate.js";
import { channelsDelete } from "../funcs/channelsDelete.js";
import { channelsGetById } from "../funcs/channelsGetById.js";
import { channelsList } from "../funcs/channelsList.js";
import { channelsUpdate } from "../funcs/channelsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Targets } from "./targets.js";

export class Channels extends ClientSDK {
  private _targets?: Targets;
  get targets(): Targets {
    return (this._targets ??= new Targets(this._options));
  }

  /**
   * Get Channels
   */
  async list(
    request: operations.ChannelsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseChannel> {
    return unwrapAsync(channelsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Twilio Channel By Id
   */
  async getById(
    request: operations.ChannelsTwilioGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.Channel> {
    return unwrapAsync(channelsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Twilio Channel
   */
  async update(
    request: components.TwilioChannelUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.Channel> {
    return unwrapAsync(channelsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Twilio Channel
   */
  async create(
    request: components.TwilioChannelCreateRequest,
    options?: RequestOptions,
  ): Promise<components.Channel> {
    return unwrapAsync(channelsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Add Twilio Number
   *
   * @remarks
   * Purchase a Twilio number and associate it with a channel.
   */
  async add(
    request: operations.ChannelsTwilioNumbersAddRequest,
    options?: RequestOptions,
  ): Promise<components.TwilioNumberAddResponse> {
    return unwrapAsync(channelsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Channel Target
   *
   * @remarks
   * Hard-delete a channel target by ID
   */
  async delete(
    request: operations.ChannelTargetsDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(channelsDelete(
      this,
      request,
      options,
    ));
  }
}
