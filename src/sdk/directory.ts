/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { directoryCreate } from "../funcs/directoryCreate.js";
import { directoryDelete } from "../funcs/directoryDelete.js";
import { directoryDirectoryMemberBulkLoad } from "../funcs/directoryDirectoryMemberBulkLoad.js";
import { directoryDirectoryMemberDownload } from "../funcs/directoryDirectoryMemberDownload.js";
import { directoryGetById } from "../funcs/directoryGetById.js";
import { directoryList } from "../funcs/directoryList.js";
import { directoryUpdate } from "../funcs/directoryUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Directory extends ClientSDK {
  /**
   * Directory Member List
   *
   * @remarks
   * List the existing directory_members
   */
  async list(
    request: operations.DirectoryMemberListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseDirectoryMember> {
    return unwrapAsync(directoryList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Directory Member
   *
   * @remarks
   * Create a new member in the directory
   */
  async create(
    request: components.DirectoryMemberCreate,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(directoryCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Directory Member By Id
   *
   * @remarks
   * Get a DirectoryMember by ID.
   */
  async getById(
    request: operations.DirectoryMemberGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(directoryGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Directory Member
   *
   * @remarks
   * Update a DirectoryMember.
   */
  async update(
    request: operations.DirectoryMemberUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(directoryUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Directory Member
   *
   * @remarks
   * Delete a DirectoryMember.
   */
  async delete(
    request: operations.DirectoryMemberDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(directoryDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk Load Directory Members
   *
   * @remarks
   * Update Directory Members in chunks of 100.
   */
  async directoryMemberBulkLoad(
    request: components.BodyDirectoryMemberBulkLoad,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(directoryDirectoryMemberBulkLoad(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Directory Members
   *
   * @remarks
   * Download the entire directory as a JSON file.
   */
  async directoryMemberDownload(
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(directoryDirectoryMemberDownload(
      this,
      options,
    ));
  }
}
