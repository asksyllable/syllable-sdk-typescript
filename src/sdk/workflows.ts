/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsWorkflowsCreate } from "../funcs/insightsWorkflowsCreate.js";
import { insightsWorkflowsDelete } from "../funcs/insightsWorkflowsDelete.js";
import { insightsWorkflowsGetById } from "../funcs/insightsWorkflowsGetById.js";
import { insightsWorkflowsList } from "../funcs/insightsWorkflowsList.js";
import { insightsWorkflowsQueueSessionsWorkflow } from "../funcs/insightsWorkflowsQueueSessionsWorkflow.js";
import { insightsWorkflowsUpdate } from "../funcs/insightsWorkflowsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workflows extends ClientSDK {
  /**
   * Insight Workflow List
   *
   * @remarks
   * List the existing insight_workflows
   */
  async list(
    request: operations.InsightsWorkflowListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseInsightWorkflowOutput> {
    return unwrapAsync(insightsWorkflowsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Insight Workflow
   *
   * @remarks
   * Create a new tool in the insights
   */
  async create(
    request: components.InsightWorkflowInput,
    options?: RequestOptions,
  ): Promise<components.InsightWorkflowOutput> {
    return unwrapAsync(insightsWorkflowsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Insight Workflow By Id
   *
   * @remarks
   * Get a InsightWorkflow by ID.
   */
  async getById(
    request: operations.InsightsWorkflowGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.InsightWorkflowOutput> {
    return unwrapAsync(insightsWorkflowsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Insights Workflow
   *
   * @remarks
   * Update a InsightWorkflow.
   */
  async update(
    request: operations.InsightsWorkflowUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.InsightWorkflowOutput> {
    return unwrapAsync(insightsWorkflowsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Insights Workflow
   *
   * @remarks
   * Delete a Insights workflow.
   */
  async delete(
    request: operations.InsightsWorkflowDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(insightsWorkflowsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Queue Insights Workflow For Sessions
   *
   * @remarks
   * Manually queue sessions for insights workflow evaluation.
   */
  async queueSessionsWorkflow(
    request: components.InsightsWorkflowQueueSession,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(insightsWorkflowsQueueSessionsWorkflow(
      this,
      request,
      options,
    ));
  }
}
