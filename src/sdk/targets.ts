/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { channelsTargetsAvailableTargets } from "../funcs/channelsTargetsAvailableTargets.js";
import { channelsTargetsCreate } from "../funcs/channelsTargetsCreate.js";
import { channelsTargetsGetById } from "../funcs/channelsTargetsGetById.js";
import { channelsTargetsList } from "../funcs/channelsTargetsList.js";
import { channelsTargetsUpdate } from "../funcs/channelsTargetsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Targets extends ClientSDK {
  /**
   * Available Targets List
   *
   * @remarks
   * List the available phone numbers
   */
  async availableTargets(
    request: operations.AvailableTargetsRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseAvailableTarget> {
    return unwrapAsync(channelsTargetsAvailableTargets(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Channel Targets
   */
  async list(
    request: operations.ChannelTargetsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseChannelTargetResponse> {
    return unwrapAsync(channelsTargetsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign A Channel Target
   */
  async create(
    request: operations.ChannelTargetsCreateRequest,
    options?: RequestOptions,
  ): Promise<components.ChannelTargetResponse> {
    return unwrapAsync(channelsTargetsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get A Channel Target
   */
  async getById(
    request: operations.ChannelTargetsGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.ChannelTargetResponse> {
    return unwrapAsync(channelsTargetsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit Channel Target
   *
   * @remarks
   * Update channel target by ID
   */
  async update(
    request: operations.ChannelTargetsUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.ChannelTargetResponse> {
    return unwrapAsync(channelsTargetsUpdate(
      this,
      request,
      options,
    ));
  }
}
