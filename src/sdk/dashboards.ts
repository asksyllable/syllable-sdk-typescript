/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dashboardsGetDailyCallVolumeByHour } from "../funcs/dashboardsGetDailyCallVolumeByHour.js";
import { dashboardsGetMonthlyCallVolumeByDay } from "../funcs/dashboardsGetMonthlyCallVolumeByDay.js";
import { dashboardsGetMonthlyCallVolumeByWeek } from "../funcs/dashboardsGetMonthlyCallVolumeByWeek.js";
import { dashboardsGetSessionAgents } from "../funcs/dashboardsGetSessionAgents.js";
import { dashboardsGetSessionSummary } from "../funcs/dashboardsGetSessionSummary.js";
import { dashboardsGetTotalCallVolumeByHour } from "../funcs/dashboardsGetTotalCallVolumeByHour.js";
import { dashboardsGetWeeklyCallVolumeByWeekday } from "../funcs/dashboardsGetWeeklyCallVolumeByWeekday.js";
import { dashboardsTotalCallVolumeByWeekday } from "../funcs/dashboardsTotalCallVolumeByWeekday.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Dashboards extends ClientSDK {
  /**
   * Get Total Call Volume By Weekday
   *
   * @remarks
   * Get total call volume by weekday.
   */
  async totalCallVolumeByWeekday(
    options?: RequestOptions,
  ): Promise<
    operations.TotalCallVolumeByWeekdayResponseTotalCallVolumeByWeekday
  > {
    return unwrapAsync(dashboardsTotalCallVolumeByWeekday(
      this,
      options,
    ));
  }

  /**
   * Get Total Call Volume By Hour
   *
   * @remarks
   * Get total call volume by hour.
   */
  async getTotalCallVolumeByHour(
    options?: RequestOptions,
  ): Promise<
    operations.GetTotalCallVolumeByHourResponseGetTotalCallVolumeByHour
  > {
    return unwrapAsync(dashboardsGetTotalCallVolumeByHour(
      this,
      options,
    ));
  }

  /**
   * Get Weekly Call Volume By Weekday
   *
   * @remarks
   * Get weekly call volume by weekday.
   */
  async getWeeklyCallVolumeByWeekday(
    options?: RequestOptions,
  ): Promise<
    operations.GetWeeklyCallVolumeByWeekdayResponseGetWeeklyCallVolumeByWeekday
  > {
    return unwrapAsync(dashboardsGetWeeklyCallVolumeByWeekday(
      this,
      options,
    ));
  }

  /**
   * Get Daily Call Volume By Hour
   *
   * @remarks
   * Get daily call volume by hour.
   */
  async getDailyCallVolumeByHour(
    options?: RequestOptions,
  ): Promise<
    operations.GetDailyCallVolumeByHourResponseGetDailyCallVolumeByHour
  > {
    return unwrapAsync(dashboardsGetDailyCallVolumeByHour(
      this,
      options,
    ));
  }

  /**
   * Get Monthly Call Volume By Week
   *
   * @remarks
   * Get monthly cal volume by week.
   */
  async getMonthlyCallVolumeByWeek(
    options?: RequestOptions,
  ): Promise<
    operations.GetMonthlyCallVolumeByWeekResponseGetMonthlyCallVolumeByWeek
  > {
    return unwrapAsync(dashboardsGetMonthlyCallVolumeByWeek(
      this,
      options,
    ));
  }

  /**
   * Get Monthly Call Volume By Day
   *
   * @remarks
   * Get monthly call volume by day.
   */
  async getMonthlyCallVolumeByDay(
    options?: RequestOptions,
  ): Promise<
    operations.GetMonthlyCallVolumeByDayResponseGetMonthlyCallVolumeByDay
  > {
    return unwrapAsync(dashboardsGetMonthlyCallVolumeByDay(
      this,
      options,
    ));
  }

  /**
   * Get Session Summary
   *
   * @remarks
   * Get session summary data
   */
  async getSessionSummary(
    request: operations.GetSessionSummaryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSessionSummaryResponseGetSessionSummary> {
    return unwrapAsync(dashboardsGetSessionSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Agents
   *
   * @remarks
   * Get list of agents for session summary dropdown
   */
  async getSessionAgents(
    options?: RequestOptions,
  ): Promise<operations.GetSessionAgentsResponseGetSessionAgents> {
    return unwrapAsync(dashboardsGetSessionAgents(
      this,
      options,
    ));
  }
}
