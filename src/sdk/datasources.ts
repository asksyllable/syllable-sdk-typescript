/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataSourcesCreate } from "../funcs/dataSourcesCreate.js";
import { dataSourcesDataSourcesDeleteByName } from "../funcs/dataSourcesDataSourcesDeleteByName.js";
import { dataSourcesGetByName } from "../funcs/dataSourcesGetByName.js";
import { dataSourcesList } from "../funcs/dataSourcesList.js";
import { dataSourcesUpdate } from "../funcs/dataSourcesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DataSources extends ClientSDK {
  /**
   * List Data Sources
   *
   * @remarks
   * Fetch metadata about all data sources, not including their text.
   */
  async list(
    request: operations.DataSourcesListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseDataSourceMetadataResponse> {
    return unwrapAsync(dataSourcesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Data Source
   *
   * @remarks
   * Create a new data source.
   */
  async create(
    request: components.DataSourceCreateRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(dataSourcesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Data Source
   *
   * @remarks
   * Update an existing data source.
   */
  async update(
    request: components.DataSourceUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(dataSourcesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Data Source
   *
   * @remarks
   * Fetch a given data source, including its text.
   */
  async getByName(
    request: operations.DataSourcesGetByNameRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(dataSourcesGetByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Data Source
   *
   * @remarks
   * Delete a given data source.
   */
  async dataSourcesDeleteByName(
    request: operations.DataSourcesDeleteByNameRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(dataSourcesDataSourcesDeleteByName(
      this,
      request,
      options,
    ));
  }
}
