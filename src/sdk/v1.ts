/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { v1Create } from "../funcs/v1Create.js";
import { v1Delete } from "../funcs/v1Delete.js";
import { v1DirectoryMemberBulkLoad } from "../funcs/v1DirectoryMemberBulkLoad.js";
import { v1DirectoryMemberDownload } from "../funcs/v1DirectoryMemberDownload.js";
import { v1GetById } from "../funcs/v1GetById.js";
import { v1List } from "../funcs/v1List.js";
import { v1Update } from "../funcs/v1Update.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class V1 extends ClientSDK {
  /**
   * Directory Member List
   *
   * @remarks
   * List the existing directory_members
   */
  async list(
    request: operations.DirectoryMemberListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseDirectoryMember> {
    return unwrapAsync(v1List(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Directory Member
   *
   * @remarks
   * Create a new member in the directory
   */
  async create(
    request: components.DirectoryMemberCreate,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(v1Create(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Directory Member By Id
   *
   * @remarks
   * Get a DirectoryMember by ID.
   */
  async getById(
    request: operations.DirectoryMemberGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(v1GetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Directory Member
   *
   * @remarks
   * Update a DirectoryMember.
   */
  async update(
    request: operations.DirectoryMemberUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.DirectoryMember> {
    return unwrapAsync(v1Update(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Directory Member
   *
   * @remarks
   * Delete a DirectoryMember.
   */
  async delete(
    request: operations.DirectoryMemberDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1Delete(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk Load Directory Members
   *
   * @remarks
   * Update Directory Members in chunks of 100.
   */
  async directoryMemberBulkLoad(
    request: components.BodyDirectoryMemberBulkLoad,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1DirectoryMemberBulkLoad(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Directory Members
   *
   * @remarks
   * Download the entire directory as a JSON file.
   */
  async directoryMemberDownload(
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1DirectoryMemberDownload(
      this,
      options,
    ));
  }
}
