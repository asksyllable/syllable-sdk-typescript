/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { v1Create } from "../funcs/v1Create.js";
import { v1DataSourcesDeleteByName } from "../funcs/v1DataSourcesDeleteByName.js";
import { v1GetByName } from "../funcs/v1GetByName.js";
import { v1List } from "../funcs/v1List.js";
import { v1PostSessionEventsDashboard } from "../funcs/v1PostSessionEventsDashboard.js";
import { v1PostSessionsDashboard } from "../funcs/v1PostSessionsDashboard.js";
import { v1PostSessionSummaryDashboard } from "../funcs/v1PostSessionSummaryDashboard.js";
import { v1PostSessionTransfersDashboard } from "../funcs/v1PostSessionTransfersDashboard.js";
import { v1Update } from "../funcs/v1Update.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class V1 extends ClientSDK {
  /**
   * List Data Sources
   *
   * @remarks
   * Fetch metadata about all data sources, not including their text.
   */
  async list(
    request: operations.DataSourcesListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseDataSourceMetadataResponse> {
    return unwrapAsync(v1List(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Data Source
   *
   * @remarks
   * Create a new data source.
   */
  async create(
    request: components.DataSourceCreateRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(v1Create(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Data Source
   *
   * @remarks
   * Update an existing data source.
   */
  async update(
    request: components.DataSourceUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(v1Update(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Data Source
   *
   * @remarks
   * Fetch a given data source, including its text.
   */
  async getByName(
    request: operations.DataSourcesGetByNameRequest,
    options?: RequestOptions,
  ): Promise<components.DataSourceDetailResponse> {
    return unwrapAsync(v1GetByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Data Source
   *
   * @remarks
   * Delete a given data source.
   */
  async dataSourcesDeleteByName(
    request: operations.DataSourcesDeleteByNameRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1DataSourcesDeleteByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Post Session Events
   *
   * @remarks
   * METHOD: POST
   * URL: /dashboard/session_events
   * ARGUMENTS: None
   * RETURNS: Dashboard info for embedding
   */
  async postSessionEventsDashboard(
    options?: RequestOptions,
  ): Promise<components.Dashboard> {
    return unwrapAsync(v1PostSessionEventsDashboard(
      this,
      options,
    ));
  }

  /**
   * Post Session Summary
   *
   * @remarks
   * METHOD: POST
   * URL: /dashboard/session_summary
   * ARGUMENTS: None
   * RETURNS: Dashboard info for embedding
   */
  async postSessionSummaryDashboard(
    options?: RequestOptions,
  ): Promise<components.Dashboard> {
    return unwrapAsync(v1PostSessionSummaryDashboard(
      this,
      options,
    ));
  }

  /**
   * Post Session Transfers
   *
   * @remarks
   * METHOD: POST
   * URL: /dashboard/session_transfers
   * ARGUMENTS: None
   * RETURNS: Dashboard info for embedding
   */
  async postSessionTransfersDashboard(
    options?: RequestOptions,
  ): Promise<components.Dashboard> {
    return unwrapAsync(v1PostSessionTransfersDashboard(
      this,
      options,
    ));
  }

  /**
   * Post Sessions
   *
   * @remarks
   * METHOD: POST
   * URL: /dashboard/sessions
   * ARGUMENTS: None
   * RETURNS: Dashboard info for embedding
   */
  async postSessionsDashboard(
    options?: RequestOptions,
  ): Promise<components.Dashboard> {
    return unwrapAsync(v1PostSessionsDashboard(
      this,
      options,
    ));
  }
}
