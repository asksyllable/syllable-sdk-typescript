/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { v1Create } from "../funcs/v1Create.js";
import { v1Delete } from "../funcs/v1Delete.js";
import { v1List } from "../funcs/v1List.js";
import { v1Update } from "../funcs/v1Update.js";
import { v1UsersDeleteAccount } from "../funcs/v1UsersDeleteAccount.js";
import { v1UsersGetByEmail } from "../funcs/v1UsersGetByEmail.js";
import { v1UsersSendEmail } from "../funcs/v1UsersSendEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class V1 extends ClientSDK {
  /**
   * List Users
   *
   * @remarks
   * List the existing users.
   */
  async list(
    request: operations.UsersListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseUserResponse> {
    return unwrapAsync(v1List(
      this,
      request,
      options,
    ));
  }

  /**
   * Create User
   *
   * @remarks
   * Create a new user.
   */
  async create(
    request: components.UserCreateRequest,
    options?: RequestOptions,
  ): Promise<components.UserResponse> {
    return unwrapAsync(v1Create(
      this,
      request,
      options,
    ));
  }

  /**
   * Update User
   *
   * @remarks
   * Update an existing user.
   */
  async update(
    request: components.UserUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.UserResponse> {
    return unwrapAsync(v1Update(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete User
   *
   * @remarks
   * Delete a user.
   */
  async delete(
    request: components.UserDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1Delete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User
   *
   * @remarks
   * Fetch a given user.
   */
  async usersGetByEmail(
    request: operations.UsersGetByEmailRequest,
    options?: RequestOptions,
  ): Promise<components.UserResponse> {
    return unwrapAsync(v1UsersGetByEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * Send User Email
   *
   * @remarks
   * Send a welcome email to a user.
   */
  async usersSendEmail(
    request: operations.UsersSendEmailRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1UsersSendEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * Request Removal Of This Account
   *
   * @remarks
   * Request removal of the account of the user calling this endpoint. Intended for removing trial
   * accounts.
   */
  async usersDeleteAccount(
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(v1UsersDeleteAccount(
      this,
      options,
    ));
  }
}
