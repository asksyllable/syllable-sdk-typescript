/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incidentsCreate } from "../funcs/incidentsCreate.js";
import { incidentsDelete } from "../funcs/incidentsDelete.js";
import { incidentsGetById } from "../funcs/incidentsGetById.js";
import { incidentsIncidentGetOrganizations } from "../funcs/incidentsIncidentGetOrganizations.js";
import { incidentsList } from "../funcs/incidentsList.js";
import { incidentsUpdate } from "../funcs/incidentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Incidents extends ClientSDK {
  /**
   * List Incidents
   *
   * @remarks
   * List service incidents with pagination and filtering
   */
  async list(
    request: operations.IncidentListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseIncidentResponse> {
    return unwrapAsync(incidentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Incident
   *
   * @remarks
   * Create a new incident
   */
  async create(
    request: components.IncidentCreateRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentResponse> {
    return unwrapAsync(incidentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Incident
   *
   * @remarks
   * Update an existing incident
   */
  async update(
    request: components.IncidentUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentResponse> {
    return unwrapAsync(incidentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Organizations
   *
   * @remarks
   * Get all organizations
   */
  async incidentGetOrganizations(
    options?: RequestOptions,
  ): Promise<Array<components.IncidentOrganizationResponse>> {
    return unwrapAsync(incidentsIncidentGetOrganizations(
      this,
      options,
    ));
  }

  /**
   * Get Incident By Id
   *
   * @remarks
   * Get incident by ID
   */
  async getById(
    request: operations.IncidentGetByIdRequest,
    options?: RequestOptions,
  ): Promise<components.IncidentResponse> {
    return unwrapAsync(incidentsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Incident
   *
   * @remarks
   * Delete an incident by ID
   */
  async delete(
    request: operations.IncidentDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(incidentsDelete(
      this,
      request,
      options,
    ));
  }
}
