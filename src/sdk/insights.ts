/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsList } from "../funcs/insightsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Folders } from "./folders.js";
import { SyllableSDKTools } from "./syllablesdktools.js";
import { Workflows } from "./workflows.js";

export class Insights extends ClientSDK {
  private _folders?: Folders;
  get folders(): Folders {
    return (this._folders ??= new Folders(this._options));
  }

  private _workflows?: Workflows;
  get workflows(): Workflows {
    return (this._workflows ??= new Workflows(this._options));
  }

  private _tools?: SyllableSDKTools;
  get tools(): SyllableSDKTools {
    return (this._tools ??= new SyllableSDKTools(this._options));
  }

  /**
   * Insights List
   *
   * @remarks
   * List the evaluated insights for sessions.
   */
  async list(
    request: operations.InsightsListRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponseInsightsOutput> {
    return unwrapAsync(insightsList(
      this,
      request,
      options,
    ));
  }
}
