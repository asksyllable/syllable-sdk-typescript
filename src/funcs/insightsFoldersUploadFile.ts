/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SyllableSDKCore } from "../core.js";
import { appendForm, encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import {
  getContentTypeFromFileName,
  readableStreamToArrayBuffer,
} from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { SyllableSDKError } from "../models/errors/syllablesdkerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * Upload Insights  Upload Folder
 */
export function insightsFoldersUploadFile(
  client: SyllableSDKCore,
  request: operations.InsightsFolderUploadFileRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.InsightsUploadFile,
    | errors.HTTPValidationError
    | SyllableSDKError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: SyllableSDKCore,
  request: operations.InsightsFolderUploadFileRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.InsightsUploadFile,
      | errors.HTTPValidationError
      | SyllableSDKError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.InsightsFolderUploadFileRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();
  if (payload.Body_insights_folder_upload_file != null) {
    if (payload.Body_insights_folder_upload_file.file !== undefined) {
      if (isBlobLike(payload.Body_insights_folder_upload_file.file)) {
        appendForm(body, "file", payload.Body_insights_folder_upload_file.file);
      } else if (
        isReadableStream(payload.Body_insights_folder_upload_file.file.content)
      ) {
        const buffer = await readableStreamToArrayBuffer(
          payload.Body_insights_folder_upload_file.file.content,
        );
        const contentType =
          getContentTypeFromFileName(
            payload.Body_insights_folder_upload_file.file.fileName,
          ) || "application/octet-stream";
        const blob = new Blob([buffer], { type: contentType });
        appendForm(
          body,
          "file",
          blob,
          payload.Body_insights_folder_upload_file.file.fileName,
        );
      } else {
        const contentType =
          getContentTypeFromFileName(
            payload.Body_insights_folder_upload_file.file.fileName,
          ) || "application/octet-stream";
        appendForm(
          body,
          "file",
          new Blob([payload.Body_insights_folder_upload_file.file.content], {
            type: contentType,
          }),
          payload.Body_insights_folder_upload_file.file.fileName,
        );
      }
    }
  }

  const pathParams = {
    folder_id: encodeSimple("folder_id", payload.folder_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/v1/insights/folders/{folder_id}/upload-file")(
    pathParams,
  );

  const query = encodeFormQuery({
    "agent_number": payload.agent_number,
    "call_id": payload.call_id,
    "customer_number": payload.customer_number,
    "duration": payload.duration,
    "end_time": payload.end_time,
    "metadata": payload.metadata,
    "start_time": payload.start_time,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKeyHeader);
  const securityInput = secConfig == null ? {} : { apiKeyHeader: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "insights_folder_upload_file",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKeyHeader,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["422", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.InsightsUploadFile,
    | errors.HTTPValidationError
    | SyllableSDKError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, components.InsightsUploadFile$inboundSchema),
    M.jsonErr(422, errors.HTTPValidationError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
