/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Attributes = {};

export type Event = {
  timestamp: Date;
  sessionId?: string | null | undefined;
  conversationId?: string | null | undefined;
  source?: string | null | undefined;
  sourceId?: string | null | undefined;
  category?: string | null | undefined;
  type?: string | null | undefined;
  userId?: string | null | undefined;
  description?: string | null | undefined;
  attributes?: Attributes | null | undefined;
};

/** @internal */
export const Attributes$inboundSchema: z.ZodType<
  Attributes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Attributes$Outbound = {};

/** @internal */
export const Attributes$outboundSchema: z.ZodType<
  Attributes$Outbound,
  z.ZodTypeDef,
  Attributes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attributes$ {
  /** @deprecated use `Attributes$inboundSchema` instead. */
  export const inboundSchema = Attributes$inboundSchema;
  /** @deprecated use `Attributes$outboundSchema` instead. */
  export const outboundSchema = Attributes$outboundSchema;
  /** @deprecated use `Attributes$Outbound` instead. */
  export type Outbound = Attributes$Outbound;
}

export function attributesToJSON(attributes: Attributes): string {
  return JSON.stringify(Attributes$outboundSchema.parse(attributes));
}

export function attributesFromJSON(
  jsonString: string,
): SafeParseResult<Attributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attributes' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    session_id: z.nullable(z.string()).optional(),
    conversation_id: z.nullable(z.string()).optional(),
    source: z.nullable(z.string()).optional(),
    source_id: z.nullable(z.string()).optional(),
    category: z.nullable(z.string()).optional(),
    type: z.nullable(z.string()).optional(),
    user_id: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    attributes: z.nullable(z.lazy(() => Attributes$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "session_id": "sessionId",
      "conversation_id": "conversationId",
      "source_id": "sourceId",
      "user_id": "userId",
    });
  });

/** @internal */
export type Event$Outbound = {
  timestamp: string;
  session_id?: string | null | undefined;
  conversation_id?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  category?: string | null | undefined;
  type?: string | null | undefined;
  user_id?: string | null | undefined;
  description?: string | null | undefined;
  attributes?: Attributes$Outbound | null | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  sessionId: z.nullable(z.string()).optional(),
  conversationId: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  category: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  attributes: z.nullable(z.lazy(() => Attributes$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    conversationId: "conversation_id",
    sourceId: "source_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
