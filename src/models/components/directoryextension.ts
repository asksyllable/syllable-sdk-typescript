/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DirectoryExtensionNumber,
  DirectoryExtensionNumber$inboundSchema,
  DirectoryExtensionNumber$Outbound,
  DirectoryExtensionNumber$outboundSchema,
} from "./directoryextensionnumber.js";

export type DirectoryExtension = {
  /**
   * Directory extension name
   */
  name: string;
  /**
   * Directory extension numbers.
   */
  numbers?: Array<DirectoryExtensionNumber> | null | undefined;
};

/** @internal */
export const DirectoryExtension$inboundSchema: z.ZodType<
  DirectoryExtension,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  numbers: z.nullable(z.array(DirectoryExtensionNumber$inboundSchema))
    .optional(),
});

/** @internal */
export type DirectoryExtension$Outbound = {
  name: string;
  numbers?: Array<DirectoryExtensionNumber$Outbound> | null | undefined;
};

/** @internal */
export const DirectoryExtension$outboundSchema: z.ZodType<
  DirectoryExtension$Outbound,
  z.ZodTypeDef,
  DirectoryExtension
> = z.object({
  name: z.string(),
  numbers: z.nullable(z.array(DirectoryExtensionNumber$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryExtension$ {
  /** @deprecated use `DirectoryExtension$inboundSchema` instead. */
  export const inboundSchema = DirectoryExtension$inboundSchema;
  /** @deprecated use `DirectoryExtension$outboundSchema` instead. */
  export const outboundSchema = DirectoryExtension$outboundSchema;
  /** @deprecated use `DirectoryExtension$Outbound` instead. */
  export type Outbound = DirectoryExtension$Outbound;
}

export function directoryExtensionToJSON(
  directoryExtension: DirectoryExtension,
): string {
  return JSON.stringify(
    DirectoryExtension$outboundSchema.parse(directoryExtension),
  );
}

export function directoryExtensionFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryExtension, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryExtension$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryExtension' from JSON`,
  );
}
