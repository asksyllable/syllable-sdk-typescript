/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomMessageResponse = {
  /**
   * The name of the custom message
   */
  name: string;
  /**
   * The text of the custom message
   */
  text: string;
  /**
   * The ID of the custom message
   */
  id: number;
  type?: string | undefined;
};

/** @internal */
export const CustomMessageResponse$inboundSchema: z.ZodType<
  CustomMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  text: z.string(),
  id: z.number().int(),
  type: z.string().default("greeting"),
});

/** @internal */
export type CustomMessageResponse$Outbound = {
  name: string;
  text: string;
  id: number;
  type: string;
};

/** @internal */
export const CustomMessageResponse$outboundSchema: z.ZodType<
  CustomMessageResponse$Outbound,
  z.ZodTypeDef,
  CustomMessageResponse
> = z.object({
  name: z.string(),
  text: z.string(),
  id: z.number().int(),
  type: z.string().default("greeting"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMessageResponse$ {
  /** @deprecated use `CustomMessageResponse$inboundSchema` instead. */
  export const inboundSchema = CustomMessageResponse$inboundSchema;
  /** @deprecated use `CustomMessageResponse$outboundSchema` instead. */
  export const outboundSchema = CustomMessageResponse$outboundSchema;
  /** @deprecated use `CustomMessageResponse$Outbound` instead. */
  export type Outbound = CustomMessageResponse$Outbound;
}

export function customMessageResponseToJSON(
  customMessageResponse: CustomMessageResponse,
): string {
  return JSON.stringify(
    CustomMessageResponse$outboundSchema.parse(customMessageResponse),
  );
}

export function customMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMessageResponse' from JSON`,
  );
}
