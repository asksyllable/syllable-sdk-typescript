/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Recording URLs for a given session.
 */
export type SessionRecordingResponse = {
  /**
   * The internal ID of the session
   */
  sessionId?: string | null | undefined;
  /**
   * List of recording URLs
   */
  recordings?: Array<string> | null | undefined;
};

/** @internal */
export const SessionRecordingResponse$inboundSchema: z.ZodType<
  SessionRecordingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.nullable(z.string()).optional(),
  recordings: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type SessionRecordingResponse$Outbound = {
  session_id?: string | null | undefined;
  recordings?: Array<string> | null | undefined;
};

/** @internal */
export const SessionRecordingResponse$outboundSchema: z.ZodType<
  SessionRecordingResponse$Outbound,
  z.ZodTypeDef,
  SessionRecordingResponse
> = z.object({
  sessionId: z.nullable(z.string()).optional(),
  recordings: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionRecordingResponse$ {
  /** @deprecated use `SessionRecordingResponse$inboundSchema` instead. */
  export const inboundSchema = SessionRecordingResponse$inboundSchema;
  /** @deprecated use `SessionRecordingResponse$outboundSchema` instead. */
  export const outboundSchema = SessionRecordingResponse$outboundSchema;
  /** @deprecated use `SessionRecordingResponse$Outbound` instead. */
  export type Outbound = SessionRecordingResponse$Outbound;
}

export function sessionRecordingResponseToJSON(
  sessionRecordingResponse: SessionRecordingResponse,
): string {
  return JSON.stringify(
    SessionRecordingResponse$outboundSchema.parse(sessionRecordingResponse),
  );
}

export function sessionRecordingResponseFromJSON(
  jsonString: string,
): SafeParseResult<SessionRecordingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionRecordingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionRecordingResponse' from JSON`,
  );
}
