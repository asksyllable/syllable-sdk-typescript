/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LatencyCategory,
  LatencyCategory$inboundSchema,
  LatencyCategory$outboundSchema,
} from "./latencycategory.js";
import {
  LatencyUnitType,
  LatencyUnitType$inboundSchema,
  LatencyUnitType$outboundSchema,
} from "./latencyunittype.js";

/**
 * Data model for latency entries.
 */
export type LatencyEntry = {
  timestamp: Date;
  measurementStart: Date;
  category: LatencyCategory;
  label: string;
  metadata?: Array<string> | null | undefined;
  unitType: LatencyUnitType;
  value: number;
  valueStr: string;
  timeDelta: string;
};

/** @internal */
export const LatencyEntry$inboundSchema: z.ZodType<
  LatencyEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  measurement_start: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  category: LatencyCategory$inboundSchema,
  label: z.string(),
  metadata: z.nullable(z.array(z.string())).optional(),
  unit_type: LatencyUnitType$inboundSchema,
  value: z.number(),
  value_str: z.string(),
  time_delta: z.string(),
}).transform((v) => {
  return remap$(v, {
    "measurement_start": "measurementStart",
    "unit_type": "unitType",
    "value_str": "valueStr",
    "time_delta": "timeDelta",
  });
});

/** @internal */
export type LatencyEntry$Outbound = {
  timestamp: string;
  measurement_start: string;
  category: string;
  label: string;
  metadata?: Array<string> | null | undefined;
  unit_type: string;
  value: number;
  value_str: string;
  time_delta: string;
};

/** @internal */
export const LatencyEntry$outboundSchema: z.ZodType<
  LatencyEntry$Outbound,
  z.ZodTypeDef,
  LatencyEntry
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  measurementStart: z.date().transform(v => v.toISOString()),
  category: LatencyCategory$outboundSchema,
  label: z.string(),
  metadata: z.nullable(z.array(z.string())).optional(),
  unitType: LatencyUnitType$outboundSchema,
  value: z.number(),
  valueStr: z.string(),
  timeDelta: z.string(),
}).transform((v) => {
  return remap$(v, {
    measurementStart: "measurement_start",
    unitType: "unit_type",
    valueStr: "value_str",
    timeDelta: "time_delta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LatencyEntry$ {
  /** @deprecated use `LatencyEntry$inboundSchema` instead. */
  export const inboundSchema = LatencyEntry$inboundSchema;
  /** @deprecated use `LatencyEntry$outboundSchema` instead. */
  export const outboundSchema = LatencyEntry$outboundSchema;
  /** @deprecated use `LatencyEntry$Outbound` instead. */
  export type Outbound = LatencyEntry$Outbound;
}

export function latencyEntryToJSON(latencyEntry: LatencyEntry): string {
  return JSON.stringify(LatencyEntry$outboundSchema.parse(latencyEntry));
}

export function latencyEntryFromJSON(
  jsonString: string,
): SafeParseResult<LatencyEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LatencyEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LatencyEntry' from JSON`,
  );
}
