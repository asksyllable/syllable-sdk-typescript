/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * JSON value of insight tool result
 */
export type JsonValue = {};

/**
 * Response model for an insight tool.
 */
export type InsightsOutput = {
  /**
   * Unique ID for insight tool
   */
  id: number;
  /**
   * Unique ID for session
   */
  sessionId?: number | null | undefined;
  /**
   * Unique ID for uploaded file
   */
  uploadFileId?: number | null | undefined;
  /**
   * Unique ID for insight tool
   */
  insightToolId: number;
  /**
   * Version of insight tool
   */
  insightToolVersion: number;
  /**
   * Key for insight tool result
   */
  insightKey: string;
  /**
   * String value of insight tool result
   */
  stringValue?: string | null | undefined;
  /**
   * Numeric value of insight tool result
   */
  numericValue?: number | null | undefined;
  /**
   * JSON value of insight tool result
   */
  jsonValue: JsonValue;
  /**
   * Timestamp at which insight tool result was created
   */
  createdAt?: Date | undefined;
  /**
   * Timestamp at which insight tool result was last updated
   */
  updatedAt?: Date | undefined;
};

/** @internal */
export const JsonValue$inboundSchema: z.ZodType<
  JsonValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type JsonValue$Outbound = {};

/** @internal */
export const JsonValue$outboundSchema: z.ZodType<
  JsonValue$Outbound,
  z.ZodTypeDef,
  JsonValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonValue$ {
  /** @deprecated use `JsonValue$inboundSchema` instead. */
  export const inboundSchema = JsonValue$inboundSchema;
  /** @deprecated use `JsonValue$outboundSchema` instead. */
  export const outboundSchema = JsonValue$outboundSchema;
  /** @deprecated use `JsonValue$Outbound` instead. */
  export type Outbound = JsonValue$Outbound;
}

export function jsonValueToJSON(jsonValue: JsonValue): string {
  return JSON.stringify(JsonValue$outboundSchema.parse(jsonValue));
}

export function jsonValueFromJSON(
  jsonString: string,
): SafeParseResult<JsonValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonValue' from JSON`,
  );
}

/** @internal */
export const InsightsOutput$inboundSchema: z.ZodType<
  InsightsOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  session_id: z.nullable(z.number().int()).optional(),
  upload_file_id: z.nullable(z.number().int()).optional(),
  insight_tool_id: z.number().int(),
  insight_tool_version: z.number().int(),
  insight_key: z.string(),
  string_value: z.nullable(z.string()).optional(),
  numeric_value: z.nullable(z.number()).optional(),
  json_value: z.lazy(() => JsonValue$inboundSchema),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
    "upload_file_id": "uploadFileId",
    "insight_tool_id": "insightToolId",
    "insight_tool_version": "insightToolVersion",
    "insight_key": "insightKey",
    "string_value": "stringValue",
    "numeric_value": "numericValue",
    "json_value": "jsonValue",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type InsightsOutput$Outbound = {
  id: number;
  session_id?: number | null | undefined;
  upload_file_id?: number | null | undefined;
  insight_tool_id: number;
  insight_tool_version: number;
  insight_key: string;
  string_value?: string | null | undefined;
  numeric_value?: number | null | undefined;
  json_value: JsonValue$Outbound;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const InsightsOutput$outboundSchema: z.ZodType<
  InsightsOutput$Outbound,
  z.ZodTypeDef,
  InsightsOutput
> = z.object({
  id: z.number().int(),
  sessionId: z.nullable(z.number().int()).optional(),
  uploadFileId: z.nullable(z.number().int()).optional(),
  insightToolId: z.number().int(),
  insightToolVersion: z.number().int(),
  insightKey: z.string(),
  stringValue: z.nullable(z.string()).optional(),
  numericValue: z.nullable(z.number()).optional(),
  jsonValue: z.lazy(() => JsonValue$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    uploadFileId: "upload_file_id",
    insightToolId: "insight_tool_id",
    insightToolVersion: "insight_tool_version",
    insightKey: "insight_key",
    stringValue: "string_value",
    numericValue: "numeric_value",
    jsonValue: "json_value",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsOutput$ {
  /** @deprecated use `InsightsOutput$inboundSchema` instead. */
  export const inboundSchema = InsightsOutput$inboundSchema;
  /** @deprecated use `InsightsOutput$outboundSchema` instead. */
  export const outboundSchema = InsightsOutput$outboundSchema;
  /** @deprecated use `InsightsOutput$Outbound` instead. */
  export type Outbound = InsightsOutput$Outbound;
}

export function insightsOutputToJSON(insightsOutput: InsightsOutput): string {
  return JSON.stringify(InsightsOutput$outboundSchema.parse(insightsOutput));
}

export function insightsOutputFromJSON(
  jsonString: string,
): SafeParseResult<InsightsOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsOutput' from JSON`,
  );
}
