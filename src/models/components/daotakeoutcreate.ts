/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DaoTakeoutCreate = {
  subOrganizationId: number;
  requestedBy?: number | null | undefined;
};

/** @internal */
export const DaoTakeoutCreate$inboundSchema: z.ZodType<
  DaoTakeoutCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  sub_organization_id: z.number().int(),
  requested_by: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_organization_id": "subOrganizationId",
    "requested_by": "requestedBy",
  });
});

/** @internal */
export type DaoTakeoutCreate$Outbound = {
  sub_organization_id: number;
  requested_by?: number | null | undefined;
};

/** @internal */
export const DaoTakeoutCreate$outboundSchema: z.ZodType<
  DaoTakeoutCreate$Outbound,
  z.ZodTypeDef,
  DaoTakeoutCreate
> = z.object({
  subOrganizationId: z.number().int(),
  requestedBy: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    subOrganizationId: "sub_organization_id",
    requestedBy: "requested_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DaoTakeoutCreate$ {
  /** @deprecated use `DaoTakeoutCreate$inboundSchema` instead. */
  export const inboundSchema = DaoTakeoutCreate$inboundSchema;
  /** @deprecated use `DaoTakeoutCreate$outboundSchema` instead. */
  export const outboundSchema = DaoTakeoutCreate$outboundSchema;
  /** @deprecated use `DaoTakeoutCreate$Outbound` instead. */
  export type Outbound = DaoTakeoutCreate$Outbound;
}

export function daoTakeoutCreateToJSON(
  daoTakeoutCreate: DaoTakeoutCreate,
): string {
  return JSON.stringify(
    DaoTakeoutCreate$outboundSchema.parse(daoTakeoutCreate),
  );
}

export function daoTakeoutCreateFromJSON(
  jsonString: string,
): SafeParseResult<DaoTakeoutCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DaoTakeoutCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DaoTakeoutCreate' from JSON`,
  );
}
