/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";

export type Variables = {};

export type Agent = {
  name: string;
  timezone: string;
  type: string;
  promptId: number;
  customMessageId: number | null;
  languages: Array<string>;
  promptToolDefaults?: Array<AgentToolDefaults> | undefined;
  toolHeaders?: { [k: string]: string } | null | undefined;
  variables?: Variables | null | undefined;
  /**
   * The Agent ID
   */
  id: number;
};

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Variables$Outbound = {};

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

export function variablesToJSON(variables: Variables): string {
  return JSON.stringify(Variables$outboundSchema.parse(variables));
}

export function variablesFromJSON(
  jsonString: string,
): SafeParseResult<Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variables' from JSON`,
  );
}

/** @internal */
export const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    timezone: z.string(),
    type: z.string(),
    prompt_id: z.number().int(),
    custom_message_id: z.nullable(z.number().int()),
    languages: z.array(z.string()),
    prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema).optional(),
    tool_headers: z.nullable(z.record(z.string())).optional(),
    variables: z.nullable(z.lazy(() => Variables$inboundSchema)).optional(),
    id: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_id": "promptId",
      "custom_message_id": "customMessageId",
      "prompt_tool_defaults": "promptToolDefaults",
      "tool_headers": "toolHeaders",
    });
  });

/** @internal */
export type Agent$Outbound = {
  name: string;
  timezone: string;
  type: string;
  prompt_id: number;
  custom_message_id: number | null;
  languages: Array<string>;
  prompt_tool_defaults?: Array<AgentToolDefaults$Outbound> | undefined;
  tool_headers?: { [k: string]: string } | null | undefined;
  variables?: Variables$Outbound | null | undefined;
  id: number;
};

/** @internal */
export const Agent$outboundSchema: z.ZodType<
  Agent$Outbound,
  z.ZodTypeDef,
  Agent
> = z.object({
  name: z.string(),
  timezone: z.string(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.nullable(z.number().int()),
  languages: z.array(z.string()),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema).optional(),
  toolHeaders: z.nullable(z.record(z.string())).optional(),
  variables: z.nullable(z.lazy(() => Variables$outboundSchema)).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agent$ {
  /** @deprecated use `Agent$inboundSchema` instead. */
  export const inboundSchema = Agent$inboundSchema;
  /** @deprecated use `Agent$outboundSchema` instead. */
  export const outboundSchema = Agent$outboundSchema;
  /** @deprecated use `Agent$Outbound` instead. */
  export type Outbound = Agent$Outbound;
}

export function agentToJSON(agent: Agent): string {
  return JSON.stringify(Agent$outboundSchema.parse(agent));
}

export function agentFromJSON(
  jsonString: string,
): SafeParseResult<Agent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agent' from JSON`,
  );
}
