/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";
import {
  Target,
  Target$inboundSchema,
  Target$Outbound,
  Target$outboundSchema,
} from "./target.js";

export type Agent = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  timezone: string;
  type: string;
  promptId: number;
  customMessageId: number | null;
  languages: Array<string>;
  promptToolDefaults?: Array<AgentToolDefaults> | undefined;
  toolHeaders?: { [k: string]: string } | null | undefined;
  variables?: { [k: string]: string } | null | undefined;
  /**
   * The Agent ID
   */
  id: number;
  updatedAt?: Date | null | undefined;
  channelTargets?: Array<Target> | null | undefined;
  lastUpdatedBy?: string | null | undefined;
};

/** @internal */
export const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    description: z.nullable(z.string()).optional(),
    label: z.nullable(z.string()).optional(),
    timezone: z.string(),
    type: z.string(),
    prompt_id: z.number().int(),
    custom_message_id: z.nullable(z.number().int()),
    languages: z.array(z.string()),
    prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema).optional(),
    tool_headers: z.nullable(z.record(z.string())).optional(),
    variables: z.nullable(z.record(z.string())).optional(),
    id: z.number().int(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    channel_targets: z.nullable(z.array(Target$inboundSchema)).optional(),
    last_updated_by: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_id": "promptId",
      "custom_message_id": "customMessageId",
      "prompt_tool_defaults": "promptToolDefaults",
      "tool_headers": "toolHeaders",
      "updated_at": "updatedAt",
      "channel_targets": "channelTargets",
      "last_updated_by": "lastUpdatedBy",
    });
  });

/** @internal */
export type Agent$Outbound = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  timezone: string;
  type: string;
  prompt_id: number;
  custom_message_id: number | null;
  languages: Array<string>;
  prompt_tool_defaults?: Array<AgentToolDefaults$Outbound> | undefined;
  tool_headers?: { [k: string]: string } | null | undefined;
  variables?: { [k: string]: string } | null | undefined;
  id: number;
  updated_at?: string | null | undefined;
  channel_targets?: Array<Target$Outbound> | null | undefined;
  last_updated_by?: string | null | undefined;
};

/** @internal */
export const Agent$outboundSchema: z.ZodType<
  Agent$Outbound,
  z.ZodTypeDef,
  Agent
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  timezone: z.string(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.nullable(z.number().int()),
  languages: z.array(z.string()),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema).optional(),
  toolHeaders: z.nullable(z.record(z.string())).optional(),
  variables: z.nullable(z.record(z.string())).optional(),
  id: z.number().int(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  channelTargets: z.nullable(z.array(Target$outboundSchema)).optional(),
  lastUpdatedBy: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
    updatedAt: "updated_at",
    channelTargets: "channel_targets",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agent$ {
  /** @deprecated use `Agent$inboundSchema` instead. */
  export const inboundSchema = Agent$inboundSchema;
  /** @deprecated use `Agent$outboundSchema` instead. */
  export const outboundSchema = Agent$outboundSchema;
  /** @deprecated use `Agent$Outbound` instead. */
  export type Outbound = Agent$Outbound;
}

export function agentToJSON(agent: Agent): string {
  return JSON.stringify(Agent$outboundSchema.parse(agent));
}

export function agentFromJSON(
  jsonString: string,
): SafeParseResult<Agent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agent' from JSON`,
  );
}
