/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type TypeExtra = {};

export type Variables = {};

export type Agent = {
  name: string;
  timezone: string;
  typeExtra: TypeExtra;
  variables?: Variables | null | undefined;
  /**
   * The Agent ID
   */
  id: number;
};

/** @internal */
export const TypeExtra$inboundSchema: z.ZodType<
  TypeExtra,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TypeExtra$Outbound = {};

/** @internal */
export const TypeExtra$outboundSchema: z.ZodType<
  TypeExtra$Outbound,
  z.ZodTypeDef,
  TypeExtra
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeExtra$ {
  /** @deprecated use `TypeExtra$inboundSchema` instead. */
  export const inboundSchema = TypeExtra$inboundSchema;
  /** @deprecated use `TypeExtra$outboundSchema` instead. */
  export const outboundSchema = TypeExtra$outboundSchema;
  /** @deprecated use `TypeExtra$Outbound` instead. */
  export type Outbound = TypeExtra$Outbound;
}

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Variables$Outbound = {};

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

/** @internal */
export const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    timezone: z.string(),
    type_extra: z.lazy(() => TypeExtra$inboundSchema),
    variables: z.nullable(z.lazy(() => Variables$inboundSchema)).optional(),
    id: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "type_extra": "typeExtra",
    });
  });

/** @internal */
export type Agent$Outbound = {
  name: string;
  timezone: string;
  type_extra: TypeExtra$Outbound;
  variables?: Variables$Outbound | null | undefined;
  id: number;
};

/** @internal */
export const Agent$outboundSchema: z.ZodType<
  Agent$Outbound,
  z.ZodTypeDef,
  Agent
> = z.object({
  name: z.string(),
  timezone: z.string(),
  typeExtra: z.lazy(() => TypeExtra$outboundSchema),
  variables: z.nullable(z.lazy(() => Variables$outboundSchema)).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    typeExtra: "type_extra",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agent$ {
  /** @deprecated use `Agent$inboundSchema` instead. */
  export const inboundSchema = Agent$inboundSchema;
  /** @deprecated use `Agent$outboundSchema` instead. */
  export const outboundSchema = Agent$outboundSchema;
  /** @deprecated use `Agent$Outbound` instead. */
  export type Outbound = Agent$Outbound;
}
