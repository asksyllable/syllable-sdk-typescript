/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolAuthType,
  ToolAuthType$inboundSchema,
  ToolAuthType$outboundSchema,
} from "./toolauthtype.js";

/**
 * Request model to create a service.
 */
export type ServiceCreateRequest = {
  /**
   * The name of the service
   */
  name: string;
  /**
   * The description of the service
   */
  description: string;
  /**
   * The type of authentication to use for the service's tools
   */
  authType?: ToolAuthType | null | undefined;
  /**
   * The values to use for the authentication, as a dict. Should contain "username" and "password" keys if auth type is basic, "token" key if auth type is bearer, arbitrary header keys if auth type is custom_headers. or "client_id", "client_secret", and "auth_url" keys if auth type is oauth2. On an update, leave a value for a given key null and the value in the database will not be updated. (If a key is omitted entirely, any existing value for that key will be removed.)
   */
  authValues?: any | null | undefined;
};

/** @internal */
export const ServiceCreateRequest$inboundSchema: z.ZodType<
  ServiceCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  auth_type: z.nullable(ToolAuthType$inboundSchema).optional(),
  auth_values: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_type": "authType",
    "auth_values": "authValues",
  });
});

/** @internal */
export type ServiceCreateRequest$Outbound = {
  name: string;
  description: string;
  auth_type?: string | null | undefined;
  auth_values?: any | null | undefined;
};

/** @internal */
export const ServiceCreateRequest$outboundSchema: z.ZodType<
  ServiceCreateRequest$Outbound,
  z.ZodTypeDef,
  ServiceCreateRequest
> = z.object({
  name: z.string(),
  description: z.string(),
  authType: z.nullable(ToolAuthType$outboundSchema).optional(),
  authValues: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    authType: "auth_type",
    authValues: "auth_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCreateRequest$ {
  /** @deprecated use `ServiceCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceCreateRequest$inboundSchema;
  /** @deprecated use `ServiceCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceCreateRequest$outboundSchema;
  /** @deprecated use `ServiceCreateRequest$Outbound` instead. */
  export type Outbound = ServiceCreateRequest$Outbound;
}

export function serviceCreateRequestToJSON(
  serviceCreateRequest: ServiceCreateRequest,
): string {
  return JSON.stringify(
    ServiceCreateRequest$outboundSchema.parse(serviceCreateRequest),
  );
}

export function serviceCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceCreateRequest' from JSON`,
  );
}
