/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SDKToolDefinition,
  SDKToolDefinition$inboundSchema,
  SDKToolDefinition$Outbound,
  SDKToolDefinition$outboundSchema,
} from "./sdktooldefinition.js";

export type ToolUpdate = {
  /**
   * The name of the tool
   */
  name: string;
  definition: SDKToolDefinition;
  /**
   * The service this tool belongs to
   */
  serviceId: number;
  /**
   * The ID of the tool
   */
  id: number;
};

/** @internal */
export const ToolUpdate$inboundSchema: z.ZodType<
  ToolUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  definition: SDKToolDefinition$inboundSchema,
  service_id: z.number().int(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type ToolUpdate$Outbound = {
  name: string;
  definition: SDKToolDefinition$Outbound;
  service_id: number;
  id: number;
};

/** @internal */
export const ToolUpdate$outboundSchema: z.ZodType<
  ToolUpdate$Outbound,
  z.ZodTypeDef,
  ToolUpdate
> = z.object({
  name: z.string(),
  definition: SDKToolDefinition$outboundSchema,
  serviceId: z.number().int(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolUpdate$ {
  /** @deprecated use `ToolUpdate$inboundSchema` instead. */
  export const inboundSchema = ToolUpdate$inboundSchema;
  /** @deprecated use `ToolUpdate$outboundSchema` instead. */
  export const outboundSchema = ToolUpdate$outboundSchema;
  /** @deprecated use `ToolUpdate$Outbound` instead. */
  export type Outbound = ToolUpdate$Outbound;
}

export function toolUpdateToJSON(toolUpdate: ToolUpdate): string {
  return JSON.stringify(ToolUpdate$outboundSchema.parse(toolUpdate));
}

export function toolUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ToolUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolUpdate' from JSON`,
  );
}
