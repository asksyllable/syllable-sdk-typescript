/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Conversation = {
  timestamp: Date;
  conversationId: string;
  sessionId?: string | null | undefined;
  agentId?: string | null | undefined;
  agentName?: string | null | undefined;
  agentType?: string | null | undefined;
  promptId?: string | null | undefined;
  promptName?: string | null | undefined;
  promptVersion?: string | null | undefined;
  callId?: string | null | undefined;
  source?: string | null | undefined;
  target?: string | null | undefined;
  isLegacy?: boolean | null | undefined;
  isTest?: boolean | null | undefined;
};

/** @internal */
export const Conversation$inboundSchema: z.ZodType<
  Conversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  conversation_id: z.string(),
  session_id: z.nullable(z.string()).optional(),
  agent_id: z.nullable(z.string()).optional(),
  agent_name: z.nullable(z.string()).optional(),
  agent_type: z.nullable(z.string()).optional(),
  prompt_id: z.nullable(z.string()).optional(),
  prompt_name: z.nullable(z.string()).optional(),
  prompt_version: z.nullable(z.string()).optional(),
  call_id: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  target: z.nullable(z.string()).optional(),
  is_legacy: z.nullable(z.boolean()).optional(),
  is_test: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
    "session_id": "sessionId",
    "agent_id": "agentId",
    "agent_name": "agentName",
    "agent_type": "agentType",
    "prompt_id": "promptId",
    "prompt_name": "promptName",
    "prompt_version": "promptVersion",
    "call_id": "callId",
    "is_legacy": "isLegacy",
    "is_test": "isTest",
  });
});

/** @internal */
export type Conversation$Outbound = {
  timestamp: string;
  conversation_id: string;
  session_id?: string | null | undefined;
  agent_id?: string | null | undefined;
  agent_name?: string | null | undefined;
  agent_type?: string | null | undefined;
  prompt_id?: string | null | undefined;
  prompt_name?: string | null | undefined;
  prompt_version?: string | null | undefined;
  call_id?: string | null | undefined;
  source?: string | null | undefined;
  target?: string | null | undefined;
  is_legacy?: boolean | null | undefined;
  is_test?: boolean | null | undefined;
};

/** @internal */
export const Conversation$outboundSchema: z.ZodType<
  Conversation$Outbound,
  z.ZodTypeDef,
  Conversation
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  conversationId: z.string(),
  sessionId: z.nullable(z.string()).optional(),
  agentId: z.nullable(z.string()).optional(),
  agentName: z.nullable(z.string()).optional(),
  agentType: z.nullable(z.string()).optional(),
  promptId: z.nullable(z.string()).optional(),
  promptName: z.nullable(z.string()).optional(),
  promptVersion: z.nullable(z.string()).optional(),
  callId: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  target: z.nullable(z.string()).optional(),
  isLegacy: z.nullable(z.boolean()).optional(),
  isTest: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
    sessionId: "session_id",
    agentId: "agent_id",
    agentName: "agent_name",
    agentType: "agent_type",
    promptId: "prompt_id",
    promptName: "prompt_name",
    promptVersion: "prompt_version",
    callId: "call_id",
    isLegacy: "is_legacy",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conversation$ {
  /** @deprecated use `Conversation$inboundSchema` instead. */
  export const inboundSchema = Conversation$inboundSchema;
  /** @deprecated use `Conversation$outboundSchema` instead. */
  export const outboundSchema = Conversation$outboundSchema;
  /** @deprecated use `Conversation$Outbound` instead. */
  export type Outbound = Conversation$Outbound;
}
