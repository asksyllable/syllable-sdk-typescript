/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolResult = {};

export type ToolResultData = {
  toolName: string;
  toolResult: ToolResult;
};

/** @internal */
export const ToolResult$inboundSchema: z.ZodType<
  ToolResult,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolResult$Outbound = {};

/** @internal */
export const ToolResult$outboundSchema: z.ZodType<
  ToolResult$Outbound,
  z.ZodTypeDef,
  ToolResult
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResult$ {
  /** @deprecated use `ToolResult$inboundSchema` instead. */
  export const inboundSchema = ToolResult$inboundSchema;
  /** @deprecated use `ToolResult$outboundSchema` instead. */
  export const outboundSchema = ToolResult$outboundSchema;
  /** @deprecated use `ToolResult$Outbound` instead. */
  export type Outbound = ToolResult$Outbound;
}

export function toolResultToJSON(toolResult: ToolResult): string {
  return JSON.stringify(ToolResult$outboundSchema.parse(toolResult));
}

export function toolResultFromJSON(
  jsonString: string,
): SafeParseResult<ToolResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResult' from JSON`,
  );
}

/** @internal */
export const ToolResultData$inboundSchema: z.ZodType<
  ToolResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_name: z.string(),
  tool_result: z.lazy(() => ToolResult$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "tool_name": "toolName",
    "tool_result": "toolResult",
  });
});

/** @internal */
export type ToolResultData$Outbound = {
  tool_name: string;
  tool_result: ToolResult$Outbound;
};

/** @internal */
export const ToolResultData$outboundSchema: z.ZodType<
  ToolResultData$Outbound,
  z.ZodTypeDef,
  ToolResultData
> = z.object({
  toolName: z.string(),
  toolResult: z.lazy(() => ToolResult$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    toolName: "tool_name",
    toolResult: "tool_result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResultData$ {
  /** @deprecated use `ToolResultData$inboundSchema` instead. */
  export const inboundSchema = ToolResultData$inboundSchema;
  /** @deprecated use `ToolResultData$outboundSchema` instead. */
  export const outboundSchema = ToolResultData$outboundSchema;
  /** @deprecated use `ToolResultData$Outbound` instead. */
  export type Outbound = ToolResultData$Outbound;
}

export function toolResultDataToJSON(toolResultData: ToolResultData): string {
  return JSON.stringify(ToolResultData$outboundSchema.parse(toolResultData));
}

export function toolResultDataFromJSON(
  jsonString: string,
): SafeParseResult<ToolResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResultData' from JSON`,
  );
}
