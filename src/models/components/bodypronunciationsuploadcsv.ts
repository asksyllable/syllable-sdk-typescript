/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BodyPronunciationsUploadCsvFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyPronunciationsUploadCsv = {
  /**
   * CSV file containing pronunciation overrides
   */
  file: BodyPronunciationsUploadCsvFile | Blob;
};

/** @internal */
export const BodyPronunciationsUploadCsvFile$inboundSchema: z.ZodType<
  BodyPronunciationsUploadCsvFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type BodyPronunciationsUploadCsvFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const BodyPronunciationsUploadCsvFile$outboundSchema: z.ZodType<
  BodyPronunciationsUploadCsvFile$Outbound,
  z.ZodTypeDef,
  BodyPronunciationsUploadCsvFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyPronunciationsUploadCsvFile$ {
  /** @deprecated use `BodyPronunciationsUploadCsvFile$inboundSchema` instead. */
  export const inboundSchema = BodyPronunciationsUploadCsvFile$inboundSchema;
  /** @deprecated use `BodyPronunciationsUploadCsvFile$outboundSchema` instead. */
  export const outboundSchema = BodyPronunciationsUploadCsvFile$outboundSchema;
  /** @deprecated use `BodyPronunciationsUploadCsvFile$Outbound` instead. */
  export type Outbound = BodyPronunciationsUploadCsvFile$Outbound;
}

export function bodyPronunciationsUploadCsvFileToJSON(
  bodyPronunciationsUploadCsvFile: BodyPronunciationsUploadCsvFile,
): string {
  return JSON.stringify(
    BodyPronunciationsUploadCsvFile$outboundSchema.parse(
      bodyPronunciationsUploadCsvFile,
    ),
  );
}

export function bodyPronunciationsUploadCsvFileFromJSON(
  jsonString: string,
): SafeParseResult<BodyPronunciationsUploadCsvFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyPronunciationsUploadCsvFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyPronunciationsUploadCsvFile' from JSON`,
  );
}

/** @internal */
export const BodyPronunciationsUploadCsv$inboundSchema: z.ZodType<
  BodyPronunciationsUploadCsv,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => BodyPronunciationsUploadCsvFile$inboundSchema),
});

/** @internal */
export type BodyPronunciationsUploadCsv$Outbound = {
  file: BodyPronunciationsUploadCsvFile$Outbound | Blob;
};

/** @internal */
export const BodyPronunciationsUploadCsv$outboundSchema: z.ZodType<
  BodyPronunciationsUploadCsv$Outbound,
  z.ZodTypeDef,
  BodyPronunciationsUploadCsv
> = z.object({
  file: z.lazy(() => BodyPronunciationsUploadCsvFile$outboundSchema).or(
    blobLikeSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyPronunciationsUploadCsv$ {
  /** @deprecated use `BodyPronunciationsUploadCsv$inboundSchema` instead. */
  export const inboundSchema = BodyPronunciationsUploadCsv$inboundSchema;
  /** @deprecated use `BodyPronunciationsUploadCsv$outboundSchema` instead. */
  export const outboundSchema = BodyPronunciationsUploadCsv$outboundSchema;
  /** @deprecated use `BodyPronunciationsUploadCsv$Outbound` instead. */
  export type Outbound = BodyPronunciationsUploadCsv$Outbound;
}

export function bodyPronunciationsUploadCsvToJSON(
  bodyPronunciationsUploadCsv: BodyPronunciationsUploadCsv,
): string {
  return JSON.stringify(
    BodyPronunciationsUploadCsv$outboundSchema.parse(
      bodyPronunciationsUploadCsv,
    ),
  );
}

export function bodyPronunciationsUploadCsvFromJSON(
  jsonString: string,
): SafeParseResult<BodyPronunciationsUploadCsv, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyPronunciationsUploadCsv$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyPronunciationsUploadCsv' from JSON`,
  );
}
