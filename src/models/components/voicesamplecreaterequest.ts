/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentVoiceDisplayName,
  AgentVoiceDisplayName$inboundSchema,
  AgentVoiceDisplayName$outboundSchema,
} from "./agentvoicedisplayname.js";
import {
  LanguageCode,
  LanguageCode$inboundSchema,
  LanguageCode$outboundSchema,
} from "./languagecode.js";
import {
  TtsProvider,
  TtsProvider$inboundSchema,
  TtsProvider$outboundSchema,
} from "./ttsprovider.js";

/**
 * Request model to generate a sample audio file for a given voice and language.
 */
export type VoiceSampleCreateRequest = {
  /**
   * BCP 47 codes of languages that Syllable supports.
   */
  languageCode: LanguageCode;
  /**
   * TTS provider for an agent voice.
   */
  voiceProvider: TtsProvider;
  /**
   * Display names of voices that Syllable supports.
   */
  voiceDisplayName: AgentVoiceDisplayName;
  /**
   * Speed of the voice in the range of 0.25 to 4.0 (OpenAI and Google) or 0.7 to 1.2 (ElevenLabs). Standard speed is 1.0.
   */
  voiceSpeed?: number | null | undefined;
  /**
   * Pitch of the voice in the range of -20.0 to 20.0. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch. 0 means use the original pitch. Only supported for Google configs.
   */
  voicePitch?: number | null | undefined;
  /**
   * Text to generate for this voice.
   */
  text?: string | undefined;
  /**
   * Apply TTS pronunciation fixes.
   */
  applyPronunciationOverrides?: boolean | undefined;
};

/** @internal */
export const VoiceSampleCreateRequest$inboundSchema: z.ZodType<
  VoiceSampleCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  language_code: LanguageCode$inboundSchema,
  voice_provider: TtsProvider$inboundSchema,
  voice_display_name: AgentVoiceDisplayName$inboundSchema,
  voice_speed: z.nullable(z.number()).optional(),
  voice_pitch: z.nullable(z.number()).optional(),
  text: z.string().default(""),
  apply_pronunciation_overrides: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "language_code": "languageCode",
    "voice_provider": "voiceProvider",
    "voice_display_name": "voiceDisplayName",
    "voice_speed": "voiceSpeed",
    "voice_pitch": "voicePitch",
    "apply_pronunciation_overrides": "applyPronunciationOverrides",
  });
});

/** @internal */
export type VoiceSampleCreateRequest$Outbound = {
  language_code: string;
  voice_provider: string;
  voice_display_name: string;
  voice_speed?: number | null | undefined;
  voice_pitch?: number | null | undefined;
  text: string;
  apply_pronunciation_overrides: boolean;
};

/** @internal */
export const VoiceSampleCreateRequest$outboundSchema: z.ZodType<
  VoiceSampleCreateRequest$Outbound,
  z.ZodTypeDef,
  VoiceSampleCreateRequest
> = z.object({
  languageCode: LanguageCode$outboundSchema,
  voiceProvider: TtsProvider$outboundSchema,
  voiceDisplayName: AgentVoiceDisplayName$outboundSchema,
  voiceSpeed: z.nullable(z.number()).optional(),
  voicePitch: z.nullable(z.number()).optional(),
  text: z.string().default(""),
  applyPronunciationOverrides: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    languageCode: "language_code",
    voiceProvider: "voice_provider",
    voiceDisplayName: "voice_display_name",
    voiceSpeed: "voice_speed",
    voicePitch: "voice_pitch",
    applyPronunciationOverrides: "apply_pronunciation_overrides",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceSampleCreateRequest$ {
  /** @deprecated use `VoiceSampleCreateRequest$inboundSchema` instead. */
  export const inboundSchema = VoiceSampleCreateRequest$inboundSchema;
  /** @deprecated use `VoiceSampleCreateRequest$outboundSchema` instead. */
  export const outboundSchema = VoiceSampleCreateRequest$outboundSchema;
  /** @deprecated use `VoiceSampleCreateRequest$Outbound` instead. */
  export type Outbound = VoiceSampleCreateRequest$Outbound;
}

export function voiceSampleCreateRequestToJSON(
  voiceSampleCreateRequest: VoiceSampleCreateRequest,
): string {
  return JSON.stringify(
    VoiceSampleCreateRequest$outboundSchema.parse(voiceSampleCreateRequest),
  );
}

export function voiceSampleCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<VoiceSampleCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoiceSampleCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoiceSampleCreateRequest' from JSON`,
  );
}
