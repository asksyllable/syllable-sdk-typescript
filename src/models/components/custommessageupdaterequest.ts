/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomMessageRule,
  CustomMessageRule$inboundSchema,
  CustomMessageRule$Outbound,
  CustomMessageRule$outboundSchema,
} from "./custommessagerule.js";

/**
 * Request model to update an existing custom message.
 */
export type CustomMessageUpdateRequest = {
  /**
   * The name of the custom message
   */
  name: string;
  /**
   * The default message that the agent will deliver if no rules are set or no rules match the current timestamp.
   */
  text: string;
  /**
   * The label of the custom message
   */
  label?: string | null | undefined;
  /**
   * Rules for time-specific message variants
   */
  rules?: Array<CustomMessageRule> | undefined;
  /**
   * The ID of the custom message
   */
  id: number;
  /**
   * Type of the custom message (must be "greeting" for now)
   */
  type?: string | undefined;
};

/** @internal */
export const CustomMessageUpdateRequest$inboundSchema: z.ZodType<
  CustomMessageUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  text: z.string(),
  label: z.nullable(z.string()).optional(),
  rules: z.array(CustomMessageRule$inboundSchema).optional(),
  id: z.number().int(),
  type: z.string().default("greeting"),
});

/** @internal */
export type CustomMessageUpdateRequest$Outbound = {
  name: string;
  text: string;
  label?: string | null | undefined;
  rules?: Array<CustomMessageRule$Outbound> | undefined;
  id: number;
  type: string;
};

/** @internal */
export const CustomMessageUpdateRequest$outboundSchema: z.ZodType<
  CustomMessageUpdateRequest$Outbound,
  z.ZodTypeDef,
  CustomMessageUpdateRequest
> = z.object({
  name: z.string(),
  text: z.string(),
  label: z.nullable(z.string()).optional(),
  rules: z.array(CustomMessageRule$outboundSchema).optional(),
  id: z.number().int(),
  type: z.string().default("greeting"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMessageUpdateRequest$ {
  /** @deprecated use `CustomMessageUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CustomMessageUpdateRequest$inboundSchema;
  /** @deprecated use `CustomMessageUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CustomMessageUpdateRequest$outboundSchema;
  /** @deprecated use `CustomMessageUpdateRequest$Outbound` instead. */
  export type Outbound = CustomMessageUpdateRequest$Outbound;
}

export function customMessageUpdateRequestToJSON(
  customMessageUpdateRequest: CustomMessageUpdateRequest,
): string {
  return JSON.stringify(
    CustomMessageUpdateRequest$outboundSchema.parse(customMessageUpdateRequest),
  );
}

export function customMessageUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomMessageUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMessageUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMessageUpdateRequest' from JSON`,
  );
}
