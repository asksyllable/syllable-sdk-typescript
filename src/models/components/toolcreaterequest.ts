/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolDefinition,
  ToolDefinition$inboundSchema,
  ToolDefinition$Outbound,
  ToolDefinition$outboundSchema,
} from "./tooldefinition.js";

export type ToolCreateRequest = {
  /**
   * The name of the tool
   */
  name: string;
  /**
   * A tool that can be called from an LLM during the conversation.
   */
  definition: ToolDefinition;
  /**
   * The service to which this tool belongs
   */
  serviceId: number;
};

/** @internal */
export const ToolCreateRequest$inboundSchema: z.ZodType<
  ToolCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  definition: ToolDefinition$inboundSchema,
  service_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type ToolCreateRequest$Outbound = {
  name: string;
  definition: ToolDefinition$Outbound;
  service_id: number;
};

/** @internal */
export const ToolCreateRequest$outboundSchema: z.ZodType<
  ToolCreateRequest$Outbound,
  z.ZodTypeDef,
  ToolCreateRequest
> = z.object({
  name: z.string(),
  definition: ToolDefinition$outboundSchema,
  serviceId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCreateRequest$ {
  /** @deprecated use `ToolCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ToolCreateRequest$inboundSchema;
  /** @deprecated use `ToolCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ToolCreateRequest$outboundSchema;
  /** @deprecated use `ToolCreateRequest$Outbound` instead. */
  export type Outbound = ToolCreateRequest$Outbound;
}

export function toolCreateRequestToJSON(
  toolCreateRequest: ToolCreateRequest,
): string {
  return JSON.stringify(
    ToolCreateRequest$outboundSchema.parse(toolCreateRequest),
  );
}

export function toolCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCreateRequest' from JSON`,
  );
}
