/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Information about a role.
 */
export type RoleResponse = {
  /**
   * The name of the role.
   */
  name: string;
  /**
   * The description of the role.
   */
  description?: string | null | undefined;
  /**
   * The permissions associated with the role. Available permissions can be found by calling `GET /permissions`.
   */
  permissions: Array<string>;
  /**
   * The internal ID of the role.
   */
  id: number;
  /**
   * Comments for the most recent edit to the role.
   */
  lastUpdatedComments?: string | null | undefined;
  /**
   * Whether this is a built-in system role that cannot be updated or deleted
   */
  isSystemRole: boolean;
  /**
   * The timestamp of the most recent update to the role
   */
  lastUpdated: Date;
  /**
   * The email of the user who last updated the role
   */
  lastUpdatedBy: string;
};

/** @internal */
export const RoleResponse$inboundSchema: z.ZodType<
  RoleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
  id: z.number().int(),
  last_updated_comments: z.nullable(z.string()).optional(),
  is_system_role: z.boolean(),
  last_updated: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "last_updated_comments": "lastUpdatedComments",
    "is_system_role": "isSystemRole",
    "last_updated": "lastUpdated",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type RoleResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  permissions: Array<string>;
  id: number;
  last_updated_comments?: string | null | undefined;
  is_system_role: boolean;
  last_updated: string;
  last_updated_by: string;
};

/** @internal */
export const RoleResponse$outboundSchema: z.ZodType<
  RoleResponse$Outbound,
  z.ZodTypeDef,
  RoleResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
  id: z.number().int(),
  lastUpdatedComments: z.nullable(z.string()).optional(),
  isSystemRole: z.boolean(),
  lastUpdated: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    lastUpdatedComments: "last_updated_comments",
    isSystemRole: "is_system_role",
    lastUpdated: "last_updated",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleResponse$ {
  /** @deprecated use `RoleResponse$inboundSchema` instead. */
  export const inboundSchema = RoleResponse$inboundSchema;
  /** @deprecated use `RoleResponse$outboundSchema` instead. */
  export const outboundSchema = RoleResponse$outboundSchema;
  /** @deprecated use `RoleResponse$Outbound` instead. */
  export type Outbound = RoleResponse$Outbound;
}

export function roleResponseToJSON(roleResponse: RoleResponse): string {
  return JSON.stringify(RoleResponse$outboundSchema.parse(roleResponse));
}

export function roleResponseFromJSON(
  jsonString: string,
): SafeParseResult<RoleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleResponse' from JSON`,
  );
}
