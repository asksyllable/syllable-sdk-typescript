/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Logo = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyOrganizationsUpdate = {
  /**
   * The human-readable display name of the organization
   */
  displayName: string;
  /**
   * Description of the organization
   */
  description?: string | null | undefined;
  /**
   * Comma-delimited list of domains that users at the organization may have in their email addresses
   */
  domains?: string | null | undefined;
  /**
   * The organization logo image file to upload. Must be a PNG file and 120x120 pixels. If not provided, the logo will not be updated.
   */
  logo?: Logo | Blob | undefined;
  /**
   * SAML provider ID for user authentication
   */
  samlProviderId?: string | null | undefined;
  /**
   * Comments about the update
   */
  updateComments?: string | null | undefined;
};

/** @internal */
export const Logo$inboundSchema: z.ZodType<Logo, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type Logo$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Logo$outboundSchema: z.ZodType<Logo$Outbound, z.ZodTypeDef, Logo> =
  z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Logo$ {
  /** @deprecated use `Logo$inboundSchema` instead. */
  export const inboundSchema = Logo$inboundSchema;
  /** @deprecated use `Logo$outboundSchema` instead. */
  export const outboundSchema = Logo$outboundSchema;
  /** @deprecated use `Logo$Outbound` instead. */
  export type Outbound = Logo$Outbound;
}

export function logoToJSON(logo: Logo): string {
  return JSON.stringify(Logo$outboundSchema.parse(logo));
}

export function logoFromJSON(
  jsonString: string,
): SafeParseResult<Logo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Logo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Logo' from JSON`,
  );
}

/** @internal */
export const BodyOrganizationsUpdate$inboundSchema: z.ZodType<
  BodyOrganizationsUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.nullable(z.string()).optional(),
  logo: z.lazy(() => Logo$inboundSchema).optional(),
  saml_provider_id: z.nullable(z.string()).optional(),
  update_comments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "saml_provider_id": "samlProviderId",
    "update_comments": "updateComments",
  });
});

/** @internal */
export type BodyOrganizationsUpdate$Outbound = {
  display_name: string;
  description?: string | null | undefined;
  domains?: string | null | undefined;
  logo?: Logo$Outbound | Blob | undefined;
  saml_provider_id?: string | null | undefined;
  update_comments?: string | null | undefined;
};

/** @internal */
export const BodyOrganizationsUpdate$outboundSchema: z.ZodType<
  BodyOrganizationsUpdate$Outbound,
  z.ZodTypeDef,
  BodyOrganizationsUpdate
> = z.object({
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.nullable(z.string()).optional(),
  logo: z.lazy(() => Logo$outboundSchema).or(blobLikeSchema).optional(),
  samlProviderId: z.nullable(z.string()).optional(),
  updateComments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    samlProviderId: "saml_provider_id",
    updateComments: "update_comments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOrganizationsUpdate$ {
  /** @deprecated use `BodyOrganizationsUpdate$inboundSchema` instead. */
  export const inboundSchema = BodyOrganizationsUpdate$inboundSchema;
  /** @deprecated use `BodyOrganizationsUpdate$outboundSchema` instead. */
  export const outboundSchema = BodyOrganizationsUpdate$outboundSchema;
  /** @deprecated use `BodyOrganizationsUpdate$Outbound` instead. */
  export type Outbound = BodyOrganizationsUpdate$Outbound;
}

export function bodyOrganizationsUpdateToJSON(
  bodyOrganizationsUpdate: BodyOrganizationsUpdate,
): string {
  return JSON.stringify(
    BodyOrganizationsUpdate$outboundSchema.parse(bodyOrganizationsUpdate),
  );
}

export function bodyOrganizationsUpdateFromJSON(
  jsonString: string,
): SafeParseResult<BodyOrganizationsUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOrganizationsUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOrganizationsUpdate' from JSON`,
  );
}
