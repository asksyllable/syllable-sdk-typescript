/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";
import {
  ChannelTargetResponse,
  ChannelTargetResponse$inboundSchema,
  ChannelTargetResponse$Outbound,
  ChannelTargetResponse$outboundSchema,
} from "./channeltargetresponse.js";
import {
  CustomMessageResponse,
  CustomMessageResponse$inboundSchema,
  CustomMessageResponse$Outbound,
  CustomMessageResponse$outboundSchema,
} from "./custommessageresponse.js";
import {
  LanguageGroupResponse,
  LanguageGroupResponse$inboundSchema,
  LanguageGroupResponse$Outbound,
  LanguageGroupResponse$outboundSchema,
} from "./languagegroupresponse.js";
import {
  PromptResponse,
  PromptResponse$inboundSchema,
  PromptResponse$Outbound,
  PromptResponse$outboundSchema,
} from "./promptresponse.js";
import {
  ToolResponse,
  ToolResponse$inboundSchema,
  ToolResponse$Outbound,
  ToolResponse$outboundSchema,
} from "./toolresponse.js";

/**
 * When a user interacts with the Syllable system, they do so by communicating with an agent.
 *
 * @remarks
 * An agent is linked to a prompt, a custom message, and one or more channel targets to define its
 * behavior and capabilities.
 */
export type AgentResponse = {
  /**
   * The agent name
   */
  name: string;
  /**
   * The agent description
   */
  description?: string | null | undefined;
  /**
   * The agent label
   */
  label?: string | null | undefined;
  /**
   * The agent type. Can be an arbitrary string
   */
  type: string;
  /**
   * ID of the prompt associated with the agent
   */
  promptId: number;
  /**
   * ID of the custom message that should be delivered at the beginning of a conversation with the agent
   */
  customMessageId: number;
  /**
   * ID of the language group associated with the agent
   */
  languageGroupId?: number | null | undefined;
  /**
   * The time zone in which the agent operates
   */
  timezone: string;
  /**
   * User-configured parameter values for the agent's tools
   */
  promptToolDefaults?: Array<AgentToolDefaults> | undefined;
  /**
   * BCP 47 codes of languages the agent supports
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  languages?: Array<string> | undefined;
  /**
   * Custom context variables for the conversation session. Keys should be prefixed with "vars.".
   */
  variables: { [k: string]: string };
  /**
   * Optional headers to include in tool calls for agent.
   */
  toolHeaders: { [k: string]: string } | null;
  /**
   * Whether the agent initiates conversation with a user after the custom_message is delivered
   */
  agentInitiated?: boolean | undefined;
  /**
   * The agent ID
   */
  id: number;
  /**
   * Timestamp of most recent update
   */
  updatedAt: Date;
  /**
   * Email of the user who last updated the agent
   */
  lastUpdatedBy: string | null;
  /**
   * The prompt associated with the agent.
   */
  prompt?: PromptResponse | null | undefined;
  /**
   * The custom message associated with the agent. Will be delivered as a greeting at the beginning of a conversation.
   */
  customMessage?: CustomMessageResponse | null | undefined;
  /**
   * Channel targets associated with the agent
   */
  channelTargets?: Array<ChannelTargetResponse> | null | undefined;
  /**
   * Tools associated with the agent
   */
  tools?: Array<ToolResponse> | null | undefined;
  /**
   * The language group associated with the agent
   */
  languageGroup?: LanguageGroupResponse | null | undefined;
};

/** @internal */
export const AgentResponse$inboundSchema: z.ZodType<
  AgentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  prompt_id: z.number().int(),
  custom_message_id: z.number().int(),
  language_group_id: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.record(z.string()),
  tool_headers: z.nullable(z.record(z.string())),
  agent_initiated: z.boolean().default(false),
  id: z.number().int(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  last_updated_by: z.nullable(z.string()),
  prompt: z.nullable(PromptResponse$inboundSchema).optional(),
  custom_message: z.nullable(CustomMessageResponse$inboundSchema).optional(),
  channel_targets: z.nullable(
    z.array(z.lazy(() => ChannelTargetResponse$inboundSchema)),
  ).optional(),
  tools: z.nullable(z.array(ToolResponse$inboundSchema)).optional(),
  language_group: z.nullable(LanguageGroupResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_id": "promptId",
    "custom_message_id": "customMessageId",
    "language_group_id": "languageGroupId",
    "prompt_tool_defaults": "promptToolDefaults",
    "tool_headers": "toolHeaders",
    "agent_initiated": "agentInitiated",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
    "custom_message": "customMessage",
    "channel_targets": "channelTargets",
    "language_group": "languageGroup",
  });
});

/** @internal */
export type AgentResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  type: string;
  prompt_id: number;
  custom_message_id: number;
  language_group_id?: number | null | undefined;
  timezone: string;
  prompt_tool_defaults?: Array<AgentToolDefaults$Outbound> | undefined;
  languages?: Array<string> | undefined;
  variables: { [k: string]: string };
  tool_headers: { [k: string]: string } | null;
  agent_initiated: boolean;
  id: number;
  updated_at: string;
  last_updated_by: string | null;
  prompt?: PromptResponse$Outbound | null | undefined;
  custom_message?: CustomMessageResponse$Outbound | null | undefined;
  channel_targets?: Array<ChannelTargetResponse$Outbound> | null | undefined;
  tools?: Array<ToolResponse$Outbound> | null | undefined;
  language_group?: LanguageGroupResponse$Outbound | null | undefined;
};

/** @internal */
export const AgentResponse$outboundSchema: z.ZodType<
  AgentResponse$Outbound,
  z.ZodTypeDef,
  AgentResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.number().int(),
  languageGroupId: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.record(z.string()),
  toolHeaders: z.nullable(z.record(z.string())),
  agentInitiated: z.boolean().default(false),
  id: z.number().int(),
  updatedAt: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.nullable(z.string()),
  prompt: z.nullable(PromptResponse$outboundSchema).optional(),
  customMessage: z.nullable(CustomMessageResponse$outboundSchema).optional(),
  channelTargets: z.nullable(
    z.array(z.lazy(() => ChannelTargetResponse$outboundSchema)),
  ).optional(),
  tools: z.nullable(z.array(ToolResponse$outboundSchema)).optional(),
  languageGroup: z.nullable(LanguageGroupResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    languageGroupId: "language_group_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
    agentInitiated: "agent_initiated",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
    customMessage: "custom_message",
    channelTargets: "channel_targets",
    languageGroup: "language_group",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentResponse$ {
  /** @deprecated use `AgentResponse$inboundSchema` instead. */
  export const inboundSchema = AgentResponse$inboundSchema;
  /** @deprecated use `AgentResponse$outboundSchema` instead. */
  export const outboundSchema = AgentResponse$outboundSchema;
  /** @deprecated use `AgentResponse$Outbound` instead. */
  export type Outbound = AgentResponse$Outbound;
}

export function agentResponseToJSON(agentResponse: AgentResponse): string {
  return JSON.stringify(AgentResponse$outboundSchema.parse(agentResponse));
}

export function agentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AgentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentResponse' from JSON`,
  );
}
