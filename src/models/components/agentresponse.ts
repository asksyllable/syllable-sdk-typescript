/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";
import {
  Greeting,
  Greeting$inboundSchema,
  Greeting$Outbound,
  Greeting$outboundSchema,
} from "./greeting.js";
import {
  Prompt,
  Prompt$inboundSchema,
  Prompt$Outbound,
  Prompt$outboundSchema,
} from "./prompt.js";
import {
  Target,
  Target$inboundSchema,
  Target$Outbound,
  Target$outboundSchema,
} from "./target.js";

export type AgentResponse = {
  /**
   * The Agent name
   */
  name: string;
  /**
   * The Agent description
   */
  description?: string | null | undefined;
  /**
   * The Agent label
   */
  label?: string | null | undefined;
  /**
   * The Agent type
   */
  type: string;
  /**
   * The Agent's prompt id
   */
  promptId: number;
  /**
   * The Agent's custom message id
   */
  customMessageId?: number | null | undefined;
  /**
   * The time zone the bot operates in
   */
  timezone: string;
  promptToolDefaults: Array<AgentToolDefaults>;
  languages: Array<string>;
  variables: { [k: string]: string };
  /**
   * Optional headers to include in tool calls.
   */
  toolHeaders: { [k: string]: string } | null;
  /**
   * The Agent ID
   */
  id: number;
  /**
   * Timestamp of most recent update
   */
  updatedAt: Date;
  /**
   * Email of the user who last updated the agent
   */
  lastUpdatedBy: string | null;
  /**
   * Channel targets associated with the agent
   */
  channelTargets?: Array<Target> | null | undefined;
  /**
   * The prompt associated with the agent
   */
  prompt?: Prompt | null | undefined;
  /**
   * The custom message associated with the agent
   */
  customMessage?: Greeting | null | undefined;
};

/** @internal */
export const AgentResponse$inboundSchema: z.ZodType<
  AgentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  prompt_id: z.number().int(),
  custom_message_id: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema),
  languages: z.array(z.string()),
  variables: z.record(z.string()),
  tool_headers: z.nullable(z.record(z.string())),
  id: z.number().int(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  last_updated_by: z.nullable(z.string()),
  channel_targets: z.nullable(z.array(Target$inboundSchema)).optional(),
  prompt: z.nullable(Prompt$inboundSchema).optional(),
  custom_message: z.nullable(Greeting$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_id": "promptId",
    "custom_message_id": "customMessageId",
    "prompt_tool_defaults": "promptToolDefaults",
    "tool_headers": "toolHeaders",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
    "channel_targets": "channelTargets",
    "custom_message": "customMessage",
  });
});

/** @internal */
export type AgentResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  type: string;
  prompt_id: number;
  custom_message_id?: number | null | undefined;
  timezone: string;
  prompt_tool_defaults: Array<AgentToolDefaults$Outbound>;
  languages: Array<string>;
  variables: { [k: string]: string };
  tool_headers: { [k: string]: string } | null;
  id: number;
  updated_at: string;
  last_updated_by: string | null;
  channel_targets?: Array<Target$Outbound> | null | undefined;
  prompt?: Prompt$Outbound | null | undefined;
  custom_message?: Greeting$Outbound | null | undefined;
};

/** @internal */
export const AgentResponse$outboundSchema: z.ZodType<
  AgentResponse$Outbound,
  z.ZodTypeDef,
  AgentResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema),
  languages: z.array(z.string()),
  variables: z.record(z.string()),
  toolHeaders: z.nullable(z.record(z.string())),
  id: z.number().int(),
  updatedAt: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.nullable(z.string()),
  channelTargets: z.nullable(z.array(Target$outboundSchema)).optional(),
  prompt: z.nullable(Prompt$outboundSchema).optional(),
  customMessage: z.nullable(Greeting$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
    channelTargets: "channel_targets",
    customMessage: "custom_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentResponse$ {
  /** @deprecated use `AgentResponse$inboundSchema` instead. */
  export const inboundSchema = AgentResponse$inboundSchema;
  /** @deprecated use `AgentResponse$outboundSchema` instead. */
  export const outboundSchema = AgentResponse$outboundSchema;
  /** @deprecated use `AgentResponse$Outbound` instead. */
  export type Outbound = AgentResponse$Outbound;
}

export function agentResponseToJSON(agentResponse: AgentResponse): string {
  return JSON.stringify(AgentResponse$outboundSchema.parse(agentResponse));
}

export function agentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AgentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentResponse' from JSON`,
  );
}
