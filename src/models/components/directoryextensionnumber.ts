/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DirectoryExtensionNumber = {
  /**
   * Phone number
   */
  number: string;
  /**
   * Directory extension number rules. To include a language rule, use key "language" with a language code value.
   */
  rules?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const DirectoryExtensionNumber$inboundSchema: z.ZodType<
  DirectoryExtensionNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.string(),
  rules: z.nullable(z.array(z.record(z.string()))).optional(),
});

/** @internal */
export type DirectoryExtensionNumber$Outbound = {
  number: string;
  rules?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const DirectoryExtensionNumber$outboundSchema: z.ZodType<
  DirectoryExtensionNumber$Outbound,
  z.ZodTypeDef,
  DirectoryExtensionNumber
> = z.object({
  number: z.string(),
  rules: z.nullable(z.array(z.record(z.string()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryExtensionNumber$ {
  /** @deprecated use `DirectoryExtensionNumber$inboundSchema` instead. */
  export const inboundSchema = DirectoryExtensionNumber$inboundSchema;
  /** @deprecated use `DirectoryExtensionNumber$outboundSchema` instead. */
  export const outboundSchema = DirectoryExtensionNumber$outboundSchema;
  /** @deprecated use `DirectoryExtensionNumber$Outbound` instead. */
  export type Outbound = DirectoryExtensionNumber$Outbound;
}

export function directoryExtensionNumberToJSON(
  directoryExtensionNumber: DirectoryExtensionNumber,
): string {
  return JSON.stringify(
    DirectoryExtensionNumber$outboundSchema.parse(directoryExtensionNumber),
  );
}

export function directoryExtensionNumberFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryExtensionNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryExtensionNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryExtensionNumber' from JSON`,
  );
}
