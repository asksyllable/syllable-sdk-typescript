/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentSttProvider,
  AgentSttProvider$inboundSchema,
  AgentSttProvider$outboundSchema,
} from "./agentsttprovider.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";
import {
  AgentWaitSound,
  AgentWaitSound$inboundSchema,
  AgentWaitSound$outboundSchema,
} from "./agentwaitsound.js";

/**
 * Request model to update an existing agent.
 */
export type AgentUpdate = {
  /**
   * The agent name
   */
  name: string;
  /**
   * The agent description
   */
  description?: string | null | undefined;
  /**
   * The agent label (DEPRECATED - use labels instead.)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  label?: string | null | undefined;
  /**
   * The agent labels
   */
  labels?: Array<string> | null | undefined;
  /**
   * The agent type. Must be "ca_v1" currently.
   */
  type: string;
  /**
   * ID of the prompt associated with the agent
   */
  promptId: number;
  /**
   * Internal ID of the custom message that should be delivered at the beginning of a conversation with the agent
   */
  customMessageId: number;
  /**
   * Internal ID of the language group associated with the agent
   */
  languageGroupId?: number | null | undefined;
  /**
   * The time zone in which the agent operates
   */
  timezone: string;
  /**
   * Agent-level static parameter values for the agent's tools, overriding any tool-level defaults
   */
  promptToolDefaults?: Array<AgentToolDefaults> | undefined;
  /**
   * BCP 47 codes of languages the agent supports. (DEPRECATED - pass an empty list here and use language group ID to link agent to a language group instead.)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  languages?: Array<string> | undefined;
  /**
   * Custom context variables for the conversation session. Keys should be prefixed with "vars.".
   */
  variables: { [k: string]: string };
  /**
   * Optional headers to include in tool calls for agent. (It is discouraged to use this field for "Authorization" headers, as values here are not encrypted. Instead, set up a service with either basic, bearer, or custom header auth; attach the appropriate tools to that service, and the attached tools will automatically use the auth configured on the service.)
   */
  toolHeaders: { [k: string]: string } | null;
  /**
   * Whether the agent initiates conversation with a user after the custom message is delivered
   */
  agentInitiated?: boolean | undefined;
  /**
   * Speech-to-text provider for the agent.
   */
  sttProvider?: AgentSttProvider | null | undefined;
  /**
   * Sound to play while waiting for a response from the LLM.
   */
  waitSound?: AgentWaitSound | null | undefined;
  /**
   * Internal ID of the agent
   */
  id: number;
};

/** @internal */
export const AgentUpdate$inboundSchema: z.ZodType<
  AgentUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  labels: z.nullable(z.array(z.string())).optional(),
  type: z.string(),
  prompt_id: z.number().int(),
  custom_message_id: z.number().int(),
  language_group_id: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.record(z.string()),
  tool_headers: z.nullable(z.record(z.string())),
  agent_initiated: z.boolean().default(false),
  stt_provider: z.nullable(AgentSttProvider$inboundSchema).optional(),
  wait_sound: z.nullable(AgentWaitSound$inboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "prompt_id": "promptId",
    "custom_message_id": "customMessageId",
    "language_group_id": "languageGroupId",
    "prompt_tool_defaults": "promptToolDefaults",
    "tool_headers": "toolHeaders",
    "agent_initiated": "agentInitiated",
    "stt_provider": "sttProvider",
    "wait_sound": "waitSound",
  });
});

/** @internal */
export type AgentUpdate$Outbound = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  labels?: Array<string> | null | undefined;
  type: string;
  prompt_id: number;
  custom_message_id: number;
  language_group_id?: number | null | undefined;
  timezone: string;
  prompt_tool_defaults?: Array<AgentToolDefaults$Outbound> | undefined;
  languages?: Array<string> | undefined;
  variables: { [k: string]: string };
  tool_headers: { [k: string]: string } | null;
  agent_initiated: boolean;
  stt_provider?: string | null | undefined;
  wait_sound?: string | null | undefined;
  id: number;
};

/** @internal */
export const AgentUpdate$outboundSchema: z.ZodType<
  AgentUpdate$Outbound,
  z.ZodTypeDef,
  AgentUpdate
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  labels: z.nullable(z.array(z.string())).optional(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.number().int(),
  languageGroupId: z.nullable(z.number().int()).optional(),
  timezone: z.string(),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.record(z.string()),
  toolHeaders: z.nullable(z.record(z.string())),
  agentInitiated: z.boolean().default(false),
  sttProvider: z.nullable(AgentSttProvider$outboundSchema).optional(),
  waitSound: z.nullable(AgentWaitSound$outboundSchema).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    languageGroupId: "language_group_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
    agentInitiated: "agent_initiated",
    sttProvider: "stt_provider",
    waitSound: "wait_sound",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentUpdate$ {
  /** @deprecated use `AgentUpdate$inboundSchema` instead. */
  export const inboundSchema = AgentUpdate$inboundSchema;
  /** @deprecated use `AgentUpdate$outboundSchema` instead. */
  export const outboundSchema = AgentUpdate$outboundSchema;
  /** @deprecated use `AgentUpdate$Outbound` instead. */
  export type Outbound = AgentUpdate$Outbound;
}

export function agentUpdateToJSON(agentUpdate: AgentUpdate): string {
  return JSON.stringify(AgentUpdate$outboundSchema.parse(agentUpdate));
}

export function agentUpdateFromJSON(
  jsonString: string,
): SafeParseResult<AgentUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentUpdate' from JSON`,
  );
}
