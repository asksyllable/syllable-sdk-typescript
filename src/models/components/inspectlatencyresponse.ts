/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LatencyEntry,
  LatencyEntry$inboundSchema,
  LatencyEntry$Outbound,
  LatencyEntry$outboundSchema,
} from "./latencyentry.js";
import {
  SummaryEntry,
  SummaryEntry$inboundSchema,
  SummaryEntry$Outbound,
  SummaryEntry$outboundSchema,
} from "./summaryentry.js";

/**
 * This is a report of the time spent in each operation during this session. It contains a timeline,
 *
 * @remarks
 * which lists the operations in the order they were executed, and a summary, which aggregates the
 * operations by category and sub-category.
 */
export type InspectLatencyResponse = {
  sessionId: string;
  timeline: Array<LatencyEntry>;
  summary?: Array<SummaryEntry> | undefined;
};

/** @internal */
export const InspectLatencyResponse$inboundSchema: z.ZodType<
  InspectLatencyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
  timeline: z.array(LatencyEntry$inboundSchema),
  summary: z.array(SummaryEntry$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type InspectLatencyResponse$Outbound = {
  session_id: string;
  timeline: Array<LatencyEntry$Outbound>;
  summary?: Array<SummaryEntry$Outbound> | undefined;
};

/** @internal */
export const InspectLatencyResponse$outboundSchema: z.ZodType<
  InspectLatencyResponse$Outbound,
  z.ZodTypeDef,
  InspectLatencyResponse
> = z.object({
  sessionId: z.string(),
  timeline: z.array(LatencyEntry$outboundSchema),
  summary: z.array(SummaryEntry$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InspectLatencyResponse$ {
  /** @deprecated use `InspectLatencyResponse$inboundSchema` instead. */
  export const inboundSchema = InspectLatencyResponse$inboundSchema;
  /** @deprecated use `InspectLatencyResponse$outboundSchema` instead. */
  export const outboundSchema = InspectLatencyResponse$outboundSchema;
  /** @deprecated use `InspectLatencyResponse$Outbound` instead. */
  export type Outbound = InspectLatencyResponse$Outbound;
}

export function inspectLatencyResponseToJSON(
  inspectLatencyResponse: InspectLatencyResponse,
): string {
  return JSON.stringify(
    InspectLatencyResponse$outboundSchema.parse(inspectLatencyResponse),
  );
}

export function inspectLatencyResponseFromJSON(
  jsonString: string,
): SafeParseResult<InspectLatencyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InspectLatencyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InspectLatencyResponse' from JSON`,
  );
}
