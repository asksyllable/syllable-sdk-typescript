/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolArgumentLocation,
  ToolArgumentLocation$inboundSchema,
  ToolArgumentLocation$outboundSchema,
} from "./toolargumentlocation.js";
import {
  ToolHttpMethod,
  ToolHttpMethod$inboundSchema,
  ToolHttpMethod$outboundSchema,
} from "./toolhttpmethod.js";

/**
 * The configuration for an HTTP API call by a tool.
 */
export type ToolHttpEndpoint = {
  /**
   * The endpoint URL of the external service to call.
   */
  url: string;
  /**
   * The HTTP method to use for a tool HTTP request.
   */
  method: ToolHttpMethod;
  /**
   * The location of the argument in a tool HTTP request.
   *
   * @remarks
   * 'body' is used for JSON data in the POST request body.
   * 'form' is used for form data in the POST request body.
   * 'path' is used for URL path parameters.
   * 'query' is used for query parameters in the URL.
   */
  argumentLocation: ToolArgumentLocation;
};

/** @internal */
export const ToolHttpEndpoint$inboundSchema: z.ZodType<
  ToolHttpEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: ToolHttpMethod$inboundSchema,
  argument_location: ToolArgumentLocation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "argument_location": "argumentLocation",
  });
});

/** @internal */
export type ToolHttpEndpoint$Outbound = {
  url: string;
  method: string;
  argument_location: string;
};

/** @internal */
export const ToolHttpEndpoint$outboundSchema: z.ZodType<
  ToolHttpEndpoint$Outbound,
  z.ZodTypeDef,
  ToolHttpEndpoint
> = z.object({
  url: z.string(),
  method: ToolHttpMethod$outboundSchema,
  argumentLocation: ToolArgumentLocation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    argumentLocation: "argument_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolHttpEndpoint$ {
  /** @deprecated use `ToolHttpEndpoint$inboundSchema` instead. */
  export const inboundSchema = ToolHttpEndpoint$inboundSchema;
  /** @deprecated use `ToolHttpEndpoint$outboundSchema` instead. */
  export const outboundSchema = ToolHttpEndpoint$outboundSchema;
  /** @deprecated use `ToolHttpEndpoint$Outbound` instead. */
  export type Outbound = ToolHttpEndpoint$Outbound;
}

export function toolHttpEndpointToJSON(
  toolHttpEndpoint: ToolHttpEndpoint,
): string {
  return JSON.stringify(
    ToolHttpEndpoint$outboundSchema.parse(toolHttpEndpoint),
  );
}

export function toolHttpEndpointFromJSON(
  jsonString: string,
): SafeParseResult<ToolHttpEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolHttpEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolHttpEndpoint' from JSON`,
  );
}
