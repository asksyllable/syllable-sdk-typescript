/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to delete a user.
 */
export type UserDeleteRequest = {
  /**
   * The email address of the user to delete
   */
  email: string;
  /**
   * The reason for deleting the user
   */
  reason: string;
};

/** @internal */
export const UserDeleteRequest$inboundSchema: z.ZodType<
  UserDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  reason: z.string(),
});

/** @internal */
export type UserDeleteRequest$Outbound = {
  email: string;
  reason: string;
};

/** @internal */
export const UserDeleteRequest$outboundSchema: z.ZodType<
  UserDeleteRequest$Outbound,
  z.ZodTypeDef,
  UserDeleteRequest
> = z.object({
  email: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleteRequest$ {
  /** @deprecated use `UserDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = UserDeleteRequest$inboundSchema;
  /** @deprecated use `UserDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = UserDeleteRequest$outboundSchema;
  /** @deprecated use `UserDeleteRequest$Outbound` instead. */
  export type Outbound = UserDeleteRequest$Outbound;
}

export function userDeleteRequestToJSON(
  userDeleteRequest: UserDeleteRequest,
): string {
  return JSON.stringify(
    UserDeleteRequest$outboundSchema.parse(userDeleteRequest),
  );
}

export function userDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDeleteRequest' from JSON`,
  );
}
