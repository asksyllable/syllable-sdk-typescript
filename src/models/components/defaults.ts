/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ToolParameterDefault,
  ToolParameterDefault$inboundSchema,
  ToolParameterDefault$Outbound,
  ToolParameterDefault$outboundSchema,
} from "./toolparameterdefault.js";

export type AnyofSchema1Validator = {};

/**
 * The default values for the parameters of the function/tool call.
 */
export type Defaults = {
  anyofSchema1Validator?: AnyofSchema1Validator | null | undefined;
  anyofSchema2Validator?:
    | { [k: string]: ToolParameterDefault }
    | null
    | undefined;
  actualInstance?: any | undefined;
  anyOfSchemas?: Array<string> | undefined;
};

/** @internal */
export const AnyofSchema1Validator$inboundSchema: z.ZodType<
  AnyofSchema1Validator,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AnyofSchema1Validator$Outbound = {};

/** @internal */
export const AnyofSchema1Validator$outboundSchema: z.ZodType<
  AnyofSchema1Validator$Outbound,
  z.ZodTypeDef,
  AnyofSchema1Validator
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyofSchema1Validator$ {
  /** @deprecated use `AnyofSchema1Validator$inboundSchema` instead. */
  export const inboundSchema = AnyofSchema1Validator$inboundSchema;
  /** @deprecated use `AnyofSchema1Validator$outboundSchema` instead. */
  export const outboundSchema = AnyofSchema1Validator$outboundSchema;
  /** @deprecated use `AnyofSchema1Validator$Outbound` instead. */
  export type Outbound = AnyofSchema1Validator$Outbound;
}

/** @internal */
export const Defaults$inboundSchema: z.ZodType<
  Defaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  anyof_schema_1_validator: z.nullable(
    z.lazy(() => AnyofSchema1Validator$inboundSchema),
  ).optional(),
  anyof_schema_2_validator: z.nullable(
    z.record(ToolParameterDefault$inboundSchema),
  ).optional(),
  actual_instance: z.any().optional(),
  any_of_schemas: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "anyof_schema_1_validator": "anyofSchema1Validator",
    "anyof_schema_2_validator": "anyofSchema2Validator",
    "actual_instance": "actualInstance",
    "any_of_schemas": "anyOfSchemas",
  });
});

/** @internal */
export type Defaults$Outbound = {
  anyof_schema_1_validator?: AnyofSchema1Validator$Outbound | null | undefined;
  anyof_schema_2_validator?:
    | { [k: string]: ToolParameterDefault$Outbound }
    | null
    | undefined;
  actual_instance?: any | undefined;
  any_of_schemas?: Array<string> | undefined;
};

/** @internal */
export const Defaults$outboundSchema: z.ZodType<
  Defaults$Outbound,
  z.ZodTypeDef,
  Defaults
> = z.object({
  anyofSchema1Validator: z.nullable(
    z.lazy(() => AnyofSchema1Validator$outboundSchema),
  ).optional(),
  anyofSchema2Validator: z.nullable(
    z.record(ToolParameterDefault$outboundSchema),
  ).optional(),
  actualInstance: z.any().optional(),
  anyOfSchemas: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    anyofSchema1Validator: "anyof_schema_1_validator",
    anyofSchema2Validator: "anyof_schema_2_validator",
    actualInstance: "actual_instance",
    anyOfSchemas: "any_of_schemas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Defaults$ {
  /** @deprecated use `Defaults$inboundSchema` instead. */
  export const inboundSchema = Defaults$inboundSchema;
  /** @deprecated use `Defaults$outboundSchema` instead. */
  export const outboundSchema = Defaults$outboundSchema;
  /** @deprecated use `Defaults$Outbound` instead. */
  export type Outbound = Defaults$Outbound;
}
