/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TargetModes,
  TargetModes$inboundSchema,
  TargetModes$outboundSchema,
} from "./targetmodes.js";

/**
 * Request model to create a channel target.
 */
export type ChannelTargetCreateRequest = {
  /**
   * The internal ID of the agent associated with the channel target
   */
  agentId: number;
  /**
   * The internal ID of the channel associated with the channel target
   */
  channelId: number;
  /**
   * The name of the channel target. Must correspond to an organization-level target (available targets can be fetched from `/channels/available-targets`).
   */
  target: string;
  /**
   * Available modes (communication methods) for channel targets.
   */
  targetMode: TargetModes;
  /**
   * The fallback for the channel target (currently only supported for "voice" mode)
   */
  fallbackTarget?: string | null | undefined;
  /**
   * Whether the channel target is intended for testing. If true, any sessions created through this target will be labeled as a test session (i.e., will not be included in dashboard data and can easily be filtered out in the Sessions screen in the SyllableConsole).
   */
  isTest?: boolean | undefined;
};

/** @internal */
export const ChannelTargetCreateRequest$inboundSchema: z.ZodType<
  ChannelTargetCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.number().int(),
  channel_id: z.number().int(),
  target: z.string(),
  target_mode: TargetModes$inboundSchema,
  fallback_target: z.nullable(z.string()).optional(),
  is_test: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
    "channel_id": "channelId",
    "target_mode": "targetMode",
    "fallback_target": "fallbackTarget",
    "is_test": "isTest",
  });
});

/** @internal */
export type ChannelTargetCreateRequest$Outbound = {
  agent_id: number;
  channel_id: number;
  target: string;
  target_mode: string;
  fallback_target?: string | null | undefined;
  is_test: boolean;
};

/** @internal */
export const ChannelTargetCreateRequest$outboundSchema: z.ZodType<
  ChannelTargetCreateRequest$Outbound,
  z.ZodTypeDef,
  ChannelTargetCreateRequest
> = z.object({
  agentId: z.number().int(),
  channelId: z.number().int(),
  target: z.string(),
  targetMode: TargetModes$outboundSchema,
  fallbackTarget: z.nullable(z.string()).optional(),
  isTest: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    channelId: "channel_id",
    targetMode: "target_mode",
    fallbackTarget: "fallback_target",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelTargetCreateRequest$ {
  /** @deprecated use `ChannelTargetCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ChannelTargetCreateRequest$inboundSchema;
  /** @deprecated use `ChannelTargetCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ChannelTargetCreateRequest$outboundSchema;
  /** @deprecated use `ChannelTargetCreateRequest$Outbound` instead. */
  export type Outbound = ChannelTargetCreateRequest$Outbound;
}

export function channelTargetCreateRequestToJSON(
  channelTargetCreateRequest: ChannelTargetCreateRequest,
): string {
  return JSON.stringify(
    ChannelTargetCreateRequest$outboundSchema.parse(channelTargetCreateRequest),
  );
}

export function channelTargetCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChannelTargetCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelTargetCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelTargetCreateRequest' from JSON`,
  );
}
