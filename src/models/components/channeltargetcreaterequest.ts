/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ChannelTargetCreateRequest = {
  channelId: number;
  channelName: string | null;
  agentId: number | null;
  target: string;
  targetMode: string;
  fallbackTarget: string | null;
  isTest: boolean;
};

/** @internal */
export const ChannelTargetCreateRequest$inboundSchema: z.ZodType<
  ChannelTargetCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.number().int(),
  channel_name: z.nullable(z.string()),
  agent_id: z.nullable(z.number().int()),
  target: z.string(),
  target_mode: z.string(),
  fallback_target: z.nullable(z.string()),
  is_test: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "channel_name": "channelName",
    "agent_id": "agentId",
    "target_mode": "targetMode",
    "fallback_target": "fallbackTarget",
    "is_test": "isTest",
  });
});

/** @internal */
export type ChannelTargetCreateRequest$Outbound = {
  channel_id: number;
  channel_name: string | null;
  agent_id: number | null;
  target: string;
  target_mode: string;
  fallback_target: string | null;
  is_test: boolean;
};

/** @internal */
export const ChannelTargetCreateRequest$outboundSchema: z.ZodType<
  ChannelTargetCreateRequest$Outbound,
  z.ZodTypeDef,
  ChannelTargetCreateRequest
> = z.object({
  channelId: z.number().int(),
  channelName: z.nullable(z.string()),
  agentId: z.nullable(z.number().int()),
  target: z.string(),
  targetMode: z.string(),
  fallbackTarget: z.nullable(z.string()),
  isTest: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    channelName: "channel_name",
    agentId: "agent_id",
    targetMode: "target_mode",
    fallbackTarget: "fallback_target",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelTargetCreateRequest$ {
  /** @deprecated use `ChannelTargetCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ChannelTargetCreateRequest$inboundSchema;
  /** @deprecated use `ChannelTargetCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ChannelTargetCreateRequest$outboundSchema;
  /** @deprecated use `ChannelTargetCreateRequest$Outbound` instead. */
  export type Outbound = ChannelTargetCreateRequest$Outbound;
}
