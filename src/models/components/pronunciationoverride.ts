/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MatchType,
  MatchType$inboundSchema,
  MatchType$outboundSchema,
} from "./matchtype.js";

/**
 * A single text replacement rule.
 */
export type PronunciationOverride = {
  text: string;
  replacement: string;
  languages?: Array<string> | undefined;
  provider?: string | undefined;
  voice?: string | undefined;
  /**
   * Matching strategy for override text.
   */
  matchType?: MatchType | undefined;
  matchOptions?: Array<string> | undefined;
  enabled?: boolean | undefined;
  notes?: string | undefined;
};

/** @internal */
export const PronunciationOverride$inboundSchema: z.ZodType<
  PronunciationOverride,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  replacement: z.string(),
  languages: z.array(z.string()).optional(),
  provider: z.string().default(""),
  voice: z.string().default(""),
  match_type: MatchType$inboundSchema.optional(),
  match_options: z.array(z.string()).optional(),
  enabled: z.boolean().default(true),
  notes: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    "match_type": "matchType",
    "match_options": "matchOptions",
  });
});

/** @internal */
export type PronunciationOverride$Outbound = {
  text: string;
  replacement: string;
  languages?: Array<string> | undefined;
  provider: string;
  voice: string;
  match_type?: string | undefined;
  match_options?: Array<string> | undefined;
  enabled: boolean;
  notes: string;
};

/** @internal */
export const PronunciationOverride$outboundSchema: z.ZodType<
  PronunciationOverride$Outbound,
  z.ZodTypeDef,
  PronunciationOverride
> = z.object({
  text: z.string(),
  replacement: z.string(),
  languages: z.array(z.string()).optional(),
  provider: z.string().default(""),
  voice: z.string().default(""),
  matchType: MatchType$outboundSchema.optional(),
  matchOptions: z.array(z.string()).optional(),
  enabled: z.boolean().default(true),
  notes: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    matchType: "match_type",
    matchOptions: "match_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PronunciationOverride$ {
  /** @deprecated use `PronunciationOverride$inboundSchema` instead. */
  export const inboundSchema = PronunciationOverride$inboundSchema;
  /** @deprecated use `PronunciationOverride$outboundSchema` instead. */
  export const outboundSchema = PronunciationOverride$outboundSchema;
  /** @deprecated use `PronunciationOverride$Outbound` instead. */
  export type Outbound = PronunciationOverride$Outbound;
}

export function pronunciationOverrideToJSON(
  pronunciationOverride: PronunciationOverride,
): string {
  return JSON.stringify(
    PronunciationOverride$outboundSchema.parse(pronunciationOverride),
  );
}

export function pronunciationOverrideFromJSON(
  jsonString: string,
): SafeParseResult<PronunciationOverride, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PronunciationOverride$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PronunciationOverride' from JSON`,
  );
}
