/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourceCreateRequest = {
  /**
   * The data source name. Must be unique within suborg. Cannot contain whitespace.
   */
  name: string;
  /**
   * The description of the data source.
   */
  description?: string | null | undefined;
  /**
   * Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.
   */
  labels?: Array<string> | undefined;
  /**
   * Whether the content should be split into smaller chunks. (This feature is coming in the future - currently this value will always be treated as False.)
   */
  chunk: boolean;
  /**
   * String that should be treated as delimiter between intended chunks. (This feature is coming in the future - currently this value will always be treated as None.)
   */
  chunkDelimiter?: string | null | undefined;
  /**
   * Information that the data source will provide to the agent accessing it.
   */
  text: string;
};

/** @internal */
export const DataSourceCreateRequest$inboundSchema: z.ZodType<
  DataSourceCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunk_delimiter: z.nullable(z.string()).optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chunk_delimiter": "chunkDelimiter",
  });
});

/** @internal */
export type DataSourceCreateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  labels?: Array<string> | undefined;
  chunk: boolean;
  chunk_delimiter?: string | null | undefined;
  text: string;
};

/** @internal */
export const DataSourceCreateRequest$outboundSchema: z.ZodType<
  DataSourceCreateRequest$Outbound,
  z.ZodTypeDef,
  DataSourceCreateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunkDelimiter: z.nullable(z.string()).optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    chunkDelimiter: "chunk_delimiter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceCreateRequest$ {
  /** @deprecated use `DataSourceCreateRequest$inboundSchema` instead. */
  export const inboundSchema = DataSourceCreateRequest$inboundSchema;
  /** @deprecated use `DataSourceCreateRequest$outboundSchema` instead. */
  export const outboundSchema = DataSourceCreateRequest$outboundSchema;
  /** @deprecated use `DataSourceCreateRequest$Outbound` instead. */
  export type Outbound = DataSourceCreateRequest$Outbound;
}

export function dataSourceCreateRequestToJSON(
  dataSourceCreateRequest: DataSourceCreateRequest,
): string {
  return JSON.stringify(
    DataSourceCreateRequest$outboundSchema.parse(dataSourceCreateRequest),
  );
}

export function dataSourceCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourceCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceCreateRequest' from JSON`,
  );
}
