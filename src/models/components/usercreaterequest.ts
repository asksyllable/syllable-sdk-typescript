/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to create a user.
 */
export type UserCreateRequest = {
  /**
   * Email address of the user
   */
  email: string;
  /**
   * First name of the user
   */
  firstName?: string | null | undefined;
  /**
   * Last name of the user
   */
  lastName?: string | null | undefined;
  /**
   * ID of the role assigned to the user
   */
  roleId: number;
};

/** @internal */
export const UserCreateRequest$inboundSchema: z.ZodType<
  UserCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  role_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "role_id": "roleId",
  });
});

/** @internal */
export type UserCreateRequest$Outbound = {
  email: string;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  role_id: number;
};

/** @internal */
export const UserCreateRequest$outboundSchema: z.ZodType<
  UserCreateRequest$Outbound,
  z.ZodTypeDef,
  UserCreateRequest
> = z.object({
  email: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  roleId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateRequest$ {
  /** @deprecated use `UserCreateRequest$inboundSchema` instead. */
  export const inboundSchema = UserCreateRequest$inboundSchema;
  /** @deprecated use `UserCreateRequest$outboundSchema` instead. */
  export const outboundSchema = UserCreateRequest$outboundSchema;
  /** @deprecated use `UserCreateRequest$Outbound` instead. */
  export type Outbound = UserCreateRequest$Outbound;
}

export function userCreateRequestToJSON(
  userCreateRequest: UserCreateRequest,
): string {
  return JSON.stringify(
    UserCreateRequest$outboundSchema.parse(userCreateRequest),
  );
}

export function userCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateRequest' from JSON`,
  );
}
