/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Service = {
  /**
   * The name of the service
   */
  name: string;
  /**
   * The description of the service
   */
  description: string;
  /**
   * The ID of the service
   */
  id: number;
  /**
   * The tools of the service
   */
  tools: Array<string>;
};

/** @internal */
export const Service$inboundSchema: z.ZodType<Service, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    description: z.string(),
    id: z.number().int(),
    tools: z.array(z.string()),
  });

/** @internal */
export type Service$Outbound = {
  name: string;
  description: string;
  id: number;
  tools: Array<string>;
};

/** @internal */
export const Service$outboundSchema: z.ZodType<
  Service$Outbound,
  z.ZodTypeDef,
  Service
> = z.object({
  name: z.string(),
  description: z.string(),
  id: z.number().int(),
  tools: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Service$ {
  /** @deprecated use `Service$inboundSchema` instead. */
  export const inboundSchema = Service$inboundSchema;
  /** @deprecated use `Service$outboundSchema` instead. */
  export const outboundSchema = Service$outboundSchema;
  /** @deprecated use `Service$Outbound` instead. */
  export type Outbound = Service$Outbound;
}

export function serviceToJSON(service: Service): string {
  return JSON.stringify(Service$outboundSchema.parse(service));
}

export function serviceFromJSON(
  jsonString: string,
): SafeParseResult<Service, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Service$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Service' from JSON`,
  );
}
