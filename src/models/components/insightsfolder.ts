/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for an insight upload folder.
 */
export type InsightsFolder = {
  /**
   * Human-readable name of insight folder
   */
  name: string;
  /**
   * optional label assigned to insight folder
   */
  label?: string | null | undefined;
  /**
   * Text description of insight upload folder
   */
  description?: string | null | undefined;
  /**
   * System-assign folder ID
   */
  id: number;
  /**
   * Timestamp at which insight upload folder was created
   */
  createdAt?: Date | undefined;
  /**
   * Timestamp at which insight upload folder was last updated
   */
  updatedAt?: Date | undefined;
  /**
   * Email of user who last updated upload folder
   */
  lastUpdatedBy: string;
};

/** @internal */
export const InsightsFolder$inboundSchema: z.ZodType<
  InsightsFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  label: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type InsightsFolder$Outbound = {
  name: string;
  label?: string | null | undefined;
  description?: string | null | undefined;
  id: number;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_updated_by: string;
};

/** @internal */
export const InsightsFolder$outboundSchema: z.ZodType<
  InsightsFolder$Outbound,
  z.ZodTypeDef,
  InsightsFolder
> = z.object({
  name: z.string(),
  label: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsFolder$ {
  /** @deprecated use `InsightsFolder$inboundSchema` instead. */
  export const inboundSchema = InsightsFolder$inboundSchema;
  /** @deprecated use `InsightsFolder$outboundSchema` instead. */
  export const outboundSchema = InsightsFolder$outboundSchema;
  /** @deprecated use `InsightsFolder$Outbound` instead. */
  export type Outbound = InsightsFolder$Outbound;
}

export function insightsFolderToJSON(insightsFolder: InsightsFolder): string {
  return JSON.stringify(InsightsFolder$outboundSchema.parse(insightsFolder));
}

export function insightsFolderFromJSON(
  jsonString: string,
): SafeParseResult<InsightsFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsFolder' from JSON`,
  );
}
