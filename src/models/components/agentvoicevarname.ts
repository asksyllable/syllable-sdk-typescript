/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The variable name of an agent voice (used when processing messages).
 */
export const AgentVoiceVarName = {
  OpenaiAlloy: "openai:alloy",
  OpenaiAsh: "openai:ash",
  OpenaiCoral: "openai:coral",
  OpenaiEcho: "openai:echo",
  OpenaiFable: "openai:fable",
  OpenaiNova: "openai:nova",
  OpenaiOnyx: "openai:onyx",
  OpenaiSage: "openai:sage",
  OpenaiShimmer: "openai:shimmer",
  ElevenlabsAlice: "elevenlabs:Alice",
  ElevenlabsBill: "elevenlabs:Bill",
  ElevenlabsBrian: "elevenlabs:Brian",
  ElevenlabsCallum: "elevenlabs:Callum",
  ElevenlabsCharlie: "elevenlabs:Charlie",
  ElevenlabsCharlotte: "elevenlabs:Charlotte",
  ElevenlabsChris: "elevenlabs:Chris",
  ElevenlabsDaniel: "elevenlabs:Daniel",
  ElevenlabsEric: "elevenlabs:Eric",
  ElevenlabsGeorge: "elevenlabs:George",
  ElevenlabsJessica: "elevenlabs:Jessica",
  ElevenlabsLaura: "elevenlabs:Laura",
  ElevenlabsLiam: "elevenlabs:Liam",
  ElevenlabsLily: "elevenlabs:Lily",
  ElevenlabsMatilda: "elevenlabs:Matilda",
  ElevenlabsRiver: "elevenlabs:River",
  ElevenlabsRoger: "elevenlabs:Roger",
  ElevenlabsSarah: "elevenlabs:Sarah",
  ElevenlabsWill: "elevenlabs:Will",
  WavenetFemaleEnUSChirp3HDAchernar: "wavenet:female/en-US-Chirp3-HD-Achernar",
  WavenetFemaleGuINChirp3HDAchernar: "wavenet:female/gu-IN-Chirp3-HD-Achernar",
  WavenetFemaleHiINChirp3HDAchernar: "wavenet:female/hi-IN-Chirp3-HD-Achernar",
  WavenetFemaleKoKRChirp3HDAchernar: "wavenet:female/ko-KR-Chirp3-HD-Achernar",
  WavenetFemaleCmnCNChirp3HDAchernar:
    "wavenet:female/cmn-CN-Chirp3-HD-Achernar",
  WavenetFemaleEsUSChirp3HDAchernar: "wavenet:female/es-US-Chirp3-HD-Achernar",
  WavenetFemaleTHTHChirp3HDAchernar: "wavenet:female/th-TH-Chirp3-HD-Achernar",
  WavenetFemaleViVNChirp3HDAchernar: "wavenet:female/vi-VN-Chirp3-HD-Achernar",
  WavenetFemaleEnUSChirp3HDAoede: "wavenet:female/en-US-Chirp3-HD-Aoede",
  WavenetFemaleGuINChirp3HDAoede: "wavenet:female/gu-IN-Chirp3-HD-Aoede",
  WavenetFemaleHiINChirp3HDAoede: "wavenet:female/hi-IN-Chirp3-HD-Aoede",
  WavenetFemaleKoKRChirp3HDAoede: "wavenet:female/ko-KR-Chirp3-HD-Aoede",
  WavenetFemaleCmnCNChirp3HDAoede: "wavenet:female/cmn-CN-Chirp3-HD-Aoede",
  WavenetFemaleRURUChirp3HDAoede: "wavenet:female/ru-RU-Chirp3-HD-Aoede",
  WavenetFemaleEsUSChirp3HDAoede: "wavenet:female/es-US-Chirp3-HD-Aoede",
  WavenetFemaleTHTHChirp3HDAoede: "wavenet:female/th-TH-Chirp3-HD-Aoede",
  WavenetFemaleViVNChirp3HDAoede: "wavenet:female/vi-VN-Chirp3-HD-Aoede",
  WavenetMaleEsUSNeural2B: "wavenet:male/es-US-Neural2-B",
  WavenetFemaleEnUSChirp3HDCallirrhoe:
    "wavenet:female/en-US-Chirp3-HD-Callirrhoe",
  WavenetFemaleGuINChirp3HDCallirrhoe:
    "wavenet:female/gu-IN-Chirp3-HD-Callirrhoe",
  WavenetFemaleHiINChirp3HDCallirrhoe:
    "wavenet:female/hi-IN-Chirp3-HD-Callirrhoe",
  WavenetFemaleKoKRChirp3HDCallirrhoe:
    "wavenet:female/ko-KR-Chirp3-HD-Callirrhoe",
  WavenetFemaleCmnCNChirp3HDCallirrhoe:
    "wavenet:female/cmn-CN-Chirp3-HD-Callirrhoe",
  WavenetFemaleEsUSChirp3HDCallirrhoe:
    "wavenet:female/es-US-Chirp3-HD-Callirrhoe",
  WavenetFemaleTHTHChirp3HDCallirrhoe:
    "wavenet:female/th-TH-Chirp3-HD-Callirrhoe",
  WavenetFemaleViVNChirp3HDCallirrhoe:
    "wavenet:female/vi-VN-Chirp3-HD-Callirrhoe",
  WavenetMaleEnUSChirp3HDCharon: "wavenet:male/en-US-Chirp3-HD-Charon",
  WavenetMaleGuINChirp3HDCharon: "wavenet:male/gu-IN-Chirp3-HD-Charon",
  WavenetMaleHiINChirp3HDCharon: "wavenet:male/hi-IN-Chirp3-HD-Charon",
  WavenetMaleKoKRChirp3HDCharon: "wavenet:male/ko-KR-Chirp3-HD-Charon",
  WavenetMaleCmnCNChirp3HDCharon: "wavenet:male/cmn-CN-Chirp3-HD-Charon",
  WavenetMaleRURUChirp3HDCharon: "wavenet:male/ru-RU-Chirp3-HD-Charon",
  WavenetMaleEsUSChirp3HDCharon: "wavenet:male/es-US-Chirp3-HD-Charon",
  WavenetMaleTHTHChirp3HDCharon: "wavenet:male/th-TH-Chirp3-HD-Charon",
  WavenetMaleViVNChirp3HDCharon: "wavenet:male/vi-VN-Chirp3-HD-Charon",
  WavenetFemaleEnUSNeural2F: "wavenet:female/en-US-Neural2-F",
  WavenetMaleEnUSChirp3HDFenrir: "wavenet:male/en-US-Chirp3-HD-Fenrir",
  WavenetMaleGuINChirp3HDFenrir: "wavenet:male/gu-IN-Chirp3-HD-Fenrir",
  WavenetMaleHiINChirp3HDFenrir: "wavenet:male/hi-IN-Chirp3-HD-Fenrir",
  WavenetMaleKoKRChirp3HDFenrir: "wavenet:male/ko-KR-Chirp3-HD-Fenrir",
  WavenetMaleCmnCNChirp3HDFenrir: "wavenet:male/cmn-CN-Chirp3-HD-Fenrir",
  WavenetMaleRURUChirp3HDFenrir: "wavenet:male/ru-RU-Chirp3-HD-Fenrir",
  WavenetMaleEsUSChirp3HDFenrir: "wavenet:male/es-US-Chirp3-HD-Fenrir",
  WavenetMaleTHTHChirp3HDFenrir: "wavenet:male/th-TH-Chirp3-HD-Fenrir",
  WavenetMaleViVNChirp3HDFenrir: "wavenet:male/vi-VN-Chirp3-HD-Fenrir",
  WavenetFemaleEsUSNeural2A: "wavenet:female/es-US-Neural2-A",
  WavenetMaleEnUSNeural2D: "wavenet:male/en-US-Neural2-D",
  WavenetFemaleEnUSChirp3HDKore: "wavenet:female/en-US-Chirp3-HD-Kore",
  WavenetFemaleGuINChirp3HDKore: "wavenet:female/gu-IN-Chirp3-HD-Kore",
  WavenetFemaleHiINChirp3HDKore: "wavenet:female/hi-IN-Chirp3-HD-Kore",
  WavenetFemaleKoKRChirp3HDKore: "wavenet:female/ko-KR-Chirp3-HD-Kore",
  WavenetFemaleCmnCNChirp3HDKore: "wavenet:female/cmn-CN-Chirp3-HD-Kore",
  WavenetFemaleRURUChirp3HDKore: "wavenet:female/ru-RU-Chirp3-HD-Kore",
  WavenetFemaleEsUSChirp3HDKore: "wavenet:female/es-US-Chirp3-HD-Kore",
  WavenetFemaleTHTHChirp3HDKore: "wavenet:female/th-TH-Chirp3-HD-Kore",
  WavenetFemaleViVNChirp3HDKore: "wavenet:female/vi-VN-Chirp3-HD-Kore",
  WavenetFemaleEnUSChirp3HDLeda: "wavenet:female/en-US-Chirp3-HD-Leda",
  WavenetFemaleGuINChirp3HDLeda: "wavenet:female/gu-IN-Chirp3-HD-Leda",
  WavenetFemaleHiINChirp3HDLeda: "wavenet:female/hi-IN-Chirp3-HD-Leda",
  WavenetFemaleKoKRChirp3HDLeda: "wavenet:female/ko-KR-Chirp3-HD-Leda",
  WavenetFemaleCmnCNChirp3HDLeda: "wavenet:female/cmn-CN-Chirp3-HD-Leda",
  WavenetFemaleRURUChirp3HDLeda: "wavenet:female/ru-RU-Chirp3-HD-Leda",
  WavenetFemaleEsUSChirp3HDLeda: "wavenet:female/es-US-Chirp3-HD-Leda",
  WavenetFemaleTHTHChirp3HDLeda: "wavenet:female/th-TH-Chirp3-HD-Leda",
  WavenetFemaleViVNChirp3HDLeda: "wavenet:female/vi-VN-Chirp3-HD-Leda",
  WavenetFemaleCmnTWWavenetA: "wavenet:female/cmn-TW-Wavenet-A",
  WavenetMaleEnUSNeural2J: "wavenet:male/en-US-Neural2-J",
  WavenetFemaleYueHKStandardC: "wavenet:female/yue-HK-Standard-C",
  WavenetFemaleEnUSStudioO: "wavenet:female/en-US-Studio-O",
  WavenetMaleEnUSChirp3HDOrus: "wavenet:male/en-US-Chirp3-HD-Orus",
  WavenetMaleGuINChirp3HDOrus: "wavenet:male/gu-IN-Chirp3-HD-Orus",
  WavenetMaleHiINChirp3HDOrus: "wavenet:male/hi-IN-Chirp3-HD-Orus",
  WavenetMaleKoKRChirp3HDOrus: "wavenet:male/ko-KR-Chirp3-HD-Orus",
  WavenetMaleCmnCNChirp3HDOrus: "wavenet:male/cmn-CN-Chirp3-HD-Orus",
  WavenetMaleRURUChirp3HDOrus: "wavenet:male/ru-RU-Chirp3-HD-Orus",
  WavenetMaleEsUSChirp3HDOrus: "wavenet:male/es-US-Chirp3-HD-Orus",
  WavenetMaleTHTHChirp3HDOrus: "wavenet:male/th-TH-Chirp3-HD-Orus",
  WavenetMaleViVNChirp3HDOrus: "wavenet:male/vi-VN-Chirp3-HD-Orus",
  WavenetMaleEnUSChirp3HDPuck: "wavenet:male/en-US-Chirp3-HD-Puck",
  WavenetMaleGuINChirp3HDPuck: "wavenet:male/gu-IN-Chirp3-HD-Puck",
  WavenetMaleHiINChirp3HDPuck: "wavenet:male/hi-IN-Chirp3-HD-Puck",
  WavenetMaleKoKRChirp3HDPuck: "wavenet:male/ko-KR-Chirp3-HD-Puck",
  WavenetMaleCmnCNChirp3HDPuck: "wavenet:male/cmn-CN-Chirp3-HD-Puck",
  WavenetMaleRURUChirp3HDPuck: "wavenet:male/ru-RU-Chirp3-HD-Puck",
  WavenetMaleEsUSChirp3HDPuck: "wavenet:male/es-US-Chirp3-HD-Puck",
  WavenetMaleTHTHChirp3HDPuck: "wavenet:male/th-TH-Chirp3-HD-Puck",
  WavenetMaleViVNChirp3HDPuck: "wavenet:male/vi-VN-Chirp3-HD-Puck",
  WavenetFemaleKoKRNeural2A: "wavenet:female/ko-KR-Neural2-A",
  WavenetFemaleViVNNeural2A: "wavenet:female/vi-VN-Neural2-A",
  WavenetMaleEnUSChirp3HDUmbriel: "wavenet:male/en-US-Chirp3-HD-Umbriel",
  WavenetMaleGuINChirp3HDUmbriel: "wavenet:male/gu-IN-Chirp3-HD-Umbriel",
  WavenetMaleHiINChirp3HDUmbriel: "wavenet:male/hi-IN-Chirp3-HD-Umbriel",
  WavenetMaleKoKRChirp3HDUmbriel: "wavenet:male/ko-KR-Chirp3-HD-Umbriel",
  WavenetMaleCmnCNChirp3HDUmbriel: "wavenet:male/cmn-CN-Chirp3-HD-Umbriel",
  WavenetMaleEsUSChirp3HDUmbriel: "wavenet:male/es-US-Chirp3-HD-Umbriel",
  WavenetMaleTHTHChirp3HDUmbriel: "wavenet:male/th-TH-Chirp3-HD-Umbriel",
  WavenetMaleViVNChirp3HDUmbriel: "wavenet:male/vi-VN-Chirp3-HD-Umbriel",
  WavenetFemaleEnUSChirp3HDVindemiatrix:
    "wavenet:female/en-US-Chirp3-HD-Vindemiatrix",
  WavenetFemaleGuINChirp3HDVindemiatrix:
    "wavenet:female/gu-IN-Chirp3-HD-Vindemiatrix",
  WavenetFemaleHiINChirp3HDVindemiatrix:
    "wavenet:female/hi-IN-Chirp3-HD-Vindemiatrix",
  WavenetFemaleKoKRChirp3HDVindemiatrix:
    "wavenet:female/ko-KR-Chirp3-HD-Vindemiatrix",
  WavenetFemaleCmnCNChirp3HDVindemiatrix:
    "wavenet:female/cmn-CN-Chirp3-HD-Vindemiatrix",
  WavenetFemaleEsUSChirp3HDVindemiatrix:
    "wavenet:female/es-US-Chirp3-HD-Vindemiatrix",
  WavenetFemaleTHTHChirp3HDVindemiatrix:
    "wavenet:female/th-TH-Chirp3-HD-Vindemiatrix",
  WavenetFemaleViVNChirp3HDVindemiatrix:
    "wavenet:female/vi-VN-Chirp3-HD-Vindemiatrix",
  WavenetFemaleEnUSChirp3HDZephyr: "wavenet:female/en-US-Chirp3-HD-Zephyr",
  WavenetFemaleGuINChirp3HDZephyr: "wavenet:female/gu-IN-Chirp3-HD-Zephyr",
  WavenetFemaleHiINChirp3HDZephyr: "wavenet:female/hi-IN-Chirp3-HD-Zephyr",
  WavenetFemaleKoKRChirp3HDZephyr: "wavenet:female/ko-KR-Chirp3-HD-Zephyr",
  WavenetFemaleCmnCNChirp3HDZephyr: "wavenet:female/cmn-CN-Chirp3-HD-Zephyr",
  WavenetFemaleRURUChirp3HDZephyr: "wavenet:female/ru-RU-Chirp3-HD-Zephyr",
  WavenetFemaleEsUSChirp3HDZephyr: "wavenet:female/es-US-Chirp3-HD-Zephyr",
  WavenetFemaleTHTHChirp3HDZephyr: "wavenet:female/th-TH-Chirp3-HD-Zephyr",
  WavenetFemaleViVNChirp3HDZephyr: "wavenet:female/vi-VN-Chirp3-HD-Zephyr",
} as const;
/**
 * The variable name of an agent voice (used when processing messages).
 */
export type AgentVoiceVarName = ClosedEnum<typeof AgentVoiceVarName>;

/** @internal */
export const AgentVoiceVarName$inboundSchema: z.ZodNativeEnum<
  typeof AgentVoiceVarName
> = z.nativeEnum(AgentVoiceVarName);

/** @internal */
export const AgentVoiceVarName$outboundSchema: z.ZodNativeEnum<
  typeof AgentVoiceVarName
> = AgentVoiceVarName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentVoiceVarName$ {
  /** @deprecated use `AgentVoiceVarName$inboundSchema` instead. */
  export const inboundSchema = AgentVoiceVarName$inboundSchema;
  /** @deprecated use `AgentVoiceVarName$outboundSchema` instead. */
  export const outboundSchema = AgentVoiceVarName$outboundSchema;
}
