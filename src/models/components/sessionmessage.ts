/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DialogMessage,
  DialogMessage$inboundSchema,
  DialogMessage$Outbound,
  DialogMessage$outboundSchema,
} from "./dialogmessage.js";
import {
  DialogRole,
  DialogRole$inboundSchema,
  DialogRole$outboundSchema,
} from "./dialogrole.js";
import {
  DialogToolCall,
  DialogToolCall$inboundSchema,
  DialogToolCall$Outbound,
  DialogToolCall$outboundSchema,
} from "./dialogtoolcall.js";

export type SessionMessage = {
  role: DialogRole;
  dialog: DialogMessage;
  toolCalls: Array<DialogToolCall>;
  timestamp: Date;
};

/** @internal */
export const SessionMessage$inboundSchema: z.ZodType<
  SessionMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DialogRole$inboundSchema,
  dialog: DialogMessage$inboundSchema,
  tool_calls: z.array(DialogToolCall$inboundSchema),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type SessionMessage$Outbound = {
  role: string;
  dialog: DialogMessage$Outbound;
  tool_calls: Array<DialogToolCall$Outbound>;
  timestamp: string;
};

/** @internal */
export const SessionMessage$outboundSchema: z.ZodType<
  SessionMessage$Outbound,
  z.ZodTypeDef,
  SessionMessage
> = z.object({
  role: DialogRole$outboundSchema,
  dialog: DialogMessage$outboundSchema,
  toolCalls: z.array(DialogToolCall$outboundSchema),
  timestamp: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionMessage$ {
  /** @deprecated use `SessionMessage$inboundSchema` instead. */
  export const inboundSchema = SessionMessage$inboundSchema;
  /** @deprecated use `SessionMessage$outboundSchema` instead. */
  export const outboundSchema = SessionMessage$outboundSchema;
  /** @deprecated use `SessionMessage$Outbound` instead. */
  export type Outbound = SessionMessage$Outbound;
}

export function sessionMessageToJSON(sessionMessage: SessionMessage): string {
  return JSON.stringify(SessionMessage$outboundSchema.parse(sessionMessage));
}

export function sessionMessageFromJSON(
  jsonString: string,
): SafeParseResult<SessionMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionMessage' from JSON`,
  );
}
