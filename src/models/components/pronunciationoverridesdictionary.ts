/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DictionaryMetadata,
  DictionaryMetadata$inboundSchema,
  DictionaryMetadata$Outbound,
  DictionaryMetadata$outboundSchema,
} from "./dictionarymetadata.js";
import {
  PronunciationOverride,
  PronunciationOverride$inboundSchema,
  PronunciationOverride$Outbound,
  PronunciationOverride$outboundSchema,
} from "./pronunciationoverride.js";
import {
  VoiceDisplayInfo,
  VoiceDisplayInfo$inboundSchema,
  VoiceDisplayInfo$Outbound,
  VoiceDisplayInfo$outboundSchema,
} from "./voicedisplayinfo.js";

/**
 * Container for all TTS pronunciation overrides belonging to the sub-organisation.
 *
 * @remarks
 *
 * Stored in the `config_values` table via ConfigDao. The Syllable API persists uploaded CSV
 * pronunciation rules, and Bubblegum's PronunciationOverridesPlugin reads them to apply text
 * replacements before TTS processing.
 *
 * Example:
 *     dao = ConfigDao(db_session)
 *     await dao.register_model('tts.pronunciations', PronunciationOverridesDictionary)
 *
 *     pod = PronunciationOverridesDictionary(
 *         pronunciations=[...],
 *         metadata=DictionaryMetadata(entries=10, hash='sha256:...'),
 *     )
 *     result = await dao.upsert('pronunciations_v1', pod)
 *
 *     record = await dao.get('pronunciations_v1', PronunciationOverridesDictionary)
 *     if record:
 *         pronunciations = record.value.pronunciations
 */
export type PronunciationOverridesDictionary = {
  type?: string | undefined;
  pronunciations: Array<PronunciationOverride>;
  voices?: { [k: string]: VoiceDisplayInfo } | undefined;
  /**
   * Audit metadata associated with a dictionary.
   */
  metadata: DictionaryMetadata;
};

/** @internal */
export const PronunciationOverridesDictionary$inboundSchema: z.ZodType<
  PronunciationOverridesDictionary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("pronunciations_v1"),
  pronunciations: z.array(PronunciationOverride$inboundSchema),
  voices: z.record(VoiceDisplayInfo$inboundSchema).optional(),
  metadata: DictionaryMetadata$inboundSchema,
});

/** @internal */
export type PronunciationOverridesDictionary$Outbound = {
  type: string;
  pronunciations: Array<PronunciationOverride$Outbound>;
  voices?: { [k: string]: VoiceDisplayInfo$Outbound } | undefined;
  metadata: DictionaryMetadata$Outbound;
};

/** @internal */
export const PronunciationOverridesDictionary$outboundSchema: z.ZodType<
  PronunciationOverridesDictionary$Outbound,
  z.ZodTypeDef,
  PronunciationOverridesDictionary
> = z.object({
  type: z.string().default("pronunciations_v1"),
  pronunciations: z.array(PronunciationOverride$outboundSchema),
  voices: z.record(VoiceDisplayInfo$outboundSchema).optional(),
  metadata: DictionaryMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PronunciationOverridesDictionary$ {
  /** @deprecated use `PronunciationOverridesDictionary$inboundSchema` instead. */
  export const inboundSchema = PronunciationOverridesDictionary$inboundSchema;
  /** @deprecated use `PronunciationOverridesDictionary$outboundSchema` instead. */
  export const outboundSchema = PronunciationOverridesDictionary$outboundSchema;
  /** @deprecated use `PronunciationOverridesDictionary$Outbound` instead. */
  export type Outbound = PronunciationOverridesDictionary$Outbound;
}

export function pronunciationOverridesDictionaryToJSON(
  pronunciationOverridesDictionary: PronunciationOverridesDictionary,
): string {
  return JSON.stringify(
    PronunciationOverridesDictionary$outboundSchema.parse(
      pronunciationOverridesDictionary,
    ),
  );
}

export function pronunciationOverridesDictionaryFromJSON(
  jsonString: string,
): SafeParseResult<PronunciationOverridesDictionary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PronunciationOverridesDictionary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PronunciationOverridesDictionary' from JSON`,
  );
}
