/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PermissionResponse,
  PermissionResponse$inboundSchema,
  PermissionResponse$Outbound,
  PermissionResponse$outboundSchema,
} from "./permissionresponse.js";

/**
 * Information about a group of permissions related to the same feature.
 */
export type PermissionGroupResponse = {
  /**
   * Name of the permission group
   */
  name: string;
  /**
   * Description of the permission group
   */
  description: string;
  /**
   * Permissions in the group
   */
  permissions: Array<PermissionResponse>;
};

/** @internal */
export const PermissionGroupResponse$inboundSchema: z.ZodType<
  PermissionGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  permissions: z.array(PermissionResponse$inboundSchema),
});

/** @internal */
export type PermissionGroupResponse$Outbound = {
  name: string;
  description: string;
  permissions: Array<PermissionResponse$Outbound>;
};

/** @internal */
export const PermissionGroupResponse$outboundSchema: z.ZodType<
  PermissionGroupResponse$Outbound,
  z.ZodTypeDef,
  PermissionGroupResponse
> = z.object({
  name: z.string(),
  description: z.string(),
  permissions: z.array(PermissionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionGroupResponse$ {
  /** @deprecated use `PermissionGroupResponse$inboundSchema` instead. */
  export const inboundSchema = PermissionGroupResponse$inboundSchema;
  /** @deprecated use `PermissionGroupResponse$outboundSchema` instead. */
  export const outboundSchema = PermissionGroupResponse$outboundSchema;
  /** @deprecated use `PermissionGroupResponse$Outbound` instead. */
  export type Outbound = PermissionGroupResponse$Outbound;
}

export function permissionGroupResponseToJSON(
  permissionGroupResponse: PermissionGroupResponse,
): string {
  return JSON.stringify(
    PermissionGroupResponse$outboundSchema.parse(permissionGroupResponse),
  );
}

export function permissionGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<PermissionGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermissionGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermissionGroupResponse' from JSON`,
  );
}
