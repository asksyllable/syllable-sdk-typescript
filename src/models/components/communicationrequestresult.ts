/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestStatus,
  RequestStatus$inboundSchema,
  RequestStatus$outboundSchema,
} from "./requeststatus.js";

/**
 * Variables for request
 */
export type RequestVariables = {};

export type Insights = {};

export type CommunicationRequestResult = {
  /**
   * ID for target outreach (unique within batch)
   */
  referenceId: string;
  /**
   * Target phone number or email address
   */
  target: string;
  /**
   * Variables for request
   */
  requestVariables: RequestVariables;
  /**
   * Channel manager SID
   */
  channelManagerSid?: string | null | undefined;
  /**
   * Timestamp of request creation
   */
  createdAt?: string | undefined;
  /**
   * Timestamp at which request was sent
   */
  sentAt?: string | null | undefined;
  /**
   * Number of attempts for request
   */
  attemptCount?: number | undefined;
  /**
   * Unique ID for call session
   */
  sessionId?: number | null | undefined;
  /**
   * Unique ID for conversation
   */
  conversationId?: number | null | undefined;
  /**
   * Status of a communication request.
   */
  requestStatus?: RequestStatus | undefined;
  /**
   * Status of request in channel manager
   */
  channelManagerStatus?: string | null | undefined;
  /**
   * Status of session in insight workflow
   */
  insightsStatus?: string | null | undefined;
  /**
   * Insights from call
   */
  insights?: Insights | null | undefined;
};

/** @internal */
export const RequestVariables$inboundSchema: z.ZodType<
  RequestVariables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RequestVariables$Outbound = {};

/** @internal */
export const RequestVariables$outboundSchema: z.ZodType<
  RequestVariables$Outbound,
  z.ZodTypeDef,
  RequestVariables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestVariables$ {
  /** @deprecated use `RequestVariables$inboundSchema` instead. */
  export const inboundSchema = RequestVariables$inboundSchema;
  /** @deprecated use `RequestVariables$outboundSchema` instead. */
  export const outboundSchema = RequestVariables$outboundSchema;
  /** @deprecated use `RequestVariables$Outbound` instead. */
  export type Outbound = RequestVariables$Outbound;
}

export function requestVariablesToJSON(
  requestVariables: RequestVariables,
): string {
  return JSON.stringify(
    RequestVariables$outboundSchema.parse(requestVariables),
  );
}

export function requestVariablesFromJSON(
  jsonString: string,
): SafeParseResult<RequestVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestVariables' from JSON`,
  );
}

/** @internal */
export const Insights$inboundSchema: z.ZodType<
  Insights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Insights$Outbound = {};

/** @internal */
export const Insights$outboundSchema: z.ZodType<
  Insights$Outbound,
  z.ZodTypeDef,
  Insights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Insights$ {
  /** @deprecated use `Insights$inboundSchema` instead. */
  export const inboundSchema = Insights$inboundSchema;
  /** @deprecated use `Insights$outboundSchema` instead. */
  export const outboundSchema = Insights$outboundSchema;
  /** @deprecated use `Insights$Outbound` instead. */
  export type Outbound = Insights$Outbound;
}

export function insightsToJSON(insights: Insights): string {
  return JSON.stringify(Insights$outboundSchema.parse(insights));
}

export function insightsFromJSON(
  jsonString: string,
): SafeParseResult<Insights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Insights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Insights' from JSON`,
  );
}

/** @internal */
export const CommunicationRequestResult$inboundSchema: z.ZodType<
  CommunicationRequestResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference_id: z.string(),
  target: z.string(),
  request_variables: z.lazy(() => RequestVariables$inboundSchema),
  channel_manager_sid: z.nullable(z.string()).optional(),
  created_at: z.string().optional(),
  sent_at: z.nullable(z.string()).optional(),
  attempt_count: z.number().int().default(0),
  session_id: z.nullable(z.number().int()).optional(),
  conversation_id: z.nullable(z.number().int()).optional(),
  request_status: RequestStatus$inboundSchema.optional(),
  channel_manager_status: z.nullable(z.string()).optional(),
  insights_status: z.nullable(z.string()).optional(),
  insights: z.nullable(z.lazy(() => Insights$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "reference_id": "referenceId",
    "request_variables": "requestVariables",
    "channel_manager_sid": "channelManagerSid",
    "created_at": "createdAt",
    "sent_at": "sentAt",
    "attempt_count": "attemptCount",
    "session_id": "sessionId",
    "conversation_id": "conversationId",
    "request_status": "requestStatus",
    "channel_manager_status": "channelManagerStatus",
    "insights_status": "insightsStatus",
  });
});

/** @internal */
export type CommunicationRequestResult$Outbound = {
  reference_id: string;
  target: string;
  request_variables: RequestVariables$Outbound;
  channel_manager_sid?: string | null | undefined;
  created_at?: string | undefined;
  sent_at?: string | null | undefined;
  attempt_count: number;
  session_id?: number | null | undefined;
  conversation_id?: number | null | undefined;
  request_status?: string | undefined;
  channel_manager_status?: string | null | undefined;
  insights_status?: string | null | undefined;
  insights?: Insights$Outbound | null | undefined;
};

/** @internal */
export const CommunicationRequestResult$outboundSchema: z.ZodType<
  CommunicationRequestResult$Outbound,
  z.ZodTypeDef,
  CommunicationRequestResult
> = z.object({
  referenceId: z.string(),
  target: z.string(),
  requestVariables: z.lazy(() => RequestVariables$outboundSchema),
  channelManagerSid: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  sentAt: z.nullable(z.string()).optional(),
  attemptCount: z.number().int().default(0),
  sessionId: z.nullable(z.number().int()).optional(),
  conversationId: z.nullable(z.number().int()).optional(),
  requestStatus: RequestStatus$outboundSchema.optional(),
  channelManagerStatus: z.nullable(z.string()).optional(),
  insightsStatus: z.nullable(z.string()).optional(),
  insights: z.nullable(z.lazy(() => Insights$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    referenceId: "reference_id",
    requestVariables: "request_variables",
    channelManagerSid: "channel_manager_sid",
    createdAt: "created_at",
    sentAt: "sent_at",
    attemptCount: "attempt_count",
    sessionId: "session_id",
    conversationId: "conversation_id",
    requestStatus: "request_status",
    channelManagerStatus: "channel_manager_status",
    insightsStatus: "insights_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationRequestResult$ {
  /** @deprecated use `CommunicationRequestResult$inboundSchema` instead. */
  export const inboundSchema = CommunicationRequestResult$inboundSchema;
  /** @deprecated use `CommunicationRequestResult$outboundSchema` instead. */
  export const outboundSchema = CommunicationRequestResult$outboundSchema;
  /** @deprecated use `CommunicationRequestResult$Outbound` instead. */
  export type Outbound = CommunicationRequestResult$Outbound;
}

export function communicationRequestResultToJSON(
  communicationRequestResult: CommunicationRequestResult,
): string {
  return JSON.stringify(
    CommunicationRequestResult$outboundSchema.parse(communicationRequestResult),
  );
}

export function communicationRequestResultFromJSON(
  jsonString: string,
): SafeParseResult<CommunicationRequestResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommunicationRequestResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommunicationRequestResult' from JSON`,
  );
}
