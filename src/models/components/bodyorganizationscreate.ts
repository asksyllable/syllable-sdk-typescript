/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BodyOrganizationsCreateLogo = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyOrganizationsCreate = {
  /**
   * The organization logo image file to upload. Must be a PNG file and 120x120 pixels.
   */
  logo: BodyOrganizationsCreateLogo | Blob;
  /**
   * The human-readable display name of the organization
   */
  displayName: string;
  /**
   * Description of the organization
   */
  description?: string | null | undefined;
  /**
   * Comma-delimited list of domains that users at the organization may have in their email addresses
   */
  domains: string;
};

/** @internal */
export const BodyOrganizationsCreateLogo$inboundSchema: z.ZodType<
  BodyOrganizationsCreateLogo,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type BodyOrganizationsCreateLogo$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const BodyOrganizationsCreateLogo$outboundSchema: z.ZodType<
  BodyOrganizationsCreateLogo$Outbound,
  z.ZodTypeDef,
  BodyOrganizationsCreateLogo
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOrganizationsCreateLogo$ {
  /** @deprecated use `BodyOrganizationsCreateLogo$inboundSchema` instead. */
  export const inboundSchema = BodyOrganizationsCreateLogo$inboundSchema;
  /** @deprecated use `BodyOrganizationsCreateLogo$outboundSchema` instead. */
  export const outboundSchema = BodyOrganizationsCreateLogo$outboundSchema;
  /** @deprecated use `BodyOrganizationsCreateLogo$Outbound` instead. */
  export type Outbound = BodyOrganizationsCreateLogo$Outbound;
}

export function bodyOrganizationsCreateLogoToJSON(
  bodyOrganizationsCreateLogo: BodyOrganizationsCreateLogo,
): string {
  return JSON.stringify(
    BodyOrganizationsCreateLogo$outboundSchema.parse(
      bodyOrganizationsCreateLogo,
    ),
  );
}

export function bodyOrganizationsCreateLogoFromJSON(
  jsonString: string,
): SafeParseResult<BodyOrganizationsCreateLogo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOrganizationsCreateLogo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOrganizationsCreateLogo' from JSON`,
  );
}

/** @internal */
export const BodyOrganizationsCreate$inboundSchema: z.ZodType<
  BodyOrganizationsCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  logo: z.lazy(() => BodyOrganizationsCreateLogo$inboundSchema),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type BodyOrganizationsCreate$Outbound = {
  logo: BodyOrganizationsCreateLogo$Outbound | Blob;
  display_name: string;
  description?: string | null | undefined;
  domains: string;
};

/** @internal */
export const BodyOrganizationsCreate$outboundSchema: z.ZodType<
  BodyOrganizationsCreate$Outbound,
  z.ZodTypeDef,
  BodyOrganizationsCreate
> = z.object({
  logo: z.lazy(() => BodyOrganizationsCreateLogo$outboundSchema).or(
    blobLikeSchema,
  ),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOrganizationsCreate$ {
  /** @deprecated use `BodyOrganizationsCreate$inboundSchema` instead. */
  export const inboundSchema = BodyOrganizationsCreate$inboundSchema;
  /** @deprecated use `BodyOrganizationsCreate$outboundSchema` instead. */
  export const outboundSchema = BodyOrganizationsCreate$outboundSchema;
  /** @deprecated use `BodyOrganizationsCreate$Outbound` instead. */
  export type Outbound = BodyOrganizationsCreate$Outbound;
}

export function bodyOrganizationsCreateToJSON(
  bodyOrganizationsCreate: BodyOrganizationsCreate,
): string {
  return JSON.stringify(
    BodyOrganizationsCreate$outboundSchema.parse(bodyOrganizationsCreate),
  );
}

export function bodyOrganizationsCreateFromJSON(
  jsonString: string,
): SafeParseResult<BodyOrganizationsCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOrganizationsCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOrganizationsCreate' from JSON`,
  );
}
