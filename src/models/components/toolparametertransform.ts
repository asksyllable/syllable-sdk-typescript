/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolParameterTransformCondition,
  ToolParameterTransformCondition$inboundSchema,
  ToolParameterTransformCondition$Outbound,
  ToolParameterTransformCondition$outboundSchema,
} from "./toolparametertransformcondition.js";

/**
 * The action to perform on the value: `default` means only set the value (using the `format` field) if the parameter doesn't exist or is empty, `override` means always set the value, and `remove` means remove the parameter value.
 */
export const Action = {
  Default: "default",
  Override: "override",
  Remove: "remove",
} as const;
/**
 * The action to perform on the value: `default` means only set the value (using the `format` field) if the parameter doesn't exist or is empty, `override` means always set the value, and `remove` means remove the parameter value.
 */
export type Action = ClosedEnum<typeof Action>;

/**
 * A transform to be applied to the value of a parameter.
 */
export type ToolParameterTransform = {
  /**
   * Only apply the transform if the condition is met.
   */
  when?: ToolParameterTransformCondition | null | undefined;
  /**
   * The action to perform on the value: `default` means only set the value (using the `format` field) if the parameter doesn't exist or is empty, `override` means always set the value, and `remove` means remove the parameter value.
   */
  action?: Action | undefined;
  /**
   * The string value to use for the parameter. The value will be evaluated with the Python `str.format` method, for example, `Hello, {name}!`
   */
  format?: string | null | undefined;
};

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const ToolParameterTransform$inboundSchema: z.ZodType<
  ToolParameterTransform,
  z.ZodTypeDef,
  unknown
> = z.object({
  when: z.nullable(ToolParameterTransformCondition$inboundSchema).optional(),
  action: Action$inboundSchema.default("default"),
  format: z.nullable(z.string()).optional(),
});

/** @internal */
export type ToolParameterTransform$Outbound = {
  when?: ToolParameterTransformCondition$Outbound | null | undefined;
  action: string;
  format?: string | null | undefined;
};

/** @internal */
export const ToolParameterTransform$outboundSchema: z.ZodType<
  ToolParameterTransform$Outbound,
  z.ZodTypeDef,
  ToolParameterTransform
> = z.object({
  when: z.nullable(ToolParameterTransformCondition$outboundSchema).optional(),
  action: Action$outboundSchema.default("default"),
  format: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolParameterTransform$ {
  /** @deprecated use `ToolParameterTransform$inboundSchema` instead. */
  export const inboundSchema = ToolParameterTransform$inboundSchema;
  /** @deprecated use `ToolParameterTransform$outboundSchema` instead. */
  export const outboundSchema = ToolParameterTransform$outboundSchema;
  /** @deprecated use `ToolParameterTransform$Outbound` instead. */
  export type Outbound = ToolParameterTransform$Outbound;
}

export function toolParameterTransformToJSON(
  toolParameterTransform: ToolParameterTransform,
): string {
  return JSON.stringify(
    ToolParameterTransform$outboundSchema.parse(toolParameterTransform),
  );
}

export function toolParameterTransformFromJSON(
  jsonString: string,
): SafeParseResult<ToolParameterTransform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolParameterTransform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolParameterTransform' from JSON`,
  );
}
