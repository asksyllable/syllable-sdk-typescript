/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Event,
  Event$inboundSchema,
  Event$Outbound,
  Event$outboundSchema,
} from "./event.js";

export type ListResponseEvent = {
  /**
   * List of items returned from the query
   */
  items: Array<Event>;
  /**
   * The page number of the results (0-based)
   */
  page: number;
  /**
   * The number of items returned per page
   */
  pageSize: number;
  /**
   * The total number of pages of results given the indicated page size
   */
  totalPages?: number | null | undefined;
  /**
   * The total number of items returned from the query
   */
  totalCount?: number | null | undefined;
};

/** @internal */
export const ListResponseEvent$inboundSchema: z.ZodType<
  ListResponseEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(Event$inboundSchema),
  page: z.number().int(),
  page_size: z.number().int(),
  total_pages: z.nullable(z.number().int()).optional(),
  total_count: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "total_pages": "totalPages",
    "total_count": "totalCount",
  });
});

/** @internal */
export type ListResponseEvent$Outbound = {
  items: Array<Event$Outbound>;
  page: number;
  page_size: number;
  total_pages?: number | null | undefined;
  total_count?: number | null | undefined;
};

/** @internal */
export const ListResponseEvent$outboundSchema: z.ZodType<
  ListResponseEvent$Outbound,
  z.ZodTypeDef,
  ListResponseEvent
> = z.object({
  items: z.array(Event$outboundSchema),
  page: z.number().int(),
  pageSize: z.number().int(),
  totalPages: z.nullable(z.number().int()).optional(),
  totalCount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    totalPages: "total_pages",
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResponseEvent$ {
  /** @deprecated use `ListResponseEvent$inboundSchema` instead. */
  export const inboundSchema = ListResponseEvent$inboundSchema;
  /** @deprecated use `ListResponseEvent$outboundSchema` instead. */
  export const outboundSchema = ListResponseEvent$outboundSchema;
  /** @deprecated use `ListResponseEvent$Outbound` instead. */
  export type Outbound = ListResponseEvent$Outbound;
}

export function listResponseEventToJSON(
  listResponseEvent: ListResponseEvent,
): string {
  return JSON.stringify(
    ListResponseEvent$outboundSchema.parse(listResponseEvent),
  );
}

export function listResponseEventFromJSON(
  jsonString: string,
): SafeParseResult<ListResponseEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResponseEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResponseEvent' from JSON`,
  );
}
