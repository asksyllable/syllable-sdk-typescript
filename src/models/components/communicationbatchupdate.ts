/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommunicationBatchUpdate = {
  /**
   * Whether the batch is on HOLD. When on HOLD, no outreach will be made.
   */
  paused?: boolean | null | undefined;
  /**
   * Timestamp of batch expiration
   */
  expiresOn?: string | null | undefined;
};

/** @internal */
export const CommunicationBatchUpdate$inboundSchema: z.ZodType<
  CommunicationBatchUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  paused: z.nullable(z.boolean()).optional(),
  expires_on: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expires_on": "expiresOn",
  });
});

/** @internal */
export type CommunicationBatchUpdate$Outbound = {
  paused?: boolean | null | undefined;
  expires_on?: string | null | undefined;
};

/** @internal */
export const CommunicationBatchUpdate$outboundSchema: z.ZodType<
  CommunicationBatchUpdate$Outbound,
  z.ZodTypeDef,
  CommunicationBatchUpdate
> = z.object({
  paused: z.nullable(z.boolean()).optional(),
  expiresOn: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expiresOn: "expires_on",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationBatchUpdate$ {
  /** @deprecated use `CommunicationBatchUpdate$inboundSchema` instead. */
  export const inboundSchema = CommunicationBatchUpdate$inboundSchema;
  /** @deprecated use `CommunicationBatchUpdate$outboundSchema` instead. */
  export const outboundSchema = CommunicationBatchUpdate$outboundSchema;
  /** @deprecated use `CommunicationBatchUpdate$Outbound` instead. */
  export type Outbound = CommunicationBatchUpdate$Outbound;
}

export function communicationBatchUpdateToJSON(
  communicationBatchUpdate: CommunicationBatchUpdate,
): string {
  return JSON.stringify(
    CommunicationBatchUpdate$outboundSchema.parse(communicationBatchUpdate),
  );
}

export function communicationBatchUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CommunicationBatchUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommunicationBatchUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommunicationBatchUpdate' from JSON`,
  );
}
