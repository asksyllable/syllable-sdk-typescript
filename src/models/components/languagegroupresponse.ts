/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LanguageConfig,
  LanguageConfig$inboundSchema,
  LanguageConfig$Outbound,
  LanguageConfig$outboundSchema,
} from "./languageconfig.js";
import {
  LanguageGroupAgentInfo,
  LanguageGroupAgentInfo$inboundSchema,
  LanguageGroupAgentInfo$Outbound,
  LanguageGroupAgentInfo$outboundSchema,
} from "./languagegroupagentinfo.js";

export type LanguageGroupResponse = {
  /**
   * The name of the language group.
   */
  name: string;
  /**
   * Description of the language group.
   */
  description?: string | null | undefined;
  /**
   * Voice and DTMF configurations for each language in the group.
   */
  languageConfigs: Array<LanguageConfig>;
  /**
   * Whether a message using the language group to generate a language DTMF menu should skip the agent's current language in the menu.
   */
  skipCurrentLanguageInMessage: boolean;
  /**
   * The ID of the language group to update.
   */
  id: number;
  /**
   * Comments for the most recent edit to the language group.
   */
  editComments?: string | null | undefined;
  /**
   * IDs and names of the agents linked to the language group
   */
  agentsInfo?: Array<LanguageGroupAgentInfo> | null | undefined;
  /**
   * Email of the user who last updated the language group.
   */
  lastUpdatedBy: string;
};

/** @internal */
export const LanguageGroupResponse$inboundSchema: z.ZodType<
  LanguageGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  language_configs: z.array(LanguageConfig$inboundSchema),
  skip_current_language_in_message: z.boolean(),
  id: z.number().int(),
  edit_comments: z.nullable(z.string()).optional(),
  agents_info: z.nullable(z.array(LanguageGroupAgentInfo$inboundSchema))
    .optional(),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "language_configs": "languageConfigs",
    "skip_current_language_in_message": "skipCurrentLanguageInMessage",
    "edit_comments": "editComments",
    "agents_info": "agentsInfo",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type LanguageGroupResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  language_configs: Array<LanguageConfig$Outbound>;
  skip_current_language_in_message: boolean;
  id: number;
  edit_comments?: string | null | undefined;
  agents_info?: Array<LanguageGroupAgentInfo$Outbound> | null | undefined;
  last_updated_by: string;
};

/** @internal */
export const LanguageGroupResponse$outboundSchema: z.ZodType<
  LanguageGroupResponse$Outbound,
  z.ZodTypeDef,
  LanguageGroupResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  languageConfigs: z.array(LanguageConfig$outboundSchema),
  skipCurrentLanguageInMessage: z.boolean(),
  id: z.number().int(),
  editComments: z.nullable(z.string()).optional(),
  agentsInfo: z.nullable(z.array(LanguageGroupAgentInfo$outboundSchema))
    .optional(),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    languageConfigs: "language_configs",
    skipCurrentLanguageInMessage: "skip_current_language_in_message",
    editComments: "edit_comments",
    agentsInfo: "agents_info",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LanguageGroupResponse$ {
  /** @deprecated use `LanguageGroupResponse$inboundSchema` instead. */
  export const inboundSchema = LanguageGroupResponse$inboundSchema;
  /** @deprecated use `LanguageGroupResponse$outboundSchema` instead. */
  export const outboundSchema = LanguageGroupResponse$outboundSchema;
  /** @deprecated use `LanguageGroupResponse$Outbound` instead. */
  export type Outbound = LanguageGroupResponse$Outbound;
}

export function languageGroupResponseToJSON(
  languageGroupResponse: LanguageGroupResponse,
): string {
  return JSON.stringify(
    LanguageGroupResponse$outboundSchema.parse(languageGroupResponse),
  );
}

export function languageGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<LanguageGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LanguageGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LanguageGroupResponse' from JSON`,
  );
}
