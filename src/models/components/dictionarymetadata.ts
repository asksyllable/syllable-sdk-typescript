/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Audit metadata associated with a dictionary.
 */
export type DictionaryMetadata = {
  entries: number;
  hash: string;
  source?: string | null | undefined;
};

/** @internal */
export const DictionaryMetadata$inboundSchema: z.ZodType<
  DictionaryMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  entries: z.number().int(),
  hash: z.string(),
  source: z.nullable(z.string()).optional(),
});

/** @internal */
export type DictionaryMetadata$Outbound = {
  entries: number;
  hash: string;
  source?: string | null | undefined;
};

/** @internal */
export const DictionaryMetadata$outboundSchema: z.ZodType<
  DictionaryMetadata$Outbound,
  z.ZodTypeDef,
  DictionaryMetadata
> = z.object({
  entries: z.number().int(),
  hash: z.string(),
  source: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DictionaryMetadata$ {
  /** @deprecated use `DictionaryMetadata$inboundSchema` instead. */
  export const inboundSchema = DictionaryMetadata$inboundSchema;
  /** @deprecated use `DictionaryMetadata$outboundSchema` instead. */
  export const outboundSchema = DictionaryMetadata$outboundSchema;
  /** @deprecated use `DictionaryMetadata$Outbound` instead. */
  export type Outbound = DictionaryMetadata$Outbound;
}

export function dictionaryMetadataToJSON(
  dictionaryMetadata: DictionaryMetadata,
): string {
  return JSON.stringify(
    DictionaryMetadata$outboundSchema.parse(dictionaryMetadata),
  );
}

export function dictionaryMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DictionaryMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DictionaryMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DictionaryMetadata' from JSON`,
  );
}
