/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Session identifier for workflow queue.
 */
export type InsightsWorkflowQueueSession = {
  /**
   * Unique name for workflow
   */
  workflowName: string;
  /**
   * List of session identifiers
   */
  sessionIdList: Array<number>;
};

/** @internal */
export const InsightsWorkflowQueueSession$inboundSchema: z.ZodType<
  InsightsWorkflowQueueSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_name: z.string(),
  session_id_list: z.array(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    "workflow_name": "workflowName",
    "session_id_list": "sessionIdList",
  });
});

/** @internal */
export type InsightsWorkflowQueueSession$Outbound = {
  workflow_name: string;
  session_id_list: Array<number>;
};

/** @internal */
export const InsightsWorkflowQueueSession$outboundSchema: z.ZodType<
  InsightsWorkflowQueueSession$Outbound,
  z.ZodTypeDef,
  InsightsWorkflowQueueSession
> = z.object({
  workflowName: z.string(),
  sessionIdList: z.array(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    workflowName: "workflow_name",
    sessionIdList: "session_id_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsWorkflowQueueSession$ {
  /** @deprecated use `InsightsWorkflowQueueSession$inboundSchema` instead. */
  export const inboundSchema = InsightsWorkflowQueueSession$inboundSchema;
  /** @deprecated use `InsightsWorkflowQueueSession$outboundSchema` instead. */
  export const outboundSchema = InsightsWorkflowQueueSession$outboundSchema;
  /** @deprecated use `InsightsWorkflowQueueSession$Outbound` instead. */
  export type Outbound = InsightsWorkflowQueueSession$Outbound;
}

export function insightsWorkflowQueueSessionToJSON(
  insightsWorkflowQueueSession: InsightsWorkflowQueueSession,
): string {
  return JSON.stringify(
    InsightsWorkflowQueueSession$outboundSchema.parse(
      insightsWorkflowQueueSession,
    ),
  );
}

export function insightsWorkflowQueueSessionFromJSON(
  jsonString: string,
): SafeParseResult<InsightsWorkflowQueueSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsWorkflowQueueSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsWorkflowQueueSession' from JSON`,
  );
}
