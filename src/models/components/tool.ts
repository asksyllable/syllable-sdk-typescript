/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The definition of the tool
 */
export type Definition = {};

export type Tool = {
  /**
   * The name of the tool
   */
  name: string;
  /**
   * The definition of the tool
   */
  definition?: Definition | undefined;
  /**
   * The service this tool belongs to
   */
  serviceId: number;
  /**
   * The ID of the tool
   */
  id: number;
  /**
   * The name of the service this tool belongs to
   */
  serviceName?: string | null | undefined;
};

/** @internal */
export const Definition$inboundSchema: z.ZodType<
  Definition,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Definition$Outbound = {};

/** @internal */
export const Definition$outboundSchema: z.ZodType<
  Definition$Outbound,
  z.ZodTypeDef,
  Definition
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Definition$ {
  /** @deprecated use `Definition$inboundSchema` instead. */
  export const inboundSchema = Definition$inboundSchema;
  /** @deprecated use `Definition$outboundSchema` instead. */
  export const outboundSchema = Definition$outboundSchema;
  /** @deprecated use `Definition$Outbound` instead. */
  export type Outbound = Definition$Outbound;
}

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    definition: z.lazy(() => Definition$inboundSchema).optional(),
    service_id: z.number().int(),
    id: z.number().int(),
    service_name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "service_id": "serviceId",
      "service_name": "serviceName",
    });
  });

/** @internal */
export type Tool$Outbound = {
  name: string;
  definition?: Definition$Outbound | undefined;
  service_id: number;
  id: number;
  service_name?: string | null | undefined;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.object({
    name: z.string(),
    definition: z.lazy(() => Definition$outboundSchema).optional(),
    serviceId: z.number().int(),
    id: z.number().int(),
    serviceName: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      serviceId: "service_id",
      serviceName: "service_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}
