/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SDKToolDefinition,
  SDKToolDefinition$inboundSchema,
  SDKToolDefinition$Outbound,
  SDKToolDefinition$outboundSchema,
} from "./sdktooldefinition.js";

export type Tool = {
  /**
   * The name of the tool
   */
  name: string;
  definition: SDKToolDefinition;
  /**
   * The service this tool belongs to
   */
  serviceId: number;
  /**
   * The ID of the tool
   */
  id: number;
  /**
   * The name of the service this tool belongs to
   */
  serviceName?: string | null | undefined;
};

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    definition: SDKToolDefinition$inboundSchema,
    service_id: z.number().int(),
    id: z.number().int(),
    service_name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "service_id": "serviceId",
      "service_name": "serviceName",
    });
  });

/** @internal */
export type Tool$Outbound = {
  name: string;
  definition: SDKToolDefinition$Outbound;
  service_id: number;
  id: number;
  service_name?: string | null | undefined;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.object({
    name: z.string(),
    definition: SDKToolDefinition$outboundSchema,
    serviceId: z.number().int(),
    id: z.number().int(),
    serviceName: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      serviceId: "service_id",
      serviceName: "service_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}

export function toolToJSON(tool: Tool): string {
  return JSON.stringify(Tool$outboundSchema.parse(tool));
}

export function toolFromJSON(
  jsonString: string,
): SafeParseResult<Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tool' from JSON`,
  );
}
