/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to create a role.
 */
export type RoleCreateRequest = {
  /**
   * The name of the role.
   */
  name: string;
  /**
   * The description of the role.
   */
  description?: string | null | undefined;
  /**
   * The permissions associated with the role. Available permissions can be found by calling `GET /permissions`.
   */
  permissions: Array<string>;
};

/** @internal */
export const RoleCreateRequest$inboundSchema: z.ZodType<
  RoleCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
});

/** @internal */
export type RoleCreateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  permissions: Array<string>;
};

/** @internal */
export const RoleCreateRequest$outboundSchema: z.ZodType<
  RoleCreateRequest$Outbound,
  z.ZodTypeDef,
  RoleCreateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleCreateRequest$ {
  /** @deprecated use `RoleCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RoleCreateRequest$inboundSchema;
  /** @deprecated use `RoleCreateRequest$outboundSchema` instead. */
  export const outboundSchema = RoleCreateRequest$outboundSchema;
  /** @deprecated use `RoleCreateRequest$Outbound` instead. */
  export type Outbound = RoleCreateRequest$Outbound;
}

export function roleCreateRequestToJSON(
  roleCreateRequest: RoleCreateRequest,
): string {
  return JSON.stringify(
    RoleCreateRequest$outboundSchema.parse(roleCreateRequest),
  );
}

export function roleCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RoleCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleCreateRequest' from JSON`,
  );
}
