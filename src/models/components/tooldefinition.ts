/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  Defaults,
  Defaults$inboundSchema,
  Defaults$Outbound,
  Defaults$outboundSchema,
} from "./defaults.js";
import {
  HttpEndpoint,
  HttpEndpoint$inboundSchema,
  HttpEndpoint$Outbound,
  HttpEndpoint$outboundSchema,
} from "./httpendpoint.js";
import {
  SchemasCortexV1ToolsTool,
  SchemasCortexV1ToolsTool$inboundSchema,
  SchemasCortexV1ToolsTool$Outbound,
  SchemasCortexV1ToolsTool$outboundSchema,
} from "./schemascortexv1toolstool.js";

export type Result = {};

/**
 * A tool that can be called from GPT during the conversation.  The tool can result in one of the following actions depending on the `type` field: - `action`:   An `ActionRequest` to return to Bubblegum in `GetResponseResponse`. - `endpoint`:   An HTTP API call to an external tool. Requires the `endpoint` field to be set too. - `context`:   Sets context variables based on the tool arguments, e.g. to change the session language. Only   `language` and `say` context vars are currently supported, but this will be made more generic.  For example, to change the current session language: ``` {   "type": "context",   "tool": {     "function": {       "name": "set_language",       "parameters": {         "language": {           "type": "string",           "description": "The ISO 639 language code to set for the session e.g. 'en-US'."         },         "message": {           "type": "string",           "description": "Inform the caller we're now speaking in the new language."         }       }     }   } } ```  If `defaults` is provided, it will be used as the default values for the parameters of the tool call, if GPT doesn't provide them: ``` "defaults": {   "hospital": "Queens Hospital" } ```  Some special "transform" handling is supported if the value is a dict with a single `transform` key. The parameter value will be transformed by the given `action` before being used as the default value:  Removing an unwanted parameter: ``` "defaults": {   "hospital": {     "transform": {       "action": "remove"     }   } } ```  Add custom parameters from other parameters using Python's `format`: ``` "defaults": {   "hello": {     "transform": {       "format": "Hello, {name}!"     }   } }  Modify a value conditionally, e.g. change a `city` parameter with value "Bronx" to "The Bronx": ``` {   "defaults": {     "city": {       "transform": {         "when": {"operator": "eq", "key": "city", "value": "Bronx"},         "action": "override",         "format": "The {city}"       }     }   } } ```
 */
export type ToolDefinition = {
  type?: string | null | undefined;
  /**
   * The tool definition to be used by the OpenAI API.
   */
  tool: SchemasCortexV1ToolsTool;
  endpoint?: HttpEndpoint | null | undefined;
  defaults?: Defaults | null | undefined;
  result?: Result | null | undefined;
};

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Result$Outbound = {};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

/** @internal */
export const ToolDefinition$inboundSchema: z.ZodType<
  ToolDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(z.string()).optional(),
  tool: SchemasCortexV1ToolsTool$inboundSchema,
  endpoint: z.nullable(HttpEndpoint$inboundSchema).optional(),
  defaults: z.nullable(Defaults$inboundSchema).optional(),
  result: z.nullable(z.lazy(() => Result$inboundSchema)).optional(),
});

/** @internal */
export type ToolDefinition$Outbound = {
  type?: string | null | undefined;
  tool: SchemasCortexV1ToolsTool$Outbound;
  endpoint?: HttpEndpoint$Outbound | null | undefined;
  defaults?: Defaults$Outbound | null | undefined;
  result?: Result$Outbound | null | undefined;
};

/** @internal */
export const ToolDefinition$outboundSchema: z.ZodType<
  ToolDefinition$Outbound,
  z.ZodTypeDef,
  ToolDefinition
> = z.object({
  type: z.nullable(z.string()).optional(),
  tool: SchemasCortexV1ToolsTool$outboundSchema,
  endpoint: z.nullable(HttpEndpoint$outboundSchema).optional(),
  defaults: z.nullable(Defaults$outboundSchema).optional(),
  result: z.nullable(z.lazy(() => Result$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolDefinition$ {
  /** @deprecated use `ToolDefinition$inboundSchema` instead. */
  export const inboundSchema = ToolDefinition$inboundSchema;
  /** @deprecated use `ToolDefinition$outboundSchema` instead. */
  export const outboundSchema = ToolDefinition$outboundSchema;
  /** @deprecated use `ToolDefinition$Outbound` instead. */
  export type Outbound = ToolDefinition$Outbound;
}
