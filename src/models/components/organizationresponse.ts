/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationResponse = {
  /**
   * The human-readable display name of the organization.
   */
  displayName: string;
  /**
   * Description of the organization.
   */
  description?: string | null | undefined;
  /**
   * Comma-delimited list of domains that users at the organization may have in their email addresses.
   */
  domains: string;
  /**
   * The internal ID of the organization.
   */
  id: number;
  /**
   * Comments for the most recent edit to the organization.
   */
  lastUpdatedComments?: string | null | undefined;
  /**
   * The slug of the organization used for URLs in the Console UI
   */
  slug: string;
  /**
   * The timestamp of the most recent update to the organization
   */
  lastUpdated: Date;
  /**
   * The email of the user who most recently updated the organization
   */
  lastUpdatedBy?: string | null | undefined;
  logoStr: string | null;
};

/** @internal */
export const OrganizationResponse$inboundSchema: z.ZodType<
  OrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.string(),
  id: z.number().int(),
  last_updated_comments: z.nullable(z.string()).optional(),
  slug: z.string(),
  last_updated: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  last_updated_by: z.nullable(z.string()).optional(),
  logo_str: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "last_updated_comments": "lastUpdatedComments",
    "last_updated": "lastUpdated",
    "last_updated_by": "lastUpdatedBy",
    "logo_str": "logoStr",
  });
});

/** @internal */
export type OrganizationResponse$Outbound = {
  display_name: string;
  description?: string | null | undefined;
  domains: string;
  id: number;
  last_updated_comments?: string | null | undefined;
  slug: string;
  last_updated: string;
  last_updated_by?: string | null | undefined;
  logo_str: string | null;
};

/** @internal */
export const OrganizationResponse$outboundSchema: z.ZodType<
  OrganizationResponse$Outbound,
  z.ZodTypeDef,
  OrganizationResponse
> = z.object({
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  domains: z.string(),
  id: z.number().int(),
  lastUpdatedComments: z.nullable(z.string()).optional(),
  slug: z.string(),
  lastUpdated: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.nullable(z.string()).optional(),
  logoStr: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    lastUpdatedComments: "last_updated_comments",
    lastUpdated: "last_updated",
    lastUpdatedBy: "last_updated_by",
    logoStr: "logo_str",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationResponse$ {
  /** @deprecated use `OrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationResponse$inboundSchema;
  /** @deprecated use `OrganizationResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationResponse$outboundSchema;
  /** @deprecated use `OrganizationResponse$Outbound` instead. */
  export type Outbound = OrganizationResponse$Outbound;
}

export function organizationResponseToJSON(
  organizationResponse: OrganizationResponse,
): string {
  return JSON.stringify(
    OrganizationResponse$outboundSchema.parse(organizationResponse),
  );
}

export function organizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationResponse' from JSON`,
  );
}
