/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DirectoryMemberTestResponse = {
  /**
   * Extension to which the user will be transferred if they call at the provided timestamp in the given language
   */
  extension?: string | null | undefined;
};

/** @internal */
export const DirectoryMemberTestResponse$inboundSchema: z.ZodType<
  DirectoryMemberTestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  extension: z.nullable(z.string()).optional(),
});

/** @internal */
export type DirectoryMemberTestResponse$Outbound = {
  extension?: string | null | undefined;
};

/** @internal */
export const DirectoryMemberTestResponse$outboundSchema: z.ZodType<
  DirectoryMemberTestResponse$Outbound,
  z.ZodTypeDef,
  DirectoryMemberTestResponse
> = z.object({
  extension: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryMemberTestResponse$ {
  /** @deprecated use `DirectoryMemberTestResponse$inboundSchema` instead. */
  export const inboundSchema = DirectoryMemberTestResponse$inboundSchema;
  /** @deprecated use `DirectoryMemberTestResponse$outboundSchema` instead. */
  export const outboundSchema = DirectoryMemberTestResponse$outboundSchema;
  /** @deprecated use `DirectoryMemberTestResponse$Outbound` instead. */
  export type Outbound = DirectoryMemberTestResponse$Outbound;
}

export function directoryMemberTestResponseToJSON(
  directoryMemberTestResponse: DirectoryMemberTestResponse,
): string {
  return JSON.stringify(
    DirectoryMemberTestResponse$outboundSchema.parse(
      directoryMemberTestResponse,
    ),
  );
}

export function directoryMemberTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryMemberTestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryMemberTestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryMemberTestResponse' from JSON`,
  );
}
