/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Sample rate as a percentage of calls
 */
export type SampleRate = number | number;

/**
 * List of agents
 */
export type AgentList = Array<number> | Array<string>;

/**
 * Model for the conditions that trigger an insight workflow.
 */
export type InsightWorkflowCondition = {
  /**
   * Minimum duration of the calls in seconds
   */
  minDuration?: number | null | undefined;
  /**
   * Maximum duration of the calls in seconds
   */
  maxDuration?: number | null | undefined;
  /**
   * Sample rate as a percentage of calls
   */
  sampleRate?: number | number | null | undefined;
  /**
   * List of agents
   */
  agentList?: Array<number> | Array<string> | null | undefined;
  /**
   * List of prompts
   */
  promptList?: Array<string> | null | undefined;
  /**
   * List of folder IDs
   */
  folderList?: Array<number> | null | undefined;
  /**
   * Information about the sheet to be used for the workflow
   */
  sheetInfo?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const SampleRate$inboundSchema: z.ZodType<
  SampleRate,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type SampleRate$Outbound = number | number;

/** @internal */
export const SampleRate$outboundSchema: z.ZodType<
  SampleRate$Outbound,
  z.ZodTypeDef,
  SampleRate
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SampleRate$ {
  /** @deprecated use `SampleRate$inboundSchema` instead. */
  export const inboundSchema = SampleRate$inboundSchema;
  /** @deprecated use `SampleRate$outboundSchema` instead. */
  export const outboundSchema = SampleRate$outboundSchema;
  /** @deprecated use `SampleRate$Outbound` instead. */
  export type Outbound = SampleRate$Outbound;
}

export function sampleRateToJSON(sampleRate: SampleRate): string {
  return JSON.stringify(SampleRate$outboundSchema.parse(sampleRate));
}

export function sampleRateFromJSON(
  jsonString: string,
): SafeParseResult<SampleRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SampleRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SampleRate' from JSON`,
  );
}

/** @internal */
export const AgentList$inboundSchema: z.ZodType<
  AgentList,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.number().int()), z.array(z.string())]);

/** @internal */
export type AgentList$Outbound = Array<number> | Array<string>;

/** @internal */
export const AgentList$outboundSchema: z.ZodType<
  AgentList$Outbound,
  z.ZodTypeDef,
  AgentList
> = z.union([z.array(z.number().int()), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentList$ {
  /** @deprecated use `AgentList$inboundSchema` instead. */
  export const inboundSchema = AgentList$inboundSchema;
  /** @deprecated use `AgentList$outboundSchema` instead. */
  export const outboundSchema = AgentList$outboundSchema;
  /** @deprecated use `AgentList$Outbound` instead. */
  export type Outbound = AgentList$Outbound;
}

export function agentListToJSON(agentList: AgentList): string {
  return JSON.stringify(AgentList$outboundSchema.parse(agentList));
}

export function agentListFromJSON(
  jsonString: string,
): SafeParseResult<AgentList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentList' from JSON`,
  );
}

/** @internal */
export const InsightWorkflowCondition$inboundSchema: z.ZodType<
  InsightWorkflowCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  min_duration: z.nullable(z.number().int()).optional(),
  max_duration: z.nullable(z.number().int()).optional(),
  sample_rate: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  agent_list: z.nullable(
    z.union([z.array(z.number().int()), z.array(z.string())]),
  ).optional(),
  prompt_list: z.nullable(z.array(z.string())).optional(),
  folder_list: z.nullable(z.array(z.number().int())).optional(),
  sheet_info: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "min_duration": "minDuration",
    "max_duration": "maxDuration",
    "sample_rate": "sampleRate",
    "agent_list": "agentList",
    "prompt_list": "promptList",
    "folder_list": "folderList",
    "sheet_info": "sheetInfo",
  });
});

/** @internal */
export type InsightWorkflowCondition$Outbound = {
  min_duration?: number | null | undefined;
  max_duration?: number | null | undefined;
  sample_rate?: number | number | null | undefined;
  agent_list?: Array<number> | Array<string> | null | undefined;
  prompt_list?: Array<string> | null | undefined;
  folder_list?: Array<number> | null | undefined;
  sheet_info?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const InsightWorkflowCondition$outboundSchema: z.ZodType<
  InsightWorkflowCondition$Outbound,
  z.ZodTypeDef,
  InsightWorkflowCondition
> = z.object({
  minDuration: z.nullable(z.number().int()).optional(),
  maxDuration: z.nullable(z.number().int()).optional(),
  sampleRate: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  agentList: z.nullable(
    z.union([z.array(z.number().int()), z.array(z.string())]),
  ).optional(),
  promptList: z.nullable(z.array(z.string())).optional(),
  folderList: z.nullable(z.array(z.number().int())).optional(),
  sheetInfo: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    minDuration: "min_duration",
    maxDuration: "max_duration",
    sampleRate: "sample_rate",
    agentList: "agent_list",
    promptList: "prompt_list",
    folderList: "folder_list",
    sheetInfo: "sheet_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowCondition$ {
  /** @deprecated use `InsightWorkflowCondition$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowCondition$inboundSchema;
  /** @deprecated use `InsightWorkflowCondition$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowCondition$outboundSchema;
  /** @deprecated use `InsightWorkflowCondition$Outbound` instead. */
  export type Outbound = InsightWorkflowCondition$Outbound;
}

export function insightWorkflowConditionToJSON(
  insightWorkflowCondition: InsightWorkflowCondition,
): string {
  return JSON.stringify(
    InsightWorkflowCondition$outboundSchema.parse(insightWorkflowCondition),
  );
}

export function insightWorkflowConditionFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowCondition' from JSON`,
  );
}
