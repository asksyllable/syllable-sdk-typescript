/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DialogToolCall = {
  /**
   * Tool call ID
   */
  toolCallId: string;
  /**
   * Tool name
   */
  toolName: string;
  /**
   * Tool arguments
   */
  toolArguments?: any | undefined;
  /**
   * Tool result data (only included if tool has propagate_tool_result=true)
   */
  toolResult?: any | null | undefined;
  /**
   * Tool call timestamp
   */
  timestamp: Date;
};

/** @internal */
export const DialogToolCall$inboundSchema: z.ZodType<
  DialogToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_call_id: z.string(),
  tool_name: z.string(),
  tool_arguments: z.any().optional(),
  tool_result: z.nullable(z.any()).optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
    "tool_name": "toolName",
    "tool_arguments": "toolArguments",
    "tool_result": "toolResult",
  });
});

/** @internal */
export type DialogToolCall$Outbound = {
  tool_call_id: string;
  tool_name: string;
  tool_arguments?: any | undefined;
  tool_result?: any | null | undefined;
  timestamp: string;
};

/** @internal */
export const DialogToolCall$outboundSchema: z.ZodType<
  DialogToolCall$Outbound,
  z.ZodTypeDef,
  DialogToolCall
> = z.object({
  toolCallId: z.string(),
  toolName: z.string(),
  toolArguments: z.any().optional(),
  toolResult: z.nullable(z.any()).optional(),
  timestamp: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
    toolName: "tool_name",
    toolArguments: "tool_arguments",
    toolResult: "tool_result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DialogToolCall$ {
  /** @deprecated use `DialogToolCall$inboundSchema` instead. */
  export const inboundSchema = DialogToolCall$inboundSchema;
  /** @deprecated use `DialogToolCall$outboundSchema` instead. */
  export const outboundSchema = DialogToolCall$outboundSchema;
  /** @deprecated use `DialogToolCall$Outbound` instead. */
  export type Outbound = DialogToolCall$Outbound;
}

export function dialogToolCallToJSON(dialogToolCall: DialogToolCall): string {
  return JSON.stringify(DialogToolCall$outboundSchema.parse(dialogToolCall));
}

export function dialogToolCallFromJSON(
  jsonString: string,
): SafeParseResult<DialogToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DialogToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DialogToolCall' from JSON`,
  );
}
