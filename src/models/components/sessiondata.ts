/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SessionMessage,
  SessionMessage$inboundSchema,
  SessionMessage$Outbound,
  SessionMessage$outboundSchema,
} from "./sessionmessage.js";

export type SessionData = {
  /**
   * Session ID
   */
  sessionId: number;
  /**
   * Session source
   */
  source: string;
  /**
   * Session target
   */
  target: string;
  /**
   * Is test session
   */
  isTest: boolean;
  /**
   * Session messages
   */
  messages: Array<SessionMessage>;
};

/** @internal */
export const SessionData$inboundSchema: z.ZodType<
  SessionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.number().int(),
  source: z.string(),
  target: z.string(),
  is_test: z.boolean(),
  messages: z.array(SessionMessage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
    "is_test": "isTest",
  });
});

/** @internal */
export type SessionData$Outbound = {
  session_id: number;
  source: string;
  target: string;
  is_test: boolean;
  messages: Array<SessionMessage$Outbound>;
};

/** @internal */
export const SessionData$outboundSchema: z.ZodType<
  SessionData$Outbound,
  z.ZodTypeDef,
  SessionData
> = z.object({
  sessionId: z.number().int(),
  source: z.string(),
  target: z.string(),
  isTest: z.boolean(),
  messages: z.array(SessionMessage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionData$ {
  /** @deprecated use `SessionData$inboundSchema` instead. */
  export const inboundSchema = SessionData$inboundSchema;
  /** @deprecated use `SessionData$outboundSchema` instead. */
  export const outboundSchema = SessionData$outboundSchema;
  /** @deprecated use `SessionData$Outbound` instead. */
  export type Outbound = SessionData$Outbound;
}

export function sessionDataToJSON(sessionData: SessionData): string {
  return JSON.stringify(SessionData$outboundSchema.parse(sessionData));
}

export function sessionDataFromJSON(
  jsonString: string,
): SafeParseResult<SessionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionData' from JSON`,
  );
}
