/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BodyOrganizationsDelete = {
  /**
   * Comments explaining the deletion
   */
  deleteComments?: string | null | undefined;
};

/** @internal */
export const BodyOrganizationsDelete$inboundSchema: z.ZodType<
  BodyOrganizationsDelete,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_comments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "delete_comments": "deleteComments",
  });
});

/** @internal */
export type BodyOrganizationsDelete$Outbound = {
  delete_comments?: string | null | undefined;
};

/** @internal */
export const BodyOrganizationsDelete$outboundSchema: z.ZodType<
  BodyOrganizationsDelete$Outbound,
  z.ZodTypeDef,
  BodyOrganizationsDelete
> = z.object({
  deleteComments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    deleteComments: "delete_comments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOrganizationsDelete$ {
  /** @deprecated use `BodyOrganizationsDelete$inboundSchema` instead. */
  export const inboundSchema = BodyOrganizationsDelete$inboundSchema;
  /** @deprecated use `BodyOrganizationsDelete$outboundSchema` instead. */
  export const outboundSchema = BodyOrganizationsDelete$outboundSchema;
  /** @deprecated use `BodyOrganizationsDelete$Outbound` instead. */
  export type Outbound = BodyOrganizationsDelete$Outbound;
}

export function bodyOrganizationsDeleteToJSON(
  bodyOrganizationsDelete: BodyOrganizationsDelete,
): string {
  return JSON.stringify(
    BodyOrganizationsDelete$outboundSchema.parse(bodyOrganizationsDelete),
  );
}

export function bodyOrganizationsDeleteFromJSON(
  jsonString: string,
): SafeParseResult<BodyOrganizationsDelete, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOrganizationsDelete$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOrganizationsDelete' from JSON`,
  );
}
