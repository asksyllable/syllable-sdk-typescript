/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionT,
  FunctionT$inboundSchema,
  FunctionT$Outbound,
  FunctionT$outboundSchema,
} from "./function.js";

/**
 * A tool definition to be used by the OpenAI API.
 */
export type SDKInternalTool = {
  /**
   * Always `function`.
   */
  type?: "function" | undefined;
  /**
   * A tool definition to be used by the OpenAI API.
   *
   * @remarks
   *
   * See:
   * - https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling
   */
  function: FunctionT;
};

/** @internal */
export const SDKInternalTool$inboundSchema: z.ZodType<
  SDKInternalTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("function").default("function"),
  function: FunctionT$inboundSchema,
});

/** @internal */
export type SDKInternalTool$Outbound = {
  type: "function";
  function: FunctionT$Outbound;
};

/** @internal */
export const SDKInternalTool$outboundSchema: z.ZodType<
  SDKInternalTool$Outbound,
  z.ZodTypeDef,
  SDKInternalTool
> = z.object({
  type: z.literal("function").default("function" as const),
  function: FunctionT$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SDKInternalTool$ {
  /** @deprecated use `SDKInternalTool$inboundSchema` instead. */
  export const inboundSchema = SDKInternalTool$inboundSchema;
  /** @deprecated use `SDKInternalTool$outboundSchema` instead. */
  export const outboundSchema = SDKInternalTool$outboundSchema;
  /** @deprecated use `SDKInternalTool$Outbound` instead. */
  export type Outbound = SDKInternalTool$Outbound;
}

export function sdkInternalToolToJSON(
  sdkInternalTool: SDKInternalTool,
): string {
  return JSON.stringify(SDKInternalTool$outboundSchema.parse(sdkInternalTool));
}

export function sdkInternalToolFromJSON(
  jsonString: string,
): SafeParseResult<SDKInternalTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SDKInternalTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SDKInternalTool' from JSON`,
  );
}
