/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChannelTargetUpdateRequest = {
  id: number;
  channelId: number | null;
  agentId: number | null;
  target: string | null;
  targetMode: string | null;
  fallbackTarget: string | null;
  isTest: boolean | null;
};

/** @internal */
export const ChannelTargetUpdateRequest$inboundSchema: z.ZodType<
  ChannelTargetUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  channel_id: z.nullable(z.number().int()),
  agent_id: z.nullable(z.number().int()),
  target: z.nullable(z.string()),
  target_mode: z.nullable(z.string()),
  fallback_target: z.nullable(z.string()),
  is_test: z.nullable(z.boolean()),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "agent_id": "agentId",
    "target_mode": "targetMode",
    "fallback_target": "fallbackTarget",
    "is_test": "isTest",
  });
});

/** @internal */
export type ChannelTargetUpdateRequest$Outbound = {
  id: number;
  channel_id: number | null;
  agent_id: number | null;
  target: string | null;
  target_mode: string | null;
  fallback_target: string | null;
  is_test: boolean | null;
};

/** @internal */
export const ChannelTargetUpdateRequest$outboundSchema: z.ZodType<
  ChannelTargetUpdateRequest$Outbound,
  z.ZodTypeDef,
  ChannelTargetUpdateRequest
> = z.object({
  id: z.number().int(),
  channelId: z.nullable(z.number().int()),
  agentId: z.nullable(z.number().int()),
  target: z.nullable(z.string()),
  targetMode: z.nullable(z.string()),
  fallbackTarget: z.nullable(z.string()),
  isTest: z.nullable(z.boolean()),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    agentId: "agent_id",
    targetMode: "target_mode",
    fallbackTarget: "fallback_target",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelTargetUpdateRequest$ {
  /** @deprecated use `ChannelTargetUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ChannelTargetUpdateRequest$inboundSchema;
  /** @deprecated use `ChannelTargetUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ChannelTargetUpdateRequest$outboundSchema;
  /** @deprecated use `ChannelTargetUpdateRequest$Outbound` instead. */
  export type Outbound = ChannelTargetUpdateRequest$Outbound;
}

export function channelTargetUpdateRequestToJSON(
  channelTargetUpdateRequest: ChannelTargetUpdateRequest,
): string {
  return JSON.stringify(
    ChannelTargetUpdateRequest$outboundSchema.parse(channelTargetUpdateRequest),
  );
}

export function channelTargetUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChannelTargetUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelTargetUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelTargetUpdateRequest' from JSON`,
  );
}
