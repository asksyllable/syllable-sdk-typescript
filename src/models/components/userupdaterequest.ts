/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to update an existing user.
 */
export type UserUpdateRequest = {
  /**
   * Email address of the user
   */
  email: string;
  /**
   * First name of the user
   */
  firstName?: string | null | undefined;
  /**
   * Last name of the user
   */
  lastName?: string | null | undefined;
  /**
   * ID of the role assigned to the user
   */
  roleId: number;
  /**
   * Comments for the most recent edit to the user.
   */
  lastUpdatedComments?: string | null | undefined;
};

/** @internal */
export const UserUpdateRequest$inboundSchema: z.ZodType<
  UserUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  role_id: z.number().int(),
  last_updated_comments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "role_id": "roleId",
    "last_updated_comments": "lastUpdatedComments",
  });
});

/** @internal */
export type UserUpdateRequest$Outbound = {
  email: string;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  role_id: number;
  last_updated_comments?: string | null | undefined;
};

/** @internal */
export const UserUpdateRequest$outboundSchema: z.ZodType<
  UserUpdateRequest$Outbound,
  z.ZodTypeDef,
  UserUpdateRequest
> = z.object({
  email: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  roleId: z.number().int(),
  lastUpdatedComments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    roleId: "role_id",
    lastUpdatedComments: "last_updated_comments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateRequest$ {
  /** @deprecated use `UserUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UserUpdateRequest$inboundSchema;
  /** @deprecated use `UserUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UserUpdateRequest$outboundSchema;
  /** @deprecated use `UserUpdateRequest$Outbound` instead. */
  export type Outbound = UserUpdateRequest$Outbound;
}

export function userUpdateRequestToJSON(
  userUpdateRequest: UserUpdateRequest,
): string {
  return JSON.stringify(
    UserUpdateRequest$outboundSchema.parse(userUpdateRequest),
  );
}

export function userUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateRequest' from JSON`,
  );
}
