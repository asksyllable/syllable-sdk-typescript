/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolDefinition,
  ToolDefinition$inboundSchema,
  ToolDefinition$Outbound,
  ToolDefinition$outboundSchema,
} from "./tooldefinition.js";

export type ToolUpdateRequest = {
  /**
   * The name of the tool
   */
  name: string;
  /**
   * A tool that can be called from an LLM during the conversation.
   *
   * @remarks
   *
   * The tool can result in one of the following actions depending on the `type` field:
   * - `action`:
   *   A request to perform an action.
   * - `endpoint`:
   *   An HTTP API call to an external tool. Requires the `endpoint` field to be set too.
   * - `context`:
   *   Sets context variables based on the tool arguments, e.g. to change the session language. Only
   *   `language` and `say` context vars are currently supported, but this will be made more generic.
   *
   * For example, to change the current session language:
   * {
   *   "type": "context",
   *   "tool": {
   *     "function": {
   *       "name": "set_language",
   *       "parameters": {
   *         "language": {
   *           "type": "string",
   *           "description": "The ISO 639 language code to set for the session e.g. 'en-US'."
   *         },
   *         "message": {
   *           "type": "string",
   *           "description": "Inform the caller we're now speaking in the new language."
   *         }
   *       }
   *     }
   *   }
   * }
   *
   * If `defaults` is provided, it will be used as the default values for the parameters of the
   * tool call, if the LLM doesn't provide them:
   * "defaults": {
   *   "hospital": "Queens Hospital"
   * }
   *
   * Some special "transform" handling is supported if the value is a dict with a single `transform`
   * key. The parameter value will be transformed by the given `action` before being used as the
   * default value:
   *
   * Removing an unwanted parameter:
   * "defaults": {
   *   "hospital": {
   *     "transform": {
   *       "action": "remove"
   *     }
   *   }
   * }
   *
   * Using a value from another parameter and converting it to a dictionary:
   * "defaults": {
   *   "tags.hospital": "{vars.hospital}",
   *   "tags.foo": "{params.foo}",
   *   "foo": {
   *     "transform": {
   *       "action": "remove"
   *     }
   *   }
   * }
   *
   * Add custom parameters from other parameters using Python's `format`:
   * "defaults": {
   *   "hello": {
   *     "transform": {
   *       "format": "Hello, {name}!"
   *     }
   *   }
   * }
   *
   * Modify a value conditionally, e.g. change a `city` parameter with value "Bronx" to "The Bronx":
   * {
   *   "defaults": {
   *     "city": {
   *       "transform": {
   *         "when": {"operator": "eq", "key": "city", "value": "Bronx"},
   *         "action": "override",
   *         "format": "The {city}"
   *       }
   *     }
   *   }
   * }
   *
   * Some common transform actions can be abbreviated using the `@` prefix to support a string syntax:
   * "defaults": {
   *   "foo": "@remove",
   *   "name": "@override Hello, {name}!"
   * }
   */
  definition: ToolDefinition;
  /**
   * The service this tool belongs to
   */
  serviceId: number;
  /**
   * The ID of the tool
   */
  id: number;
};

/** @internal */
export const ToolUpdateRequest$inboundSchema: z.ZodType<
  ToolUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  definition: ToolDefinition$inboundSchema,
  service_id: z.number().int(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type ToolUpdateRequest$Outbound = {
  name: string;
  definition: ToolDefinition$Outbound;
  service_id: number;
  id: number;
};

/** @internal */
export const ToolUpdateRequest$outboundSchema: z.ZodType<
  ToolUpdateRequest$Outbound,
  z.ZodTypeDef,
  ToolUpdateRequest
> = z.object({
  name: z.string(),
  definition: ToolDefinition$outboundSchema,
  serviceId: z.number().int(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolUpdateRequest$ {
  /** @deprecated use `ToolUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ToolUpdateRequest$inboundSchema;
  /** @deprecated use `ToolUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ToolUpdateRequest$outboundSchema;
  /** @deprecated use `ToolUpdateRequest$Outbound` instead. */
  export type Outbound = ToolUpdateRequest$Outbound;
}

export function toolUpdateRequestToJSON(
  toolUpdateRequest: ToolUpdateRequest,
): string {
  return JSON.stringify(
    ToolUpdateRequest$outboundSchema.parse(toolUpdateRequest),
  );
}

export function toolUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolUpdateRequest' from JSON`,
  );
}
