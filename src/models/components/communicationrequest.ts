/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommunicationRequest = {
  /**
   * ID for target outreach (unique within batch)
   */
  referenceId: string;
  /**
   * Target phone number
   */
  target: string;
  /**
   * Variables for request
   */
  requestVariables: { [k: string]: string };
};

/** @internal */
export const CommunicationRequest$inboundSchema: z.ZodType<
  CommunicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference_id: z.string(),
  target: z.string(),
  request_variables: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    "reference_id": "referenceId",
    "request_variables": "requestVariables",
  });
});

/** @internal */
export type CommunicationRequest$Outbound = {
  reference_id: string;
  target: string;
  request_variables: { [k: string]: string };
};

/** @internal */
export const CommunicationRequest$outboundSchema: z.ZodType<
  CommunicationRequest$Outbound,
  z.ZodTypeDef,
  CommunicationRequest
> = z.object({
  referenceId: z.string(),
  target: z.string(),
  requestVariables: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    referenceId: "reference_id",
    requestVariables: "request_variables",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationRequest$ {
  /** @deprecated use `CommunicationRequest$inboundSchema` instead. */
  export const inboundSchema = CommunicationRequest$inboundSchema;
  /** @deprecated use `CommunicationRequest$outboundSchema` instead. */
  export const outboundSchema = CommunicationRequest$outboundSchema;
  /** @deprecated use `CommunicationRequest$Outbound` instead. */
  export type Outbound = CommunicationRequest$Outbound;
}

export function communicationRequestToJSON(
  communicationRequest: CommunicationRequest,
): string {
  return JSON.stringify(
    CommunicationRequest$outboundSchema.parse(communicationRequest),
  );
}

export function communicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CommunicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommunicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommunicationRequest' from JSON`,
  );
}
