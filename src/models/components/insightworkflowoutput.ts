/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightToolOutput,
  InsightToolOutput$inboundSchema,
  InsightToolOutput$Outbound,
  InsightToolOutput$outboundSchema,
} from "./insighttooloutput.js";
import {
  InsightWorkflowCondition,
  InsightWorkflowCondition$inboundSchema,
  InsightWorkflowCondition$Outbound,
  InsightWorkflowCondition$outboundSchema,
} from "./insightworkflowcondition.js";
import {
  InsightWorkflowEstimate,
  InsightWorkflowEstimate$inboundSchema,
  InsightWorkflowEstimate$Outbound,
  InsightWorkflowEstimate$outboundSchema,
} from "./insightworkflowestimate.js";

/**
 * Response model for an insight workflow.
 */
export type InsightWorkflowOutput = {
  /**
   * Human-readable name of insight workflow
   */
  name: string;
  /**
   * Source of the workflow
   */
  source: string;
  /**
   * Text description of workflow
   */
  description: string;
  /**
   * Ordered list of IDs of tool configurations to be executed in the workflow
   */
  insightToolIds: Array<number>;
  /**
   * Model for the conditions that trigger an insight workflow.
   */
  conditions: InsightWorkflowCondition;
  /**
   * Target session timestamp the workflow (backfill) should start. An empty value indicates start on activation - live sessions only
   */
  startDatetime?: Date | null | undefined;
  /**
   * Target session timestamp the workflow (backfill) should end. An empty value indicates no end, i.e., include live sessions until deactivation
   */
  endDatetime?: Date | null | undefined;
  /**
   * Internal ID of the insight workflow
   */
  id: number;
  /**
   * List of insight tool configurations used in the workflow
   */
  insightTools: Array<InsightToolOutput>;
  /**
   * Status of the insight workflow
   */
  status: string;
  /**
   * Response model for an insight workflow.
   */
  estimate: InsightWorkflowEstimate;
  /**
   * Number of calls in the workflow queue (pending or processing)
   */
  queueCount?: number | null | undefined;
  /**
   * Timestamp at which the insight workflow was created
   */
  createdAt?: Date | undefined;
  /**
   * Timestamp of most recent update to the insight workflow
   */
  updatedAt?: Date | undefined;
  /**
   * Email of user who last updated Insight Workflow
   */
  lastUpdatedBy: string;
};

/** @internal */
export const InsightWorkflowOutput$inboundSchema: z.ZodType<
  InsightWorkflowOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  source: z.string(),
  description: z.string(),
  insight_tool_ids: z.array(z.number().int()),
  conditions: InsightWorkflowCondition$inboundSchema,
  start_datetime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_datetime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.number().int(),
  insight_tools: z.array(InsightToolOutput$inboundSchema),
  status: z.string(),
  estimate: InsightWorkflowEstimate$inboundSchema,
  queue_count: z.nullable(z.number().int()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "insight_tool_ids": "insightToolIds",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "insight_tools": "insightTools",
    "queue_count": "queueCount",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type InsightWorkflowOutput$Outbound = {
  name: string;
  source: string;
  description: string;
  insight_tool_ids: Array<number>;
  conditions: InsightWorkflowCondition$Outbound;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  id: number;
  insight_tools: Array<InsightToolOutput$Outbound>;
  status: string;
  estimate: InsightWorkflowEstimate$Outbound;
  queue_count?: number | null | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_updated_by: string;
};

/** @internal */
export const InsightWorkflowOutput$outboundSchema: z.ZodType<
  InsightWorkflowOutput$Outbound,
  z.ZodTypeDef,
  InsightWorkflowOutput
> = z.object({
  name: z.string(),
  source: z.string(),
  description: z.string(),
  insightToolIds: z.array(z.number().int()),
  conditions: InsightWorkflowCondition$outboundSchema,
  startDatetime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  endDatetime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.number().int(),
  insightTools: z.array(InsightToolOutput$outboundSchema),
  status: z.string(),
  estimate: InsightWorkflowEstimate$outboundSchema,
  queueCount: z.nullable(z.number().int()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    insightToolIds: "insight_tool_ids",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    insightTools: "insight_tools",
    queueCount: "queue_count",
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowOutput$ {
  /** @deprecated use `InsightWorkflowOutput$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowOutput$inboundSchema;
  /** @deprecated use `InsightWorkflowOutput$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowOutput$outboundSchema;
  /** @deprecated use `InsightWorkflowOutput$Outbound` instead. */
  export type Outbound = InsightWorkflowOutput$Outbound;
}

export function insightWorkflowOutputToJSON(
  insightWorkflowOutput: InsightWorkflowOutput,
): string {
  return JSON.stringify(
    InsightWorkflowOutput$outboundSchema.parse(insightWorkflowOutput),
  );
}

export function insightWorkflowOutputFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowOutput' from JSON`,
  );
}
