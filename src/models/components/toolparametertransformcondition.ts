/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const Operator = {
  Eq: "eq",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

/**
 * A condition to be met for a transform to be applied to the value of a parameter.
 */
export type ToolParameterTransformCondition = {
  /**
   * The name of the parameter to check.
   */
  key: string;
  /**
   * The value to check against the parameter.
   */
  value: string;
  /**
   * The operator to use for the comparison.
   */
  operator?: "eq" | null | undefined;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const ToolParameterTransformCondition$inboundSchema: z.ZodType<
  ToolParameterTransformCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
  operator: z.nullable(z.literal("eq")).optional(),
});

/** @internal */
export type ToolParameterTransformCondition$Outbound = {
  key: string;
  value: string;
  operator: "eq" | null;
};

/** @internal */
export const ToolParameterTransformCondition$outboundSchema: z.ZodType<
  ToolParameterTransformCondition$Outbound,
  z.ZodTypeDef,
  ToolParameterTransformCondition
> = z.object({
  key: z.string(),
  value: z.string(),
  operator: z.nullable(z.literal("eq").default("eq")),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolParameterTransformCondition$ {
  /** @deprecated use `ToolParameterTransformCondition$inboundSchema` instead. */
  export const inboundSchema = ToolParameterTransformCondition$inboundSchema;
  /** @deprecated use `ToolParameterTransformCondition$outboundSchema` instead. */
  export const outboundSchema = ToolParameterTransformCondition$outboundSchema;
  /** @deprecated use `ToolParameterTransformCondition$Outbound` instead. */
  export type Outbound = ToolParameterTransformCondition$Outbound;
}
