/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to test an insight tool.
 */
export type InsightToolTestInput = {
  /**
   * Human readable name of insight tool
   */
  toolName: string;
  /**
   * The session ID of the session to run the tool against
   */
  sessionId: number;
};

/** @internal */
export const InsightToolTestInput$inboundSchema: z.ZodType<
  InsightToolTestInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_name: z.string(),
  session_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "tool_name": "toolName",
    "session_id": "sessionId",
  });
});

/** @internal */
export type InsightToolTestInput$Outbound = {
  tool_name: string;
  session_id: number;
};

/** @internal */
export const InsightToolTestInput$outboundSchema: z.ZodType<
  InsightToolTestInput$Outbound,
  z.ZodTypeDef,
  InsightToolTestInput
> = z.object({
  toolName: z.string(),
  sessionId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    toolName: "tool_name",
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightToolTestInput$ {
  /** @deprecated use `InsightToolTestInput$inboundSchema` instead. */
  export const inboundSchema = InsightToolTestInput$inboundSchema;
  /** @deprecated use `InsightToolTestInput$outboundSchema` instead. */
  export const outboundSchema = InsightToolTestInput$outboundSchema;
  /** @deprecated use `InsightToolTestInput$Outbound` instead. */
  export type Outbound = InsightToolTestInput$Outbound;
}

export function insightToolTestInputToJSON(
  insightToolTestInput: InsightToolTestInput,
): string {
  return JSON.stringify(
    InsightToolTestInput$outboundSchema.parse(insightToolTestInput),
  );
}

export function insightToolTestInputFromJSON(
  jsonString: string,
): SafeParseResult<InsightToolTestInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightToolTestInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightToolTestInput' from JSON`,
  );
}
