/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentVoiceDisplayName,
  AgentVoiceDisplayName$inboundSchema,
  AgentVoiceDisplayName$outboundSchema,
} from "./agentvoicedisplayname.js";
import {
  LanguageCode,
  LanguageCode$inboundSchema,
  LanguageCode$outboundSchema,
} from "./languagecode.js";
import {
  TtsProvider,
  TtsProvider$inboundSchema,
  TtsProvider$outboundSchema,
} from "./ttsprovider.js";

/**
 * Voice and DTMF configurations for a language in a language group. List of available voices
 *
 * @remarks
 * and their supported languages can be fetched from `GET /agents/voices/available/`.
 */
export type LanguageConfig = {
  /**
   * BCP 47 codes of languages that Syllable supports.
   */
  languageCode: LanguageCode;
  /**
   * TTS provider for an agent voice.
   */
  voiceProvider: TtsProvider;
  /**
   * Display names of voices that Syllable supports.
   */
  voiceDisplayName: AgentVoiceDisplayName;
  /**
   * DTMF code that should be used for the language in the menu generated from the language group
   */
  dtmfCode: number;
};

/** @internal */
export const LanguageConfig$inboundSchema: z.ZodType<
  LanguageConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  language_code: LanguageCode$inboundSchema,
  voice_provider: TtsProvider$inboundSchema,
  voice_display_name: AgentVoiceDisplayName$inboundSchema,
  dtmf_code: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "language_code": "languageCode",
    "voice_provider": "voiceProvider",
    "voice_display_name": "voiceDisplayName",
    "dtmf_code": "dtmfCode",
  });
});

/** @internal */
export type LanguageConfig$Outbound = {
  language_code: string;
  voice_provider: string;
  voice_display_name: string;
  dtmf_code: number;
};

/** @internal */
export const LanguageConfig$outboundSchema: z.ZodType<
  LanguageConfig$Outbound,
  z.ZodTypeDef,
  LanguageConfig
> = z.object({
  languageCode: LanguageCode$outboundSchema,
  voiceProvider: TtsProvider$outboundSchema,
  voiceDisplayName: AgentVoiceDisplayName$outboundSchema,
  dtmfCode: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    languageCode: "language_code",
    voiceProvider: "voice_provider",
    voiceDisplayName: "voice_display_name",
    dtmfCode: "dtmf_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LanguageConfig$ {
  /** @deprecated use `LanguageConfig$inboundSchema` instead. */
  export const inboundSchema = LanguageConfig$inboundSchema;
  /** @deprecated use `LanguageConfig$outboundSchema` instead. */
  export const outboundSchema = LanguageConfig$outboundSchema;
  /** @deprecated use `LanguageConfig$Outbound` instead. */
  export type Outbound = LanguageConfig$Outbound;
}

export function languageConfigToJSON(languageConfig: LanguageConfig): string {
  return JSON.stringify(LanguageConfig$outboundSchema.parse(languageConfig));
}

export function languageConfigFromJSON(
  jsonString: string,
): SafeParseResult<LanguageConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LanguageConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LanguageConfig' from JSON`,
  );
}
