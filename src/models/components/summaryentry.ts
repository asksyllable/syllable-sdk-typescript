/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LatencyCategory,
  LatencyCategory$inboundSchema,
  LatencyCategory$outboundSchema,
} from "./latencycategory.js";

/**
 * A summary entry is an aggregation of latency entries by category and sub-category.
 *
 * @remarks
 * It contains the total and average latency for each category.
 */
export type SummaryEntry = {
  category: LatencyCategory;
  subCategory?: string | null | undefined;
  eventCount: number;
  sumMs: number;
  sumStr: string;
  averageMs: number;
  averageStr: string;
};

/** @internal */
export const SummaryEntry$inboundSchema: z.ZodType<
  SummaryEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: LatencyCategory$inboundSchema,
  sub_category: z.nullable(z.string()).optional(),
  event_count: z.number().int(),
  sum_ms: z.number(),
  sum_str: z.string(),
  average_ms: z.number(),
  average_str: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sub_category": "subCategory",
    "event_count": "eventCount",
    "sum_ms": "sumMs",
    "sum_str": "sumStr",
    "average_ms": "averageMs",
    "average_str": "averageStr",
  });
});

/** @internal */
export type SummaryEntry$Outbound = {
  category: string;
  sub_category?: string | null | undefined;
  event_count: number;
  sum_ms: number;
  sum_str: string;
  average_ms: number;
  average_str: string;
};

/** @internal */
export const SummaryEntry$outboundSchema: z.ZodType<
  SummaryEntry$Outbound,
  z.ZodTypeDef,
  SummaryEntry
> = z.object({
  category: LatencyCategory$outboundSchema,
  subCategory: z.nullable(z.string()).optional(),
  eventCount: z.number().int(),
  sumMs: z.number(),
  sumStr: z.string(),
  averageMs: z.number(),
  averageStr: z.string(),
}).transform((v) => {
  return remap$(v, {
    subCategory: "sub_category",
    eventCount: "event_count",
    sumMs: "sum_ms",
    sumStr: "sum_str",
    averageMs: "average_ms",
    averageStr: "average_str",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SummaryEntry$ {
  /** @deprecated use `SummaryEntry$inboundSchema` instead. */
  export const inboundSchema = SummaryEntry$inboundSchema;
  /** @deprecated use `SummaryEntry$outboundSchema` instead. */
  export const outboundSchema = SummaryEntry$outboundSchema;
  /** @deprecated use `SummaryEntry$Outbound` instead. */
  export type Outbound = SummaryEntry$Outbound;
}

export function summaryEntryToJSON(summaryEntry: SummaryEntry): string {
  return JSON.stringify(SummaryEntry$outboundSchema.parse(summaryEntry));
}

export function summaryEntryFromJSON(
  jsonString: string,
): SafeParseResult<SummaryEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SummaryEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SummaryEntry' from JSON`,
  );
}
