/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DirectoryExtension,
  DirectoryExtension$inboundSchema,
  DirectoryExtension$Outbound,
  DirectoryExtension$outboundSchema,
} from "./directoryextension.js";

export type ContactTags = {};

export type DirectoryMember = {
  name: string;
  type: string;
  extensions?: Array<DirectoryExtension> | null | undefined;
  contactTags?: ContactTags | null | undefined;
  updatedAt?: Date | null | undefined;
  id: number;
};

/** @internal */
export const ContactTags$inboundSchema: z.ZodType<
  ContactTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactTags$Outbound = {};

/** @internal */
export const ContactTags$outboundSchema: z.ZodType<
  ContactTags$Outbound,
  z.ZodTypeDef,
  ContactTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactTags$ {
  /** @deprecated use `ContactTags$inboundSchema` instead. */
  export const inboundSchema = ContactTags$inboundSchema;
  /** @deprecated use `ContactTags$outboundSchema` instead. */
  export const outboundSchema = ContactTags$outboundSchema;
  /** @deprecated use `ContactTags$Outbound` instead. */
  export type Outbound = ContactTags$Outbound;
}

export function contactTagsToJSON(contactTags: ContactTags): string {
  return JSON.stringify(ContactTags$outboundSchema.parse(contactTags));
}

export function contactTagsFromJSON(
  jsonString: string,
): SafeParseResult<ContactTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactTags' from JSON`,
  );
}

/** @internal */
export const DirectoryMember$inboundSchema: z.ZodType<
  DirectoryMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: z.string(),
  extensions: z.nullable(z.array(DirectoryExtension$inboundSchema)).optional(),
  contact_tags: z.nullable(z.lazy(() => ContactTags$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "contact_tags": "contactTags",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type DirectoryMember$Outbound = {
  name: string;
  type: string;
  extensions?: Array<DirectoryExtension$Outbound> | null | undefined;
  contact_tags?: ContactTags$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  id: number;
};

/** @internal */
export const DirectoryMember$outboundSchema: z.ZodType<
  DirectoryMember$Outbound,
  z.ZodTypeDef,
  DirectoryMember
> = z.object({
  name: z.string(),
  type: z.string(),
  extensions: z.nullable(z.array(DirectoryExtension$outboundSchema)).optional(),
  contactTags: z.nullable(z.lazy(() => ContactTags$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    contactTags: "contact_tags",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryMember$ {
  /** @deprecated use `DirectoryMember$inboundSchema` instead. */
  export const inboundSchema = DirectoryMember$inboundSchema;
  /** @deprecated use `DirectoryMember$outboundSchema` instead. */
  export const outboundSchema = DirectoryMember$outboundSchema;
  /** @deprecated use `DirectoryMember$Outbound` instead. */
  export type Outbound = DirectoryMember$Outbound;
}

export function directoryMemberToJSON(
  directoryMember: DirectoryMember,
): string {
  return JSON.stringify(DirectoryMember$outboundSchema.parse(directoryMember));
}

export function directoryMemberFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryMember' from JSON`,
  );
}
