/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TargetModes,
  TargetModes$inboundSchema,
  TargetModes$outboundSchema,
} from "./targetmodes.js";

export type Target = {
  /**
   * The Agent ID
   */
  agentId: number;
  /**
   * The Target
   */
  target: string;
  targetMode: TargetModes;
  /**
   * The Channel ID
   */
  channelId: number;
  /**
   * The Fallback Target
   */
  fallbackTarget?: string | null | undefined;
  /**
   * Whether the Target is for testing
   */
  isTest?: boolean | undefined;
  /**
   * The Target ID
   */
  id: number;
  /**
   * The Channel Name
   */
  channelName?: string | null | undefined;
};

/** @internal */
export const Target$inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown> = z
  .object({
    agent_id: z.number().int(),
    target: z.string(),
    target_mode: TargetModes$inboundSchema,
    channel_id: z.number().int(),
    fallback_target: z.nullable(z.string()).optional(),
    is_test: z.boolean().default(false),
    id: z.number().int(),
    channel_name: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "agent_id": "agentId",
      "target_mode": "targetMode",
      "channel_id": "channelId",
      "fallback_target": "fallbackTarget",
      "is_test": "isTest",
      "channel_name": "channelName",
    });
  });

/** @internal */
export type Target$Outbound = {
  agent_id: number;
  target: string;
  target_mode: string;
  channel_id: number;
  fallback_target?: string | null | undefined;
  is_test: boolean;
  id: number;
  channel_name?: string | null | undefined;
};

/** @internal */
export const Target$outboundSchema: z.ZodType<
  Target$Outbound,
  z.ZodTypeDef,
  Target
> = z.object({
  agentId: z.number().int(),
  target: z.string(),
  targetMode: TargetModes$outboundSchema,
  channelId: z.number().int(),
  fallbackTarget: z.nullable(z.string()).optional(),
  isTest: z.boolean().default(false),
  id: z.number().int(),
  channelName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    targetMode: "target_mode",
    channelId: "channel_id",
    fallbackTarget: "fallback_target",
    isTest: "is_test",
    channelName: "channel_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target$ {
  /** @deprecated use `Target$inboundSchema` instead. */
  export const inboundSchema = Target$inboundSchema;
  /** @deprecated use `Target$outboundSchema` instead. */
  export const outboundSchema = Target$outboundSchema;
  /** @deprecated use `Target$Outbound` instead. */
  export type Outbound = Target$Outbound;
}

export function targetToJSON(target: Target): string {
  return JSON.stringify(Target$outboundSchema.parse(target));
}

export function targetFromJSON(
  jsonString: string,
): SafeParseResult<Target, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Target$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Target' from JSON`,
  );
}
