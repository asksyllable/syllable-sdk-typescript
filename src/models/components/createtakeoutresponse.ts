/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTakeoutResponse = {
  jobId: string;
  createdAt: Date;
};

/** @internal */
export const CreateTakeoutResponse$inboundSchema: z.ZodType<
  CreateTakeoutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "created_at": "createdAt",
  });
});

/** @internal */
export type CreateTakeoutResponse$Outbound = {
  job_id: string;
  created_at: string;
};

/** @internal */
export const CreateTakeoutResponse$outboundSchema: z.ZodType<
  CreateTakeoutResponse$Outbound,
  z.ZodTypeDef,
  CreateTakeoutResponse
> = z.object({
  jobId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTakeoutResponse$ {
  /** @deprecated use `CreateTakeoutResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTakeoutResponse$inboundSchema;
  /** @deprecated use `CreateTakeoutResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTakeoutResponse$outboundSchema;
  /** @deprecated use `CreateTakeoutResponse$Outbound` instead. */
  export type Outbound = CreateTakeoutResponse$Outbound;
}

export function createTakeoutResponseToJSON(
  createTakeoutResponse: CreateTakeoutResponse,
): string {
  return JSON.stringify(
    CreateTakeoutResponse$outboundSchema.parse(createTakeoutResponse),
  );
}

export function createTakeoutResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTakeoutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTakeoutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTakeoutResponse' from JSON`,
  );
}
