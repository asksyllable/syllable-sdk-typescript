/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The options for a tool call.
 */
export type ToolOptions = {
  /**
   * Whether the tool call result should be propagated to the caller.
   */
  propagateToolResult?: boolean | undefined;
};

/** @internal */
export const ToolOptions$inboundSchema: z.ZodType<
  ToolOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  propagate_tool_result: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "propagate_tool_result": "propagateToolResult",
  });
});

/** @internal */
export type ToolOptions$Outbound = {
  propagate_tool_result: boolean;
};

/** @internal */
export const ToolOptions$outboundSchema: z.ZodType<
  ToolOptions$Outbound,
  z.ZodTypeDef,
  ToolOptions
> = z.object({
  propagateToolResult: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    propagateToolResult: "propagate_tool_result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolOptions$ {
  /** @deprecated use `ToolOptions$inboundSchema` instead. */
  export const inboundSchema = ToolOptions$inboundSchema;
  /** @deprecated use `ToolOptions$outboundSchema` instead. */
  export const outboundSchema = ToolOptions$outboundSchema;
  /** @deprecated use `ToolOptions$Outbound` instead. */
  export type Outbound = ToolOptions$Outbound;
}

export function toolOptionsToJSON(toolOptions: ToolOptions): string {
  return JSON.stringify(ToolOptions$outboundSchema.parse(toolOptions));
}

export function toolOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ToolOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolOptions' from JSON`,
  );
}
