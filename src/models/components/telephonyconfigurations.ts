/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TelephonyConfigurations = {
  /**
   * Pre input silence threshold
   */
  preInputTimeout?: number | null | undefined;
  /**
   * Post speech silence timeout to determine input as ended.
   */
  postSpeechInputTimeout?: number | null | undefined;
  /**
   * Post dtmf silence timeout to determine input as ended.
   */
  postDtmfInputTimeout?: number | null | undefined;
  /**
   * Total input timeout
   */
  overallInputTimeout?: number | null | undefined;
  /**
   * Number of seconds to start listening to user input before assistant speech ends
   */
  outputPadding?: number | null | undefined;
};

/** @internal */
export const TelephonyConfigurations$inboundSchema: z.ZodType<
  TelephonyConfigurations,
  z.ZodTypeDef,
  unknown
> = z.object({
  pre_input_timeout: z.nullable(z.number()).optional(),
  post_speech_input_timeout: z.nullable(z.number()).optional(),
  post_dtmf_input_timeout: z.nullable(z.number()).optional(),
  overall_input_timeout: z.nullable(z.number()).optional(),
  output_padding: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pre_input_timeout": "preInputTimeout",
    "post_speech_input_timeout": "postSpeechInputTimeout",
    "post_dtmf_input_timeout": "postDtmfInputTimeout",
    "overall_input_timeout": "overallInputTimeout",
    "output_padding": "outputPadding",
  });
});

/** @internal */
export type TelephonyConfigurations$Outbound = {
  pre_input_timeout?: number | null | undefined;
  post_speech_input_timeout?: number | null | undefined;
  post_dtmf_input_timeout?: number | null | undefined;
  overall_input_timeout?: number | null | undefined;
  output_padding?: number | null | undefined;
};

/** @internal */
export const TelephonyConfigurations$outboundSchema: z.ZodType<
  TelephonyConfigurations$Outbound,
  z.ZodTypeDef,
  TelephonyConfigurations
> = z.object({
  preInputTimeout: z.nullable(z.number()).optional(),
  postSpeechInputTimeout: z.nullable(z.number()).optional(),
  postDtmfInputTimeout: z.nullable(z.number()).optional(),
  overallInputTimeout: z.nullable(z.number()).optional(),
  outputPadding: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    preInputTimeout: "pre_input_timeout",
    postSpeechInputTimeout: "post_speech_input_timeout",
    postDtmfInputTimeout: "post_dtmf_input_timeout",
    overallInputTimeout: "overall_input_timeout",
    outputPadding: "output_padding",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TelephonyConfigurations$ {
  /** @deprecated use `TelephonyConfigurations$inboundSchema` instead. */
  export const inboundSchema = TelephonyConfigurations$inboundSchema;
  /** @deprecated use `TelephonyConfigurations$outboundSchema` instead. */
  export const outboundSchema = TelephonyConfigurations$outboundSchema;
  /** @deprecated use `TelephonyConfigurations$Outbound` instead. */
  export type Outbound = TelephonyConfigurations$Outbound;
}

export function telephonyConfigurationsToJSON(
  telephonyConfigurations: TelephonyConfigurations,
): string {
  return JSON.stringify(
    TelephonyConfigurations$outboundSchema.parse(telephonyConfigurations),
  );
}

export function telephonyConfigurationsFromJSON(
  jsonString: string,
): SafeParseResult<TelephonyConfigurations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TelephonyConfigurations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TelephonyConfigurations' from JSON`,
  );
}
