/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to update an existing role.
 */
export type RoleUpdateRequest = {
  /**
   * The name of the role.
   */
  name: string;
  /**
   * The description of the role.
   */
  description?: string | null | undefined;
  /**
   * The permissions associated with the role. Available permissions can be found by calling `GET /permissions`.
   */
  permissions: Array<string>;
  /**
   * The internal ID of the role.
   */
  id: number;
  /**
   * Comments for the most recent edit to the role.
   */
  lastUpdatedComments?: string | null | undefined;
};

/** @internal */
export const RoleUpdateRequest$inboundSchema: z.ZodType<
  RoleUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
  id: z.number().int(),
  last_updated_comments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "last_updated_comments": "lastUpdatedComments",
  });
});

/** @internal */
export type RoleUpdateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  permissions: Array<string>;
  id: number;
  last_updated_comments?: string | null | undefined;
};

/** @internal */
export const RoleUpdateRequest$outboundSchema: z.ZodType<
  RoleUpdateRequest$Outbound,
  z.ZodTypeDef,
  RoleUpdateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  permissions: z.array(z.string()),
  id: z.number().int(),
  lastUpdatedComments: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    lastUpdatedComments: "last_updated_comments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUpdateRequest$ {
  /** @deprecated use `RoleUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = RoleUpdateRequest$inboundSchema;
  /** @deprecated use `RoleUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = RoleUpdateRequest$outboundSchema;
  /** @deprecated use `RoleUpdateRequest$Outbound` instead. */
  export type Outbound = RoleUpdateRequest$Outbound;
}

export function roleUpdateRequestToJSON(
  roleUpdateRequest: RoleUpdateRequest,
): string {
  return JSON.stringify(
    RoleUpdateRequest$outboundSchema.parse(roleUpdateRequest),
  );
}

export function roleUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RoleUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleUpdateRequest' from JSON`,
  );
}
