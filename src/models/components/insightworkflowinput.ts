/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Conditions for Insight Workflow
 */
export type InsightWorkflowInputConditions = {};

export type InsightWorkflowInput = {
  /**
   * Human readable name of Insight Workflow
   */
  name: string;
  /**
   * Text description of Insight Workflow
   */
  description: string;
  /**
   * List of Insight Tool IDs
   */
  insightToolIds: Array<number>;
  /**
   * Conditions for Insight Workflow
   */
  conditions: InsightWorkflowInputConditions;
  /**
   * Status of the Insight Workflow
   */
  status: string;
};

/** @internal */
export const InsightWorkflowInputConditions$inboundSchema: z.ZodType<
  InsightWorkflowInputConditions,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InsightWorkflowInputConditions$Outbound = {};

/** @internal */
export const InsightWorkflowInputConditions$outboundSchema: z.ZodType<
  InsightWorkflowInputConditions$Outbound,
  z.ZodTypeDef,
  InsightWorkflowInputConditions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowInputConditions$ {
  /** @deprecated use `InsightWorkflowInputConditions$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowInputConditions$inboundSchema;
  /** @deprecated use `InsightWorkflowInputConditions$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowInputConditions$outboundSchema;
  /** @deprecated use `InsightWorkflowInputConditions$Outbound` instead. */
  export type Outbound = InsightWorkflowInputConditions$Outbound;
}

export function insightWorkflowInputConditionsToJSON(
  insightWorkflowInputConditions: InsightWorkflowInputConditions,
): string {
  return JSON.stringify(
    InsightWorkflowInputConditions$outboundSchema.parse(
      insightWorkflowInputConditions,
    ),
  );
}

export function insightWorkflowInputConditionsFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowInputConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowInputConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowInputConditions' from JSON`,
  );
}

/** @internal */
export const InsightWorkflowInput$inboundSchema: z.ZodType<
  InsightWorkflowInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  insight_tool_ids: z.array(z.number().int()),
  conditions: z.lazy(() => InsightWorkflowInputConditions$inboundSchema),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "insight_tool_ids": "insightToolIds",
  });
});

/** @internal */
export type InsightWorkflowInput$Outbound = {
  name: string;
  description: string;
  insight_tool_ids: Array<number>;
  conditions: InsightWorkflowInputConditions$Outbound;
  status: string;
};

/** @internal */
export const InsightWorkflowInput$outboundSchema: z.ZodType<
  InsightWorkflowInput$Outbound,
  z.ZodTypeDef,
  InsightWorkflowInput
> = z.object({
  name: z.string(),
  description: z.string(),
  insightToolIds: z.array(z.number().int()),
  conditions: z.lazy(() => InsightWorkflowInputConditions$outboundSchema),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    insightToolIds: "insight_tool_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowInput$ {
  /** @deprecated use `InsightWorkflowInput$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowInput$inboundSchema;
  /** @deprecated use `InsightWorkflowInput$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowInput$outboundSchema;
  /** @deprecated use `InsightWorkflowInput$Outbound` instead. */
  export type Outbound = InsightWorkflowInput$Outbound;
}

export function insightWorkflowInputToJSON(
  insightWorkflowInput: InsightWorkflowInput,
): string {
  return JSON.stringify(
    InsightWorkflowInput$outboundSchema.parse(insightWorkflowInput),
  );
}

export function insightWorkflowInputFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowInput' from JSON`,
  );
}
