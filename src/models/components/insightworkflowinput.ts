/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightWorkflowCondition,
  InsightWorkflowCondition$inboundSchema,
  InsightWorkflowCondition$Outbound,
  InsightWorkflowCondition$outboundSchema,
} from "./insightworkflowcondition.js";

/**
 * Request model to create/update an insight workflow.
 */
export type InsightWorkflowInput = {
  /**
   * Human-readable name of insight workflow
   */
  name: string;
  /**
   * Source of the insight workflow
   */
  source: string;
  /**
   * Text description of insight workflow
   */
  description: string;
  /**
   * List of IDs of insight tools used in the workflow
   */
  insightToolIds: Array<number>;
  /**
   * Model for the conditions that trigger an insight workflow.
   */
  conditions: InsightWorkflowCondition;
  /**
   * Timestamp for when the insight workflow should start. An empty value indicates start on activation
   */
  startDatetime?: Date | null | undefined;
  /**
   * Timestamp of when the insight workflow should end. An empty value indicates no end
   */
  endDatetime?: Date | null | undefined;
};

/** @internal */
export const InsightWorkflowInput$inboundSchema: z.ZodType<
  InsightWorkflowInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  source: z.string(),
  description: z.string(),
  insight_tool_ids: z.array(z.number().int()),
  conditions: InsightWorkflowCondition$inboundSchema,
  start_datetime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_datetime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "insight_tool_ids": "insightToolIds",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
  });
});

/** @internal */
export type InsightWorkflowInput$Outbound = {
  name: string;
  source: string;
  description: string;
  insight_tool_ids: Array<number>;
  conditions: InsightWorkflowCondition$Outbound;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
};

/** @internal */
export const InsightWorkflowInput$outboundSchema: z.ZodType<
  InsightWorkflowInput$Outbound,
  z.ZodTypeDef,
  InsightWorkflowInput
> = z.object({
  name: z.string(),
  source: z.string(),
  description: z.string(),
  insightToolIds: z.array(z.number().int()),
  conditions: InsightWorkflowCondition$outboundSchema,
  startDatetime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  endDatetime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    insightToolIds: "insight_tool_ids",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowInput$ {
  /** @deprecated use `InsightWorkflowInput$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowInput$inboundSchema;
  /** @deprecated use `InsightWorkflowInput$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowInput$outboundSchema;
  /** @deprecated use `InsightWorkflowInput$Outbound` instead. */
  export type Outbound = InsightWorkflowInput$Outbound;
}

export function insightWorkflowInputToJSON(
  insightWorkflowInput: InsightWorkflowInput,
): string {
  return JSON.stringify(
    InsightWorkflowInput$outboundSchema.parse(insightWorkflowInput),
  );
}

export function insightWorkflowInputFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowInput' from JSON`,
  );
}
