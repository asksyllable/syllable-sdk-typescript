/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelServices,
  ChannelServices$inboundSchema,
  ChannelServices$outboundSchema,
} from "./channelservices.js";

export type Channel = {
  /**
   * The channel name
   */
  name: string;
  /**
   * The service for the channel
   */
  channelService: ChannelServices;
  /**
   * The comma-delimited list of supported modes for the channel
   */
  supportedModes?: string | null | undefined;
  /**
   * The channel ID
   */
  id: number;
};

/** @internal */
export const Channel$inboundSchema: z.ZodType<Channel, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    channel_service: ChannelServices$inboundSchema,
    supported_modes: z.nullable(z.string()).optional(),
    id: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "channel_service": "channelService",
      "supported_modes": "supportedModes",
    });
  });

/** @internal */
export type Channel$Outbound = {
  name: string;
  channel_service: string;
  supported_modes?: string | null | undefined;
  id: number;
};

/** @internal */
export const Channel$outboundSchema: z.ZodType<
  Channel$Outbound,
  z.ZodTypeDef,
  Channel
> = z.object({
  name: z.string(),
  channelService: ChannelServices$outboundSchema,
  supportedModes: z.nullable(z.string()).optional(),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    channelService: "channel_service",
    supportedModes: "supported_modes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
  /** @deprecated use `Channel$Outbound` instead. */
  export type Outbound = Channel$Outbound;
}

export function channelToJSON(channel: Channel): string {
  return JSON.stringify(Channel$outboundSchema.parse(channel));
}

export function channelFromJSON(
  jsonString: string,
): SafeParseResult<Channel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Channel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Channel' from JSON`,
  );
}
