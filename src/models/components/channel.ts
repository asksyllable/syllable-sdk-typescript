/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Channel = {
  id: string;
  name: string;
  channelService: string;
  supportedModes: string;
};

/** @internal */
export const Channel$inboundSchema: z.ZodType<Channel, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    channel_service: z.string(),
    supported_modes: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "channel_service": "channelService",
      "supported_modes": "supportedModes",
    });
  });

/** @internal */
export type Channel$Outbound = {
  id: string;
  name: string;
  channel_service: string;
  supported_modes: string;
};

/** @internal */
export const Channel$outboundSchema: z.ZodType<
  Channel$Outbound,
  z.ZodTypeDef,
  Channel
> = z.object({
  id: z.string(),
  name: z.string(),
  channelService: z.string(),
  supportedModes: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelService: "channel_service",
    supportedModes: "supported_modes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
  /** @deprecated use `Channel$Outbound` instead. */
  export type Outbound = Channel$Outbound;
}
