/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Display metadata for a canonical voice identifier.
 */
export type VoiceDisplayInfo = {
  displayName: string;
  provider: string;
};

/** @internal */
export const VoiceDisplayInfo$inboundSchema: z.ZodType<
  VoiceDisplayInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string(),
  provider: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type VoiceDisplayInfo$Outbound = {
  display_name: string;
  provider: string;
};

/** @internal */
export const VoiceDisplayInfo$outboundSchema: z.ZodType<
  VoiceDisplayInfo$Outbound,
  z.ZodTypeDef,
  VoiceDisplayInfo
> = z.object({
  displayName: z.string(),
  provider: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceDisplayInfo$ {
  /** @deprecated use `VoiceDisplayInfo$inboundSchema` instead. */
  export const inboundSchema = VoiceDisplayInfo$inboundSchema;
  /** @deprecated use `VoiceDisplayInfo$outboundSchema` instead. */
  export const outboundSchema = VoiceDisplayInfo$outboundSchema;
  /** @deprecated use `VoiceDisplayInfo$Outbound` instead. */
  export type Outbound = VoiceDisplayInfo$Outbound;
}

export function voiceDisplayInfoToJSON(
  voiceDisplayInfo: VoiceDisplayInfo,
): string {
  return JSON.stringify(
    VoiceDisplayInfo$outboundSchema.parse(voiceDisplayInfo),
  );
}

export function voiceDisplayInfoFromJSON(
  jsonString: string,
): SafeParseResult<VoiceDisplayInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoiceDisplayInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoiceDisplayInfo' from JSON`,
  );
}
