/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolFieldDefault,
  AgentToolFieldDefault$inboundSchema,
  AgentToolFieldDefault$Outbound,
  AgentToolFieldDefault$outboundSchema,
} from "./agenttoolfielddefault.js";

/**
 * Agent-level static parameter values for a tool, overriding any tool-level defaults.
 */
export type AgentToolDefaults = {
  /**
   * The name of the tool
   */
  toolName: string;
  /**
   * The default values for fields used in the tool
   */
  defaultValues: Array<AgentToolFieldDefault>;
};

/** @internal */
export const AgentToolDefaults$inboundSchema: z.ZodType<
  AgentToolDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_name: z.string(),
  default_values: z.array(AgentToolFieldDefault$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "tool_name": "toolName",
    "default_values": "defaultValues",
  });
});

/** @internal */
export type AgentToolDefaults$Outbound = {
  tool_name: string;
  default_values: Array<AgentToolFieldDefault$Outbound>;
};

/** @internal */
export const AgentToolDefaults$outboundSchema: z.ZodType<
  AgentToolDefaults$Outbound,
  z.ZodTypeDef,
  AgentToolDefaults
> = z.object({
  toolName: z.string(),
  defaultValues: z.array(AgentToolFieldDefault$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    toolName: "tool_name",
    defaultValues: "default_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentToolDefaults$ {
  /** @deprecated use `AgentToolDefaults$inboundSchema` instead. */
  export const inboundSchema = AgentToolDefaults$inboundSchema;
  /** @deprecated use `AgentToolDefaults$outboundSchema` instead. */
  export const outboundSchema = AgentToolDefaults$outboundSchema;
  /** @deprecated use `AgentToolDefaults$Outbound` instead. */
  export type Outbound = AgentToolDefaults$Outbound;
}

export function agentToolDefaultsToJSON(
  agentToolDefaults: AgentToolDefaults,
): string {
  return JSON.stringify(
    AgentToolDefaults$outboundSchema.parse(agentToolDefaults),
  );
}

export function agentToolDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<AgentToolDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentToolDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentToolDefaults' from JSON`,
  );
}
