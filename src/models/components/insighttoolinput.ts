/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Arguments for calling the insight tool
 */
export type InsightToolInputToolArguments = {};

/**
 * Request model to create/update an insight tool.
 */
export type InsightToolInput = {
  /**
   * Human readable name of insight tool
   */
  name: string;
  /**
   * Text description of insight tool
   */
  description: string;
  /**
   * Version number of insight tool
   */
  version: number;
  /**
   * Arguments for calling the insight tool
   */
  toolArguments: InsightToolInputToolArguments;
  /**
   * Internal ID for the definition used by the insight tool
   */
  insightToolDefinitionId: number;
};

/** @internal */
export const InsightToolInputToolArguments$inboundSchema: z.ZodType<
  InsightToolInputToolArguments,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InsightToolInputToolArguments$Outbound = {};

/** @internal */
export const InsightToolInputToolArguments$outboundSchema: z.ZodType<
  InsightToolInputToolArguments$Outbound,
  z.ZodTypeDef,
  InsightToolInputToolArguments
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightToolInputToolArguments$ {
  /** @deprecated use `InsightToolInputToolArguments$inboundSchema` instead. */
  export const inboundSchema = InsightToolInputToolArguments$inboundSchema;
  /** @deprecated use `InsightToolInputToolArguments$outboundSchema` instead. */
  export const outboundSchema = InsightToolInputToolArguments$outboundSchema;
  /** @deprecated use `InsightToolInputToolArguments$Outbound` instead. */
  export type Outbound = InsightToolInputToolArguments$Outbound;
}

export function insightToolInputToolArgumentsToJSON(
  insightToolInputToolArguments: InsightToolInputToolArguments,
): string {
  return JSON.stringify(
    InsightToolInputToolArguments$outboundSchema.parse(
      insightToolInputToolArguments,
    ),
  );
}

export function insightToolInputToolArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<InsightToolInputToolArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightToolInputToolArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightToolInputToolArguments' from JSON`,
  );
}

/** @internal */
export const InsightToolInput$inboundSchema: z.ZodType<
  InsightToolInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  tool_arguments: z.lazy(() => InsightToolInputToolArguments$inboundSchema),
  insight_tool_definition_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "tool_arguments": "toolArguments",
    "insight_tool_definition_id": "insightToolDefinitionId",
  });
});

/** @internal */
export type InsightToolInput$Outbound = {
  name: string;
  description: string;
  version: number;
  tool_arguments: InsightToolInputToolArguments$Outbound;
  insight_tool_definition_id: number;
};

/** @internal */
export const InsightToolInput$outboundSchema: z.ZodType<
  InsightToolInput$Outbound,
  z.ZodTypeDef,
  InsightToolInput
> = z.object({
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  toolArguments: z.lazy(() => InsightToolInputToolArguments$outboundSchema),
  insightToolDefinitionId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    toolArguments: "tool_arguments",
    insightToolDefinitionId: "insight_tool_definition_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightToolInput$ {
  /** @deprecated use `InsightToolInput$inboundSchema` instead. */
  export const inboundSchema = InsightToolInput$inboundSchema;
  /** @deprecated use `InsightToolInput$outboundSchema` instead. */
  export const outboundSchema = InsightToolInput$outboundSchema;
  /** @deprecated use `InsightToolInput$Outbound` instead. */
  export type Outbound = InsightToolInput$Outbound;
}

export function insightToolInputToJSON(
  insightToolInput: InsightToolInput,
): string {
  return JSON.stringify(
    InsightToolInput$outboundSchema.parse(insightToolInput),
  );
}

export function insightToolInputFromJSON(
  jsonString: string,
): SafeParseResult<InsightToolInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightToolInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightToolInput' from JSON`,
  );
}
