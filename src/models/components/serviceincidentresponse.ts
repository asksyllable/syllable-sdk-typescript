/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceIncidentResponse = {
  organizationId: number | null;
  subOrganizationId: number | null;
  subOrganization: string | null;
  description: string;
  startDatetime: Date;
  resolutionDatetime: Date;
  impactCategory: string;
  sessionsImpacted: number;
  markdown: string;
  createdAt: Date;
  updatedAt: Date;
  id: number;
};

/** @internal */
export const ServiceIncidentResponse$inboundSchema: z.ZodType<
  ServiceIncidentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.number().int()),
  sub_organization_id: z.nullable(z.number().int()),
  sub_organization: z.nullable(z.string()),
  description: z.string(),
  start_datetime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  resolution_datetime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  impact_category: z.string(),
  sessions_impacted: z.number().int(),
  markdown: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "sub_organization_id": "subOrganizationId",
    "sub_organization": "subOrganization",
    "start_datetime": "startDatetime",
    "resolution_datetime": "resolutionDatetime",
    "impact_category": "impactCategory",
    "sessions_impacted": "sessionsImpacted",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ServiceIncidentResponse$Outbound = {
  organization_id: number | null;
  sub_organization_id: number | null;
  sub_organization: string | null;
  description: string;
  start_datetime: string;
  resolution_datetime: string;
  impact_category: string;
  sessions_impacted: number;
  markdown: string;
  created_at: string;
  updated_at: string;
  id: number;
};

/** @internal */
export const ServiceIncidentResponse$outboundSchema: z.ZodType<
  ServiceIncidentResponse$Outbound,
  z.ZodTypeDef,
  ServiceIncidentResponse
> = z.object({
  organizationId: z.nullable(z.number().int()),
  subOrganizationId: z.nullable(z.number().int()),
  subOrganization: z.nullable(z.string()),
  description: z.string(),
  startDatetime: z.date().transform(v => v.toISOString()),
  resolutionDatetime: z.date().transform(v => v.toISOString()),
  impactCategory: z.string(),
  sessionsImpacted: z.number().int(),
  markdown: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    subOrganizationId: "sub_organization_id",
    subOrganization: "sub_organization",
    startDatetime: "start_datetime",
    resolutionDatetime: "resolution_datetime",
    impactCategory: "impact_category",
    sessionsImpacted: "sessions_impacted",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceIncidentResponse$ {
  /** @deprecated use `ServiceIncidentResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceIncidentResponse$inboundSchema;
  /** @deprecated use `ServiceIncidentResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceIncidentResponse$outboundSchema;
  /** @deprecated use `ServiceIncidentResponse$Outbound` instead. */
  export type Outbound = ServiceIncidentResponse$Outbound;
}

export function serviceIncidentResponseToJSON(
  serviceIncidentResponse: ServiceIncidentResponse,
): string {
  return JSON.stringify(
    ServiceIncidentResponse$outboundSchema.parse(serviceIncidentResponse),
  );
}

export function serviceIncidentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceIncidentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceIncidentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceIncidentResponse' from JSON`,
  );
}
