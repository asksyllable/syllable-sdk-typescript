/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BodyOutboundBatchDelete = {
  deleteReason: string;
};

/** @internal */
export const BodyOutboundBatchDelete$inboundSchema: z.ZodType<
  BodyOutboundBatchDelete,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "delete_reason": "deleteReason",
  });
});

/** @internal */
export type BodyOutboundBatchDelete$Outbound = {
  delete_reason: string;
};

/** @internal */
export const BodyOutboundBatchDelete$outboundSchema: z.ZodType<
  BodyOutboundBatchDelete$Outbound,
  z.ZodTypeDef,
  BodyOutboundBatchDelete
> = z.object({
  deleteReason: z.string(),
}).transform((v) => {
  return remap$(v, {
    deleteReason: "delete_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOutboundBatchDelete$ {
  /** @deprecated use `BodyOutboundBatchDelete$inboundSchema` instead. */
  export const inboundSchema = BodyOutboundBatchDelete$inboundSchema;
  /** @deprecated use `BodyOutboundBatchDelete$outboundSchema` instead. */
  export const outboundSchema = BodyOutboundBatchDelete$outboundSchema;
  /** @deprecated use `BodyOutboundBatchDelete$Outbound` instead. */
  export type Outbound = BodyOutboundBatchDelete$Outbound;
}

export function bodyOutboundBatchDeleteToJSON(
  bodyOutboundBatchDelete: BodyOutboundBatchDelete,
): string {
  return JSON.stringify(
    BodyOutboundBatchDelete$outboundSchema.parse(bodyOutboundBatchDelete),
  );
}

export function bodyOutboundBatchDeleteFromJSON(
  jsonString: string,
): SafeParseResult<BodyOutboundBatchDelete, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOutboundBatchDelete$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOutboundBatchDelete' from JSON`,
  );
}
