/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Basic information about a dashboard.
 */
export type DashboardTokenResponse = {
  /**
   * Superset embedded ID of the dashboard
   */
  embeddedId: string;
  /**
   * Superset guest token of the dashboard
   */
  guestToken: string;
  /**
   * Name of the dashboard
   */
  name: string;
  /**
   * Display name of the dashboard
   */
  displayName: string;
  /**
   * Base Superset URL of the dashboard
   */
  supersetUrl: string;
  /**
   * Dashboard importance (0 is the highest)
   */
  rank: number;
  /**
   * Dashboard label. Typically "report" or "dashboard"
   */
  label: string;
};

/** @internal */
export const DashboardTokenResponse$inboundSchema: z.ZodType<
  DashboardTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  embedded_id: z.string(),
  guest_token: z.string(),
  name: z.string(),
  display_name: z.string(),
  superset_url: z.string(),
  rank: z.number().int(),
  label: z.string(),
}).transform((v) => {
  return remap$(v, {
    "embedded_id": "embeddedId",
    "guest_token": "guestToken",
    "display_name": "displayName",
    "superset_url": "supersetUrl",
  });
});

/** @internal */
export type DashboardTokenResponse$Outbound = {
  embedded_id: string;
  guest_token: string;
  name: string;
  display_name: string;
  superset_url: string;
  rank: number;
  label: string;
};

/** @internal */
export const DashboardTokenResponse$outboundSchema: z.ZodType<
  DashboardTokenResponse$Outbound,
  z.ZodTypeDef,
  DashboardTokenResponse
> = z.object({
  embeddedId: z.string(),
  guestToken: z.string(),
  name: z.string(),
  displayName: z.string(),
  supersetUrl: z.string(),
  rank: z.number().int(),
  label: z.string(),
}).transform((v) => {
  return remap$(v, {
    embeddedId: "embedded_id",
    guestToken: "guest_token",
    displayName: "display_name",
    supersetUrl: "superset_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardTokenResponse$ {
  /** @deprecated use `DashboardTokenResponse$inboundSchema` instead. */
  export const inboundSchema = DashboardTokenResponse$inboundSchema;
  /** @deprecated use `DashboardTokenResponse$outboundSchema` instead. */
  export const outboundSchema = DashboardTokenResponse$outboundSchema;
  /** @deprecated use `DashboardTokenResponse$Outbound` instead. */
  export type Outbound = DashboardTokenResponse$Outbound;
}

export function dashboardTokenResponseToJSON(
  dashboardTokenResponse: DashboardTokenResponse,
): string {
  return JSON.stringify(
    DashboardTokenResponse$outboundSchema.parse(dashboardTokenResponse),
  );
}

export function dashboardTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<DashboardTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardTokenResponse' from JSON`,
  );
}
