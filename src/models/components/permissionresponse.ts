/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Information about a permission.
 */
export type PermissionResponse = {
  /**
   * Name of the permission
   */
  name: string;
  /**
   * Display name of the permission
   */
  displayName: string;
  /**
   * Description of the permission
   */
  description?: string | null | undefined;
};

/** @internal */
export const PermissionResponse$inboundSchema: z.ZodType<
  PermissionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type PermissionResponse$Outbound = {
  name: string;
  display_name: string;
  description?: string | null | undefined;
};

/** @internal */
export const PermissionResponse$outboundSchema: z.ZodType<
  PermissionResponse$Outbound,
  z.ZodTypeDef,
  PermissionResponse
> = z.object({
  name: z.string(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionResponse$ {
  /** @deprecated use `PermissionResponse$inboundSchema` instead. */
  export const inboundSchema = PermissionResponse$inboundSchema;
  /** @deprecated use `PermissionResponse$outboundSchema` instead. */
  export const outboundSchema = PermissionResponse$outboundSchema;
  /** @deprecated use `PermissionResponse$Outbound` instead. */
  export type Outbound = PermissionResponse$Outbound;
}

export function permissionResponseToJSON(
  permissionResponse: PermissionResponse,
): string {
  return JSON.stringify(
    PermissionResponse$outboundSchema.parse(permissionResponse),
  );
}

export function permissionResponseFromJSON(
  jsonString: string,
): SafeParseResult<PermissionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermissionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermissionResponse' from JSON`,
  );
}
