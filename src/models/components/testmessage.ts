/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Message sent in a test chat with an agent.
 */
export type TestMessage = {
  /**
   * Name of the service producing the message
   */
  serviceName: string;
  /**
   * Name of the source of the message - identifies the user, like an email or username.
   */
  source: string;
  /**
   * The text of the message
   */
  text?: string | null | undefined;
  /**
   * Channel-manager-side ID of the session (see Session.channel_manager_sid)
   */
  testId: string;
  /**
   * ID of the agent with which the chat is taking place
   */
  agentId: string;
  /**
   * Unused: Name of the organization associated with the agent
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  orgName?: string | null | undefined;
  /**
   * Override for the timestamp of the message
   */
  overrideTimestamp?: string | null | undefined;
  /**
   * Whether this message is the start of a new session
   */
  sessionStart?: boolean | undefined;
};

/** @internal */
export const TestMessage$inboundSchema: z.ZodType<
  TestMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_name: z.string(),
  source: z.string(),
  text: z.nullable(z.string()).optional(),
  test_id: z.string(),
  agent_id: z.string(),
  org_name: z.nullable(z.string()).optional(),
  override_timestamp: z.nullable(z.string()).optional(),
  session_start: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "service_name": "serviceName",
    "test_id": "testId",
    "agent_id": "agentId",
    "org_name": "orgName",
    "override_timestamp": "overrideTimestamp",
    "session_start": "sessionStart",
  });
});

/** @internal */
export type TestMessage$Outbound = {
  service_name: string;
  source: string;
  text?: string | null | undefined;
  test_id: string;
  agent_id: string;
  org_name?: string | null | undefined;
  override_timestamp?: string | null | undefined;
  session_start: boolean;
};

/** @internal */
export const TestMessage$outboundSchema: z.ZodType<
  TestMessage$Outbound,
  z.ZodTypeDef,
  TestMessage
> = z.object({
  serviceName: z.string(),
  source: z.string(),
  text: z.nullable(z.string()).optional(),
  testId: z.string(),
  agentId: z.string(),
  orgName: z.nullable(z.string()).optional(),
  overrideTimestamp: z.nullable(z.string()).optional(),
  sessionStart: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    serviceName: "service_name",
    testId: "test_id",
    agentId: "agent_id",
    orgName: "org_name",
    overrideTimestamp: "override_timestamp",
    sessionStart: "session_start",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestMessage$ {
  /** @deprecated use `TestMessage$inboundSchema` instead. */
  export const inboundSchema = TestMessage$inboundSchema;
  /** @deprecated use `TestMessage$outboundSchema` instead. */
  export const outboundSchema = TestMessage$outboundSchema;
  /** @deprecated use `TestMessage$Outbound` instead. */
  export type Outbound = TestMessage$Outbound;
}

export function testMessageToJSON(testMessage: TestMessage): string {
  return JSON.stringify(TestMessage$outboundSchema.parse(testMessage));
}

export function testMessageFromJSON(
  jsonString: string,
): SafeParseResult<TestMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestMessage' from JSON`,
  );
}
