/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyOutboundBatchUpload = {
  file?: FileT | Blob | undefined;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

export function fileToJSON(fileT: FileT): string {
  return JSON.stringify(FileT$outboundSchema.parse(fileT));
}

export function fileFromJSON(
  jsonString: string,
): SafeParseResult<FileT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileT' from JSON`,
  );
}

/** @internal */
export const BodyOutboundBatchUpload$inboundSchema: z.ZodType<
  BodyOutboundBatchUpload,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => FileT$inboundSchema).optional(),
});

/** @internal */
export type BodyOutboundBatchUpload$Outbound = {
  file?: FileT$Outbound | Blob | undefined;
};

/** @internal */
export const BodyOutboundBatchUpload$outboundSchema: z.ZodType<
  BodyOutboundBatchUpload$Outbound,
  z.ZodTypeDef,
  BodyOutboundBatchUpload
> = z.object({
  file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyOutboundBatchUpload$ {
  /** @deprecated use `BodyOutboundBatchUpload$inboundSchema` instead. */
  export const inboundSchema = BodyOutboundBatchUpload$inboundSchema;
  /** @deprecated use `BodyOutboundBatchUpload$outboundSchema` instead. */
  export const outboundSchema = BodyOutboundBatchUpload$outboundSchema;
  /** @deprecated use `BodyOutboundBatchUpload$Outbound` instead. */
  export type Outbound = BodyOutboundBatchUpload$Outbound;
}

export function bodyOutboundBatchUploadToJSON(
  bodyOutboundBatchUpload: BodyOutboundBatchUpload,
): string {
  return JSON.stringify(
    BodyOutboundBatchUpload$outboundSchema.parse(bodyOutboundBatchUpload),
  );
}

export function bodyOutboundBatchUploadFromJSON(
  jsonString: string,
): SafeParseResult<BodyOutboundBatchUpload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyOutboundBatchUpload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyOutboundBatchUpload' from JSON`,
  );
}
