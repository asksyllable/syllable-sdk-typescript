/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommunicationBatchInput = {
  /**
   * Unique ID for conversation batch
   */
  batchId: string;
  /**
   * Unique ID for campaign
   */
  campaignId: number;
  /**
   * Timestamp of batch expiration
   */
  expiresOn?: Date | null | undefined;
  /**
   * Whether the batch is on HOLD. When on HOLD, no outreach will be made.
   */
  paused?: boolean | null | undefined;
};

/** @internal */
export const CommunicationBatchInput$inboundSchema: z.ZodType<
  CommunicationBatchInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_id: z.string(),
  campaign_id: z.number().int(),
  expires_on: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  paused: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "batch_id": "batchId",
    "campaign_id": "campaignId",
    "expires_on": "expiresOn",
  });
});

/** @internal */
export type CommunicationBatchInput$Outbound = {
  batch_id: string;
  campaign_id: number;
  expires_on?: string | null | undefined;
  paused?: boolean | null | undefined;
};

/** @internal */
export const CommunicationBatchInput$outboundSchema: z.ZodType<
  CommunicationBatchInput$Outbound,
  z.ZodTypeDef,
  CommunicationBatchInput
> = z.object({
  batchId: z.string(),
  campaignId: z.number().int(),
  expiresOn: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  paused: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    batchId: "batch_id",
    campaignId: "campaign_id",
    expiresOn: "expires_on",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationBatchInput$ {
  /** @deprecated use `CommunicationBatchInput$inboundSchema` instead. */
  export const inboundSchema = CommunicationBatchInput$inboundSchema;
  /** @deprecated use `CommunicationBatchInput$outboundSchema` instead. */
  export const outboundSchema = CommunicationBatchInput$outboundSchema;
  /** @deprecated use `CommunicationBatchInput$Outbound` instead. */
  export type Outbound = CommunicationBatchInput$Outbound;
}

export function communicationBatchInputToJSON(
  communicationBatchInput: CommunicationBatchInput,
): string {
  return JSON.stringify(
    CommunicationBatchInput$outboundSchema.parse(communicationBatchInput),
  );
}

export function communicationBatchInputFromJSON(
  jsonString: string,
): SafeParseResult<CommunicationBatchInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommunicationBatchInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommunicationBatchInput' from JSON`,
  );
}
