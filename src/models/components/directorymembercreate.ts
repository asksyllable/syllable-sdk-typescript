/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DirectoryExtension,
  DirectoryExtension$inboundSchema,
  DirectoryExtension$Outbound,
  DirectoryExtension$outboundSchema,
} from "./directoryextension.js";

export type DirectoryMemberCreateContactTags = {};

export type DirectoryMemberCreate = {
  name: string;
  type: string;
  extensions?: Array<DirectoryExtension> | null | undefined;
  contactTags?: DirectoryMemberCreateContactTags | null | undefined;
  updatedAt?: Date | null | undefined;
  lastUpdatedBy?: string | null | undefined;
};

/** @internal */
export const DirectoryMemberCreateContactTags$inboundSchema: z.ZodType<
  DirectoryMemberCreateContactTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DirectoryMemberCreateContactTags$Outbound = {};

/** @internal */
export const DirectoryMemberCreateContactTags$outboundSchema: z.ZodType<
  DirectoryMemberCreateContactTags$Outbound,
  z.ZodTypeDef,
  DirectoryMemberCreateContactTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryMemberCreateContactTags$ {
  /** @deprecated use `DirectoryMemberCreateContactTags$inboundSchema` instead. */
  export const inboundSchema = DirectoryMemberCreateContactTags$inboundSchema;
  /** @deprecated use `DirectoryMemberCreateContactTags$outboundSchema` instead. */
  export const outboundSchema = DirectoryMemberCreateContactTags$outboundSchema;
  /** @deprecated use `DirectoryMemberCreateContactTags$Outbound` instead. */
  export type Outbound = DirectoryMemberCreateContactTags$Outbound;
}

export function directoryMemberCreateContactTagsToJSON(
  directoryMemberCreateContactTags: DirectoryMemberCreateContactTags,
): string {
  return JSON.stringify(
    DirectoryMemberCreateContactTags$outboundSchema.parse(
      directoryMemberCreateContactTags,
    ),
  );
}

export function directoryMemberCreateContactTagsFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryMemberCreateContactTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryMemberCreateContactTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryMemberCreateContactTags' from JSON`,
  );
}

/** @internal */
export const DirectoryMemberCreate$inboundSchema: z.ZodType<
  DirectoryMemberCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: z.string(),
  extensions: z.nullable(z.array(DirectoryExtension$inboundSchema)).optional(),
  contact_tags: z.nullable(
    z.lazy(() => DirectoryMemberCreateContactTags$inboundSchema),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_updated_by: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "contact_tags": "contactTags",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type DirectoryMemberCreate$Outbound = {
  name: string;
  type: string;
  extensions?: Array<DirectoryExtension$Outbound> | null | undefined;
  contact_tags?: DirectoryMemberCreateContactTags$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  last_updated_by?: string | null | undefined;
};

/** @internal */
export const DirectoryMemberCreate$outboundSchema: z.ZodType<
  DirectoryMemberCreate$Outbound,
  z.ZodTypeDef,
  DirectoryMemberCreate
> = z.object({
  name: z.string(),
  type: z.string(),
  extensions: z.nullable(z.array(DirectoryExtension$outboundSchema)).optional(),
  contactTags: z.nullable(
    z.lazy(() => DirectoryMemberCreateContactTags$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUpdatedBy: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contactTags: "contact_tags",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryMemberCreate$ {
  /** @deprecated use `DirectoryMemberCreate$inboundSchema` instead. */
  export const inboundSchema = DirectoryMemberCreate$inboundSchema;
  /** @deprecated use `DirectoryMemberCreate$outboundSchema` instead. */
  export const outboundSchema = DirectoryMemberCreate$outboundSchema;
  /** @deprecated use `DirectoryMemberCreate$Outbound` instead. */
  export type Outbound = DirectoryMemberCreate$Outbound;
}

export function directoryMemberCreateToJSON(
  directoryMemberCreate: DirectoryMemberCreate,
): string {
  return JSON.stringify(
    DirectoryMemberCreate$outboundSchema.parse(directoryMemberCreate),
  );
}

export function directoryMemberCreateFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryMemberCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryMemberCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryMemberCreate' from JSON`,
  );
}
