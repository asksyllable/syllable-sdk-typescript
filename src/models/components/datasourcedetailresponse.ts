/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metadata about a data source, along with the text. A data source is a blob of text that
 *
 * @remarks
 * can be made available to an agent's general info tools to provide more context to the agent when
 * generating its responses. For more information, see
 * [Console docs](https://docs.syllable.ai/Resources/DataSources).
 */
export type DataSourceDetailResponse = {
  /**
   * The data source name. Must be unique within suborg. Cannot contain whitespace.
   */
  name: string;
  /**
   * The description of the data source.
   */
  description?: string | null | undefined;
  /**
   * Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.
   */
  labels?: Array<string> | undefined;
  /**
   * Whether the content should be split into smaller chunks. (This feature is coming in the future - currently this value will always be treated as False.)
   */
  chunk: boolean;
  /**
   * String that should be treated as delimiter between intended chunks. (This feature is coming in the future - currently this value will always be treated as None.)
   */
  chunkDelimiter?: string | null | undefined;
  /**
   * The data source ID.
   */
  id: number;
  /**
   * The comments for the most recent edit to the data source
   */
  editComments?: string | null | undefined;
  /**
   * Timestamp of most recent update
   */
  updatedAt: Date;
  /**
   * Email of the user who last updated the data source
   */
  lastUpdatedBy: string | null;
  /**
   * Information that the data source will provide to the agent accessing it.
   */
  text: string;
};

/** @internal */
export const DataSourceDetailResponse$inboundSchema: z.ZodType<
  DataSourceDetailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunk_delimiter: z.nullable(z.string()).optional(),
  id: z.number().int(),
  edit_comments: z.nullable(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  last_updated_by: z.nullable(z.string()),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chunk_delimiter": "chunkDelimiter",
    "edit_comments": "editComments",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type DataSourceDetailResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  labels?: Array<string> | undefined;
  chunk: boolean;
  chunk_delimiter?: string | null | undefined;
  id: number;
  edit_comments?: string | null | undefined;
  updated_at: string;
  last_updated_by: string | null;
  text: string;
};

/** @internal */
export const DataSourceDetailResponse$outboundSchema: z.ZodType<
  DataSourceDetailResponse$Outbound,
  z.ZodTypeDef,
  DataSourceDetailResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunkDelimiter: z.nullable(z.string()).optional(),
  id: z.number().int(),
  editComments: z.nullable(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.nullable(z.string()),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    chunkDelimiter: "chunk_delimiter",
    editComments: "edit_comments",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceDetailResponse$ {
  /** @deprecated use `DataSourceDetailResponse$inboundSchema` instead. */
  export const inboundSchema = DataSourceDetailResponse$inboundSchema;
  /** @deprecated use `DataSourceDetailResponse$outboundSchema` instead. */
  export const outboundSchema = DataSourceDetailResponse$outboundSchema;
  /** @deprecated use `DataSourceDetailResponse$Outbound` instead. */
  export type Outbound = DataSourceDetailResponse$Outbound;
}

export function dataSourceDetailResponseToJSON(
  dataSourceDetailResponse: DataSourceDetailResponse,
): string {
  return JSON.stringify(
    DataSourceDetailResponse$outboundSchema.parse(dataSourceDetailResponse),
  );
}

export function dataSourceDetailResponseFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceDetailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourceDetailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceDetailResponse' from JSON`,
  );
}
