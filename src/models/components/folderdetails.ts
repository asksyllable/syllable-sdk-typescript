/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Meta-data of insight upload files associated with the folder
 */
export type FolderStats = {};

/**
 * Response model for an insight upload folder details.
 */
export type FolderDetails = {
  /**
   * Human-readable name of insight folder
   */
  name: string;
  /**
   * optional label assigned to insight folder
   */
  label?: string | null | undefined;
  /**
   * Text description of insight upload folder
   */
  description?: string | null | undefined;
  /**
   * System-assign folder ID
   */
  id: number;
  /**
   * Timestamp at which insight upload folder was created
   */
  createdAt?: Date | undefined;
  /**
   * Timestamp at which insight upload folder was last updated
   */
  updatedAt?: Date | undefined;
  /**
   * Email of user who last updated upload folder
   */
  lastUpdatedBy: string;
  /**
   * Meta-data of insight upload files associated with the folder
   */
  folderStats: FolderStats;
};

/** @internal */
export const FolderStats$inboundSchema: z.ZodType<
  FolderStats,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FolderStats$Outbound = {};

/** @internal */
export const FolderStats$outboundSchema: z.ZodType<
  FolderStats$Outbound,
  z.ZodTypeDef,
  FolderStats
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderStats$ {
  /** @deprecated use `FolderStats$inboundSchema` instead. */
  export const inboundSchema = FolderStats$inboundSchema;
  /** @deprecated use `FolderStats$outboundSchema` instead. */
  export const outboundSchema = FolderStats$outboundSchema;
  /** @deprecated use `FolderStats$Outbound` instead. */
  export type Outbound = FolderStats$Outbound;
}

export function folderStatsToJSON(folderStats: FolderStats): string {
  return JSON.stringify(FolderStats$outboundSchema.parse(folderStats));
}

export function folderStatsFromJSON(
  jsonString: string,
): SafeParseResult<FolderStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderStats' from JSON`,
  );
}

/** @internal */
export const FolderDetails$inboundSchema: z.ZodType<
  FolderDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  label: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  last_updated_by: z.string(),
  folder_stats: z.lazy(() => FolderStats$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
    "folder_stats": "folderStats",
  });
});

/** @internal */
export type FolderDetails$Outbound = {
  name: string;
  label?: string | null | undefined;
  description?: string | null | undefined;
  id: number;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_updated_by: string;
  folder_stats: FolderStats$Outbound;
};

/** @internal */
export const FolderDetails$outboundSchema: z.ZodType<
  FolderDetails$Outbound,
  z.ZodTypeDef,
  FolderDetails
> = z.object({
  name: z.string(),
  label: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdatedBy: z.string(),
  folderStats: z.lazy(() => FolderStats$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
    folderStats: "folder_stats",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderDetails$ {
  /** @deprecated use `FolderDetails$inboundSchema` instead. */
  export const inboundSchema = FolderDetails$inboundSchema;
  /** @deprecated use `FolderDetails$outboundSchema` instead. */
  export const outboundSchema = FolderDetails$outboundSchema;
  /** @deprecated use `FolderDetails$Outbound` instead. */
  export type Outbound = FolderDetails$Outbound;
}

export function folderDetailsToJSON(folderDetails: FolderDetails): string {
  return JSON.stringify(FolderDetails$outboundSchema.parse(folderDetails));
}

export function folderDetailsFromJSON(
  jsonString: string,
): SafeParseResult<FolderDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderDetails' from JSON`,
  );
}
