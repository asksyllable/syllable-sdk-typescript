/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BatchStatus,
  BatchStatus$inboundSchema,
  BatchStatus$outboundSchema,
} from "./batchstatus.js";

export type CommunicationBatch = {
  /**
   * Unique ID for conversation batch
   */
  batchId: string;
  /**
   * Unique ID for campaign
   */
  campaignId: number;
  /**
   * Timestamp of batch expiration
   */
  expiresOn?: string | null | undefined;
  /**
   * Status of a communication batch.
   */
  status?: BatchStatus | undefined;
  /**
   * Name of file used to create batch
   */
  uploadFilename?: string | null | undefined;
  /**
   * Timestamp of batch creation
   */
  createdAt?: string | undefined;
  /**
   * Timestamp of batch deletion
   */
  deletedAt?: string | null | undefined;
  /**
   * Reason for batch deletion
   */
  deletedReason?: string | null | undefined;
  /**
   * Timestamp of last batch activity
   */
  lastWorkedOn?: string | null | undefined;
  /**
   * Email of user who last updated campaign
   */
  lastUpdatedBy: string;
  /**
   * Error message if batch upload failed
   */
  errorMessage?: string | null | undefined;
};

/** @internal */
export const CommunicationBatch$inboundSchema: z.ZodType<
  CommunicationBatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_id: z.string(),
  campaign_id: z.number().int(),
  expires_on: z.nullable(z.string()).optional(),
  status: BatchStatus$inboundSchema.optional(),
  upload_filename: z.nullable(z.string()).optional(),
  created_at: z.string().optional(),
  deleted_at: z.nullable(z.string()).optional(),
  deleted_reason: z.nullable(z.string()).optional(),
  last_worked_on: z.nullable(z.string()).optional(),
  last_updated_by: z.string(),
  error_message: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "batch_id": "batchId",
    "campaign_id": "campaignId",
    "expires_on": "expiresOn",
    "upload_filename": "uploadFilename",
    "created_at": "createdAt",
    "deleted_at": "deletedAt",
    "deleted_reason": "deletedReason",
    "last_worked_on": "lastWorkedOn",
    "last_updated_by": "lastUpdatedBy",
    "error_message": "errorMessage",
  });
});

/** @internal */
export type CommunicationBatch$Outbound = {
  batch_id: string;
  campaign_id: number;
  expires_on?: string | null | undefined;
  status?: string | undefined;
  upload_filename?: string | null | undefined;
  created_at?: string | undefined;
  deleted_at?: string | null | undefined;
  deleted_reason?: string | null | undefined;
  last_worked_on?: string | null | undefined;
  last_updated_by: string;
  error_message?: string | null | undefined;
};

/** @internal */
export const CommunicationBatch$outboundSchema: z.ZodType<
  CommunicationBatch$Outbound,
  z.ZodTypeDef,
  CommunicationBatch
> = z.object({
  batchId: z.string(),
  campaignId: z.number().int(),
  expiresOn: z.nullable(z.string()).optional(),
  status: BatchStatus$outboundSchema.optional(),
  uploadFilename: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  deletedAt: z.nullable(z.string()).optional(),
  deletedReason: z.nullable(z.string()).optional(),
  lastWorkedOn: z.nullable(z.string()).optional(),
  lastUpdatedBy: z.string(),
  errorMessage: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    batchId: "batch_id",
    campaignId: "campaign_id",
    expiresOn: "expires_on",
    uploadFilename: "upload_filename",
    createdAt: "created_at",
    deletedAt: "deleted_at",
    deletedReason: "deleted_reason",
    lastWorkedOn: "last_worked_on",
    lastUpdatedBy: "last_updated_by",
    errorMessage: "error_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationBatch$ {
  /** @deprecated use `CommunicationBatch$inboundSchema` instead. */
  export const inboundSchema = CommunicationBatch$inboundSchema;
  /** @deprecated use `CommunicationBatch$outboundSchema` instead. */
  export const outboundSchema = CommunicationBatch$outboundSchema;
  /** @deprecated use `CommunicationBatch$Outbound` instead. */
  export type Outbound = CommunicationBatch$Outbound;
}

export function communicationBatchToJSON(
  communicationBatch: CommunicationBatch,
): string {
  return JSON.stringify(
    CommunicationBatch$outboundSchema.parse(communicationBatch),
  );
}

export function communicationBatchFromJSON(
  jsonString: string,
): SafeParseResult<CommunicationBatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommunicationBatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommunicationBatch' from JSON`,
  );
}
