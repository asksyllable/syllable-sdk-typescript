/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request model to move files between insight upload folders.
 */
export type InsightsFolderFileMove = {
  /**
   * System-assign folder ID
   */
  destinationFolderId: number;
  /**
   * List of system-assigned IDs for the files to be moved
   */
  fileIdList: Array<number>;
};

/** @internal */
export const InsightsFolderFileMove$inboundSchema: z.ZodType<
  InsightsFolderFileMove,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination_folder_id: z.number().int(),
  file_id_list: z.array(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    "destination_folder_id": "destinationFolderId",
    "file_id_list": "fileIdList",
  });
});

/** @internal */
export type InsightsFolderFileMove$Outbound = {
  destination_folder_id: number;
  file_id_list: Array<number>;
};

/** @internal */
export const InsightsFolderFileMove$outboundSchema: z.ZodType<
  InsightsFolderFileMove$Outbound,
  z.ZodTypeDef,
  InsightsFolderFileMove
> = z.object({
  destinationFolderId: z.number().int(),
  fileIdList: z.array(z.number().int()),
}).transform((v) => {
  return remap$(v, {
    destinationFolderId: "destination_folder_id",
    fileIdList: "file_id_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsFolderFileMove$ {
  /** @deprecated use `InsightsFolderFileMove$inboundSchema` instead. */
  export const inboundSchema = InsightsFolderFileMove$inboundSchema;
  /** @deprecated use `InsightsFolderFileMove$outboundSchema` instead. */
  export const outboundSchema = InsightsFolderFileMove$outboundSchema;
  /** @deprecated use `InsightsFolderFileMove$Outbound` instead. */
  export type Outbound = InsightsFolderFileMove$Outbound;
}

export function insightsFolderFileMoveToJSON(
  insightsFolderFileMove: InsightsFolderFileMove,
): string {
  return JSON.stringify(
    InsightsFolderFileMove$outboundSchema.parse(insightsFolderFileMove),
  );
}

export function insightsFolderFileMoveFromJSON(
  jsonString: string,
): SafeParseResult<InsightsFolderFileMove, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsFolderFileMove$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsFolderFileMove' from JSON`,
  );
}
