/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Information about a given message from a user to an agent or vice-versa.
 */
export type SessionText = {
  /**
   * Timestamp of the message
   */
  timestamp: Date;
  /**
   * ISO 639 code of the language used for the message (may appear as "unset" if was not conclusively determined)
   */
  lang?: string | null | undefined;
  /**
   * Whether the user or agent sent the message
   */
  source?: string | null | undefined;
  /**
   * Content of the message
   */
  text?: string | null | undefined;
};

/** @internal */
export const SessionText$inboundSchema: z.ZodType<
  SessionText,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  lang: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  text: z.nullable(z.string()).optional(),
});

/** @internal */
export type SessionText$Outbound = {
  timestamp: string;
  lang?: string | null | undefined;
  source?: string | null | undefined;
  text?: string | null | undefined;
};

/** @internal */
export const SessionText$outboundSchema: z.ZodType<
  SessionText$Outbound,
  z.ZodTypeDef,
  SessionText
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  lang: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  text: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionText$ {
  /** @deprecated use `SessionText$inboundSchema` instead. */
  export const inboundSchema = SessionText$inboundSchema;
  /** @deprecated use `SessionText$outboundSchema` instead. */
  export const outboundSchema = SessionText$outboundSchema;
  /** @deprecated use `SessionText$Outbound` instead. */
  export type Outbound = SessionText$Outbound;
}

export function sessionTextToJSON(sessionText: SessionText): string {
  return JSON.stringify(SessionText$outboundSchema.parse(sessionText));
}

export function sessionTextFromJSON(
  jsonString: string,
): SafeParseResult<SessionText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionText' from JSON`,
  );
}
