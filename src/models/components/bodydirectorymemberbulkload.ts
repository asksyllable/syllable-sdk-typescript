/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BodyDirectoryMemberBulkLoadFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyDirectoryMemberBulkLoad = {
  file: BodyDirectoryMemberBulkLoadFile | Blob;
};

/** @internal */
export const BodyDirectoryMemberBulkLoadFile$inboundSchema: z.ZodType<
  BodyDirectoryMemberBulkLoadFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type BodyDirectoryMemberBulkLoadFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const BodyDirectoryMemberBulkLoadFile$outboundSchema: z.ZodType<
  BodyDirectoryMemberBulkLoadFile$Outbound,
  z.ZodTypeDef,
  BodyDirectoryMemberBulkLoadFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyDirectoryMemberBulkLoadFile$ {
  /** @deprecated use `BodyDirectoryMemberBulkLoadFile$inboundSchema` instead. */
  export const inboundSchema = BodyDirectoryMemberBulkLoadFile$inboundSchema;
  /** @deprecated use `BodyDirectoryMemberBulkLoadFile$outboundSchema` instead. */
  export const outboundSchema = BodyDirectoryMemberBulkLoadFile$outboundSchema;
  /** @deprecated use `BodyDirectoryMemberBulkLoadFile$Outbound` instead. */
  export type Outbound = BodyDirectoryMemberBulkLoadFile$Outbound;
}

export function bodyDirectoryMemberBulkLoadFileToJSON(
  bodyDirectoryMemberBulkLoadFile: BodyDirectoryMemberBulkLoadFile,
): string {
  return JSON.stringify(
    BodyDirectoryMemberBulkLoadFile$outboundSchema.parse(
      bodyDirectoryMemberBulkLoadFile,
    ),
  );
}

export function bodyDirectoryMemberBulkLoadFileFromJSON(
  jsonString: string,
): SafeParseResult<BodyDirectoryMemberBulkLoadFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyDirectoryMemberBulkLoadFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyDirectoryMemberBulkLoadFile' from JSON`,
  );
}

/** @internal */
export const BodyDirectoryMemberBulkLoad$inboundSchema: z.ZodType<
  BodyDirectoryMemberBulkLoad,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => BodyDirectoryMemberBulkLoadFile$inboundSchema),
});

/** @internal */
export type BodyDirectoryMemberBulkLoad$Outbound = {
  file: BodyDirectoryMemberBulkLoadFile$Outbound | Blob;
};

/** @internal */
export const BodyDirectoryMemberBulkLoad$outboundSchema: z.ZodType<
  BodyDirectoryMemberBulkLoad$Outbound,
  z.ZodTypeDef,
  BodyDirectoryMemberBulkLoad
> = z.object({
  file: z.lazy(() => BodyDirectoryMemberBulkLoadFile$outboundSchema).or(
    blobLikeSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyDirectoryMemberBulkLoad$ {
  /** @deprecated use `BodyDirectoryMemberBulkLoad$inboundSchema` instead. */
  export const inboundSchema = BodyDirectoryMemberBulkLoad$inboundSchema;
  /** @deprecated use `BodyDirectoryMemberBulkLoad$outboundSchema` instead. */
  export const outboundSchema = BodyDirectoryMemberBulkLoad$outboundSchema;
  /** @deprecated use `BodyDirectoryMemberBulkLoad$Outbound` instead. */
  export type Outbound = BodyDirectoryMemberBulkLoad$Outbound;
}

export function bodyDirectoryMemberBulkLoadToJSON(
  bodyDirectoryMemberBulkLoad: BodyDirectoryMemberBulkLoad,
): string {
  return JSON.stringify(
    BodyDirectoryMemberBulkLoad$outboundSchema.parse(
      bodyDirectoryMemberBulkLoad,
    ),
  );
}

export function bodyDirectoryMemberBulkLoadFromJSON(
  jsonString: string,
): SafeParseResult<BodyDirectoryMemberBulkLoad, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BodyDirectoryMemberBulkLoad$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BodyDirectoryMemberBulkLoad' from JSON`,
  );
}
