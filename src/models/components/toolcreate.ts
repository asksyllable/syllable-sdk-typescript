/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The definition of the tool
 */
export type ToolCreateDefinition = {};

export type ToolCreate = {
  /**
   * The name of the tool
   */
  name: string;
  /**
   * The definition of the tool
   */
  definition?: ToolCreateDefinition | undefined;
  /**
   * The service this tool belongs to
   */
  serviceId: number;
};

/** @internal */
export const ToolCreateDefinition$inboundSchema: z.ZodType<
  ToolCreateDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolCreateDefinition$Outbound = {};

/** @internal */
export const ToolCreateDefinition$outboundSchema: z.ZodType<
  ToolCreateDefinition$Outbound,
  z.ZodTypeDef,
  ToolCreateDefinition
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCreateDefinition$ {
  /** @deprecated use `ToolCreateDefinition$inboundSchema` instead. */
  export const inboundSchema = ToolCreateDefinition$inboundSchema;
  /** @deprecated use `ToolCreateDefinition$outboundSchema` instead. */
  export const outboundSchema = ToolCreateDefinition$outboundSchema;
  /** @deprecated use `ToolCreateDefinition$Outbound` instead. */
  export type Outbound = ToolCreateDefinition$Outbound;
}

export function toolCreateDefinitionToJSON(
  toolCreateDefinition: ToolCreateDefinition,
): string {
  return JSON.stringify(
    ToolCreateDefinition$outboundSchema.parse(toolCreateDefinition),
  );
}

export function toolCreateDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<ToolCreateDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCreateDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCreateDefinition' from JSON`,
  );
}

/** @internal */
export const ToolCreate$inboundSchema: z.ZodType<
  ToolCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  definition: z.lazy(() => ToolCreateDefinition$inboundSchema).optional(),
  service_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type ToolCreate$Outbound = {
  name: string;
  definition?: ToolCreateDefinition$Outbound | undefined;
  service_id: number;
};

/** @internal */
export const ToolCreate$outboundSchema: z.ZodType<
  ToolCreate$Outbound,
  z.ZodTypeDef,
  ToolCreate
> = z.object({
  name: z.string(),
  definition: z.lazy(() => ToolCreateDefinition$outboundSchema).optional(),
  serviceId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCreate$ {
  /** @deprecated use `ToolCreate$inboundSchema` instead. */
  export const inboundSchema = ToolCreate$inboundSchema;
  /** @deprecated use `ToolCreate$outboundSchema` instead. */
  export const outboundSchema = ToolCreate$outboundSchema;
  /** @deprecated use `ToolCreate$Outbound` instead. */
  export type Outbound = ToolCreate$Outbound;
}

export function toolCreateToJSON(toolCreate: ToolCreate): string {
  return JSON.stringify(ToolCreate$outboundSchema.parse(toolCreate));
}

export function toolCreateFromJSON(
  jsonString: string,
): SafeParseResult<ToolCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCreate' from JSON`,
  );
}
