/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentOrganizationResponse = {
  id: number;
  name: string;
  displayName: string;
};

/** @internal */
export const IncidentOrganizationResponse$inboundSchema: z.ZodType<
  IncidentOrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  name: z.string(),
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type IncidentOrganizationResponse$Outbound = {
  id: number;
  name: string;
  display_name: string;
};

/** @internal */
export const IncidentOrganizationResponse$outboundSchema: z.ZodType<
  IncidentOrganizationResponse$Outbound,
  z.ZodTypeDef,
  IncidentOrganizationResponse
> = z.object({
  id: z.number().int(),
  name: z.string(),
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentOrganizationResponse$ {
  /** @deprecated use `IncidentOrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = IncidentOrganizationResponse$inboundSchema;
  /** @deprecated use `IncidentOrganizationResponse$outboundSchema` instead. */
  export const outboundSchema = IncidentOrganizationResponse$outboundSchema;
  /** @deprecated use `IncidentOrganizationResponse$Outbound` instead. */
  export type Outbound = IncidentOrganizationResponse$Outbound;
}

export function incidentOrganizationResponseToJSON(
  incidentOrganizationResponse: IncidentOrganizationResponse,
): string {
  return JSON.stringify(
    IncidentOrganizationResponse$outboundSchema.parse(
      incidentOrganizationResponse,
    ),
  );
}

export function incidentOrganizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<IncidentOrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentOrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentOrganizationResponse' from JSON`,
  );
}
