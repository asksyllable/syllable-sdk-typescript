/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightToolDefinition,
  InsightToolDefinition$inboundSchema,
  InsightToolDefinition$Outbound,
  InsightToolDefinition$outboundSchema,
} from "./insighttooldefinition.js";

/**
 * Arguments for Insight Tool
 */
export type ToolArguments = {};

export type InsightToolOutput = {
  /**
   * Human readable name of Insight Tool
   */
  name: string;
  /**
   * Text description of Insight Tool
   */
  description: string;
  /**
   * Version of Insight Tool
   */
  version: number;
  /**
   * Arguments for Insight Tool
   */
  toolArguments: ToolArguments;
  /**
   * Unique ID for Insight Tool Definition
   */
  insightToolDefinitionId: number;
  /**
   * Unique ID for Insight Tool
   */
  id: number;
  /**
   * Insight Tool Definition
   */
  insightToolDefinition?: InsightToolDefinition | null | undefined;
  /**
   * Timestamp of Insight Tool creation
   */
  createdAt?: Date | undefined;
  /**
   * Timestamp of Insight Tool update
   */
  updatedAt?: Date | undefined;
  /**
   * User who last updated Insight Tool
   */
  lastUpdatedBy: string;
};

/** @internal */
export const ToolArguments$inboundSchema: z.ZodType<
  ToolArguments,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolArguments$Outbound = {};

/** @internal */
export const ToolArguments$outboundSchema: z.ZodType<
  ToolArguments$Outbound,
  z.ZodTypeDef,
  ToolArguments
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolArguments$ {
  /** @deprecated use `ToolArguments$inboundSchema` instead. */
  export const inboundSchema = ToolArguments$inboundSchema;
  /** @deprecated use `ToolArguments$outboundSchema` instead. */
  export const outboundSchema = ToolArguments$outboundSchema;
  /** @deprecated use `ToolArguments$Outbound` instead. */
  export type Outbound = ToolArguments$Outbound;
}

export function toolArgumentsToJSON(toolArguments: ToolArguments): string {
  return JSON.stringify(ToolArguments$outboundSchema.parse(toolArguments));
}

export function toolArgumentsFromJSON(
  jsonString: string,
): SafeParseResult<ToolArguments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolArguments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolArguments' from JSON`,
  );
}

/** @internal */
export const InsightToolOutput$inboundSchema: z.ZodType<
  InsightToolOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  tool_arguments: z.lazy(() => ToolArguments$inboundSchema),
  insight_tool_definition_id: z.number().int(),
  id: z.number().int(),
  insight_tool_definition: z.nullable(InsightToolDefinition$inboundSchema)
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_arguments": "toolArguments",
    "insight_tool_definition_id": "insightToolDefinitionId",
    "insight_tool_definition": "insightToolDefinition",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type InsightToolOutput$Outbound = {
  name: string;
  description: string;
  version: number;
  tool_arguments: ToolArguments$Outbound;
  insight_tool_definition_id: number;
  id: number;
  insight_tool_definition?: InsightToolDefinition$Outbound | null | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_updated_by: string;
};

/** @internal */
export const InsightToolOutput$outboundSchema: z.ZodType<
  InsightToolOutput$Outbound,
  z.ZodTypeDef,
  InsightToolOutput
> = z.object({
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  toolArguments: z.lazy(() => ToolArguments$outboundSchema),
  insightToolDefinitionId: z.number().int(),
  id: z.number().int(),
  insightToolDefinition: z.nullable(InsightToolDefinition$outboundSchema)
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolArguments: "tool_arguments",
    insightToolDefinitionId: "insight_tool_definition_id",
    insightToolDefinition: "insight_tool_definition",
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightToolOutput$ {
  /** @deprecated use `InsightToolOutput$inboundSchema` instead. */
  export const inboundSchema = InsightToolOutput$inboundSchema;
  /** @deprecated use `InsightToolOutput$outboundSchema` instead. */
  export const outboundSchema = InsightToolOutput$outboundSchema;
  /** @deprecated use `InsightToolOutput$Outbound` instead. */
  export type Outbound = InsightToolOutput$Outbound;
}

export function insightToolOutputToJSON(
  insightToolOutput: InsightToolOutput,
): string {
  return JSON.stringify(
    InsightToolOutput$outboundSchema.parse(insightToolOutput),
  );
}

export function insightToolOutputFromJSON(
  jsonString: string,
): SafeParseResult<InsightToolOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightToolOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightToolOutput' from JSON`,
  );
}
