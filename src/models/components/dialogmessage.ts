/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DialogMessage = {
  /**
   * Dialog message text
   */
  text: string;
};

/** @internal */
export const DialogMessage$inboundSchema: z.ZodType<
  DialogMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
});

/** @internal */
export type DialogMessage$Outbound = {
  text: string;
};

/** @internal */
export const DialogMessage$outboundSchema: z.ZodType<
  DialogMessage$Outbound,
  z.ZodTypeDef,
  DialogMessage
> = z.object({
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DialogMessage$ {
  /** @deprecated use `DialogMessage$inboundSchema` instead. */
  export const inboundSchema = DialogMessage$inboundSchema;
  /** @deprecated use `DialogMessage$outboundSchema` instead. */
  export const outboundSchema = DialogMessage$outboundSchema;
  /** @deprecated use `DialogMessage$Outbound` instead. */
  export type Outbound = DialogMessage$Outbound;
}

export function dialogMessageToJSON(dialogMessage: DialogMessage): string {
  return JSON.stringify(DialogMessage$outboundSchema.parse(dialogMessage));
}

export function dialogMessageFromJSON(
  jsonString: string,
): SafeParseResult<DialogMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DialogMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DialogMessage' from JSON`,
  );
}
