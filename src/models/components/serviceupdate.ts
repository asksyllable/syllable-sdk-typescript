/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceUpdate = {
  /**
   * The name of the service
   */
  name: string;
  /**
   * The description of the service
   */
  description: string;
  /**
   * The ID of the service
   */
  id: number;
};

/** @internal */
export const ServiceUpdate$inboundSchema: z.ZodType<
  ServiceUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  id: z.number().int(),
});

/** @internal */
export type ServiceUpdate$Outbound = {
  name: string;
  description: string;
  id: number;
};

/** @internal */
export const ServiceUpdate$outboundSchema: z.ZodType<
  ServiceUpdate$Outbound,
  z.ZodTypeDef,
  ServiceUpdate
> = z.object({
  name: z.string(),
  description: z.string(),
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUpdate$ {
  /** @deprecated use `ServiceUpdate$inboundSchema` instead. */
  export const inboundSchema = ServiceUpdate$inboundSchema;
  /** @deprecated use `ServiceUpdate$outboundSchema` instead. */
  export const outboundSchema = ServiceUpdate$outboundSchema;
  /** @deprecated use `ServiceUpdate$Outbound` instead. */
  export type Outbound = ServiceUpdate$Outbound;
}

export function serviceUpdateToJSON(serviceUpdate: ServiceUpdate): string {
  return JSON.stringify(ServiceUpdate$outboundSchema.parse(serviceUpdate));
}

export function serviceUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ServiceUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceUpdate' from JSON`,
  );
}
