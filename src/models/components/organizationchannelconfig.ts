/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TelephonyConfigurations,
  TelephonyConfigurations$inboundSchema,
  TelephonyConfigurations$Outbound,
  TelephonyConfigurations$outboundSchema,
} from "./telephonyconfigurations.js";

/**
 * Channel config information for creates / updates through the organizations API
 */
export type OrganizationChannelConfig = {
  /**
   * SID of the Twilio account
   */
  accountSid?: string | null | undefined;
  /**
   * The Twilio auth token
   */
  authToken?: string | null | undefined;
  /**
   * Telephony configurations to be applied to the targets under the channel
   */
  telephony?: TelephonyConfigurations | null | undefined;
};

/** @internal */
export const OrganizationChannelConfig$inboundSchema: z.ZodType<
  OrganizationChannelConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_sid: z.nullable(z.string()).optional(),
  auth_token: z.nullable(z.string()).optional(),
  telephony: z.nullable(TelephonyConfigurations$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_sid": "accountSid",
    "auth_token": "authToken",
  });
});

/** @internal */
export type OrganizationChannelConfig$Outbound = {
  account_sid?: string | null | undefined;
  auth_token?: string | null | undefined;
  telephony?: TelephonyConfigurations$Outbound | null | undefined;
};

/** @internal */
export const OrganizationChannelConfig$outboundSchema: z.ZodType<
  OrganizationChannelConfig$Outbound,
  z.ZodTypeDef,
  OrganizationChannelConfig
> = z.object({
  accountSid: z.nullable(z.string()).optional(),
  authToken: z.nullable(z.string()).optional(),
  telephony: z.nullable(TelephonyConfigurations$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    accountSid: "account_sid",
    authToken: "auth_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationChannelConfig$ {
  /** @deprecated use `OrganizationChannelConfig$inboundSchema` instead. */
  export const inboundSchema = OrganizationChannelConfig$inboundSchema;
  /** @deprecated use `OrganizationChannelConfig$outboundSchema` instead. */
  export const outboundSchema = OrganizationChannelConfig$outboundSchema;
  /** @deprecated use `OrganizationChannelConfig$Outbound` instead. */
  export type Outbound = OrganizationChannelConfig$Outbound;
}

export function organizationChannelConfigToJSON(
  organizationChannelConfig: OrganizationChannelConfig,
): string {
  return JSON.stringify(
    OrganizationChannelConfig$outboundSchema.parse(organizationChannelConfig),
  );
}

export function organizationChannelConfigFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationChannelConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationChannelConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationChannelConfig' from JSON`,
  );
}
