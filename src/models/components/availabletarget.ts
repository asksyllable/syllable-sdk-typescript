/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An available organization-level channel target (i.e., one for which a channel target has not
 *
 * @remarks
 * been created in the current suborg).
 */
export type AvailableTarget = {
  /**
   * Internal ID of the org with which the target is associated.
   */
  organizationId: number;
  /**
   * Internal ID of the channel with which the target is associated.
   */
  channelId: number;
  /**
   * Name of the channel with which the target is associated.
   */
  channelName: string | null;
  /**
   * Org-level target.
   */
  target: string;
};

/** @internal */
export const AvailableTarget$inboundSchema: z.ZodType<
  AvailableTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.number().int(),
  channel_id: z.number().int(),
  channel_name: z.nullable(z.string()),
  target: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "channel_id": "channelId",
    "channel_name": "channelName",
  });
});

/** @internal */
export type AvailableTarget$Outbound = {
  organization_id: number;
  channel_id: number;
  channel_name: string | null;
  target: string;
};

/** @internal */
export const AvailableTarget$outboundSchema: z.ZodType<
  AvailableTarget$Outbound,
  z.ZodTypeDef,
  AvailableTarget
> = z.object({
  organizationId: z.number().int(),
  channelId: z.number().int(),
  channelName: z.nullable(z.string()),
  target: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    channelId: "channel_id",
    channelName: "channel_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableTarget$ {
  /** @deprecated use `AvailableTarget$inboundSchema` instead. */
  export const inboundSchema = AvailableTarget$inboundSchema;
  /** @deprecated use `AvailableTarget$outboundSchema` instead. */
  export const outboundSchema = AvailableTarget$outboundSchema;
  /** @deprecated use `AvailableTarget$Outbound` instead. */
  export type Outbound = AvailableTarget$Outbound;
}

export function availableTargetToJSON(
  availableTarget: AvailableTarget,
): string {
  return JSON.stringify(AvailableTarget$outboundSchema.parse(availableTarget));
}

export function availableTargetFromJSON(
  jsonString: string,
): SafeParseResult<AvailableTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableTarget' from JSON`,
  );
}
