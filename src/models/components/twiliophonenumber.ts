/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TwilioPhoneNumber = {
  /**
   * The unique identifier for the phone number.
   */
  sid: string;
  /**
   * The phone number.
   */
  phoneNumber: string;
  /**
   * A user-friendly name for the number.
   */
  friendlyName: string;
  /**
   * Associated trunk SID, if any.
   */
  trunkSid: string;
};

/** @internal */
export const TwilioPhoneNumber$inboundSchema: z.ZodType<
  TwilioPhoneNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  sid: z.string(),
  phone_number: z.string(),
  friendly_name: z.string(),
  trunk_sid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_number": "phoneNumber",
    "friendly_name": "friendlyName",
    "trunk_sid": "trunkSid",
  });
});

/** @internal */
export type TwilioPhoneNumber$Outbound = {
  sid: string;
  phone_number: string;
  friendly_name: string;
  trunk_sid: string;
};

/** @internal */
export const TwilioPhoneNumber$outboundSchema: z.ZodType<
  TwilioPhoneNumber$Outbound,
  z.ZodTypeDef,
  TwilioPhoneNumber
> = z.object({
  sid: z.string(),
  phoneNumber: z.string(),
  friendlyName: z.string(),
  trunkSid: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneNumber: "phone_number",
    friendlyName: "friendly_name",
    trunkSid: "trunk_sid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwilioPhoneNumber$ {
  /** @deprecated use `TwilioPhoneNumber$inboundSchema` instead. */
  export const inboundSchema = TwilioPhoneNumber$inboundSchema;
  /** @deprecated use `TwilioPhoneNumber$outboundSchema` instead. */
  export const outboundSchema = TwilioPhoneNumber$outboundSchema;
  /** @deprecated use `TwilioPhoneNumber$Outbound` instead. */
  export type Outbound = TwilioPhoneNumber$Outbound;
}

export function twilioPhoneNumberToJSON(
  twilioPhoneNumber: TwilioPhoneNumber,
): string {
  return JSON.stringify(
    TwilioPhoneNumber$outboundSchema.parse(twilioPhoneNumber),
  );
}

export function twilioPhoneNumberFromJSON(
  jsonString: string,
): SafeParseResult<TwilioPhoneNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TwilioPhoneNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TwilioPhoneNumber' from JSON`,
  );
}
