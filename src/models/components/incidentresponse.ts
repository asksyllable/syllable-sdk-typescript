/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for service incident operations.
 */
export type IncidentResponse = {
  /**
   * Description of the service incident
   */
  description: string;
  /**
   * Start time of the incident
   */
  startDatetime: Date;
  /**
   * Resolution time of the incident
   */
  resolutionDatetime: Date;
  /**
   * Category of the impact
   */
  impactCategory: string;
  /**
   * Number of sessions impacted
   */
  sessionsImpacted: number;
  /**
   * Detailed markdown description of the incident
   */
  markdown: string;
  /**
   * The ID of the organization
   */
  organizationId?: number | null | undefined;
  /**
   * The ID of the sub-organization
   */
  subOrganizationId?: number | null | undefined;
  /**
   * The name of the sub-organization (DEPRECATED)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  subOrganization?: string | null | undefined;
  /**
   * The ID of the incident to update
   */
  id: number;
  /**
   * Creation time of the incident
   */
  createdAt?: Date | null | undefined;
  /**
   * Last update time of the incident
   */
  updatedAt?: Date | null | undefined;
  /**
   * The email of the user who last updated the incident
   */
  lastUpdatedBy: string | null;
};

/** @internal */
export const IncidentResponse$inboundSchema: z.ZodType<
  IncidentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  start_datetime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  resolution_datetime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  impact_category: z.string(),
  sessions_impacted: z.number().int(),
  markdown: z.string(),
  organization_id: z.nullable(z.number().int()).optional(),
  sub_organization_id: z.nullable(z.number().int()).optional(),
  sub_organization: z.nullable(z.string()).optional(),
  id: z.number().int(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_updated_by: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "start_datetime": "startDatetime",
    "resolution_datetime": "resolutionDatetime",
    "impact_category": "impactCategory",
    "sessions_impacted": "sessionsImpacted",
    "organization_id": "organizationId",
    "sub_organization_id": "subOrganizationId",
    "sub_organization": "subOrganization",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type IncidentResponse$Outbound = {
  description: string;
  start_datetime: string;
  resolution_datetime: string;
  impact_category: string;
  sessions_impacted: number;
  markdown: string;
  organization_id?: number | null | undefined;
  sub_organization_id?: number | null | undefined;
  sub_organization?: string | null | undefined;
  id: number;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  last_updated_by: string | null;
};

/** @internal */
export const IncidentResponse$outboundSchema: z.ZodType<
  IncidentResponse$Outbound,
  z.ZodTypeDef,
  IncidentResponse
> = z.object({
  description: z.string(),
  startDatetime: z.date().transform(v => v.toISOString()),
  resolutionDatetime: z.date().transform(v => v.toISOString()),
  impactCategory: z.string(),
  sessionsImpacted: z.number().int(),
  markdown: z.string(),
  organizationId: z.nullable(z.number().int()).optional(),
  subOrganizationId: z.nullable(z.number().int()).optional(),
  subOrganization: z.nullable(z.string()).optional(),
  id: z.number().int(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUpdatedBy: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startDatetime: "start_datetime",
    resolutionDatetime: "resolution_datetime",
    impactCategory: "impact_category",
    sessionsImpacted: "sessions_impacted",
    organizationId: "organization_id",
    subOrganizationId: "sub_organization_id",
    subOrganization: "sub_organization",
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentResponse$ {
  /** @deprecated use `IncidentResponse$inboundSchema` instead. */
  export const inboundSchema = IncidentResponse$inboundSchema;
  /** @deprecated use `IncidentResponse$outboundSchema` instead. */
  export const outboundSchema = IncidentResponse$outboundSchema;
  /** @deprecated use `IncidentResponse$Outbound` instead. */
  export type Outbound = IncidentResponse$Outbound;
}

export function incidentResponseToJSON(
  incidentResponse: IncidentResponse,
): string {
  return JSON.stringify(
    IncidentResponse$outboundSchema.parse(incidentResponse),
  );
}

export function incidentResponseFromJSON(
  jsonString: string,
): SafeParseResult<IncidentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentResponse' from JSON`,
  );
}
