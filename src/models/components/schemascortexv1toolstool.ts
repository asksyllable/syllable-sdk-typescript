/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  FunctionT,
  FunctionT$inboundSchema,
  FunctionT$Outbound,
  FunctionT$outboundSchema,
} from "./function.js";

/**
 * A tool definition to be used by the OpenAI API.
 */
export type SchemasCortexV1ToolsTool = {
  /**
   * Always `function`.
   */
  type?: string | null | undefined;
  /**
   * The tool definition including the JSON Schema of its parameters.
   */
  function: FunctionT;
};

/** @internal */
export const SchemasCortexV1ToolsTool$inboundSchema: z.ZodType<
  SchemasCortexV1ToolsTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(z.string()).optional(),
  function: FunctionT$inboundSchema,
});

/** @internal */
export type SchemasCortexV1ToolsTool$Outbound = {
  type?: string | null | undefined;
  function: FunctionT$Outbound;
};

/** @internal */
export const SchemasCortexV1ToolsTool$outboundSchema: z.ZodType<
  SchemasCortexV1ToolsTool$Outbound,
  z.ZodTypeDef,
  SchemasCortexV1ToolsTool
> = z.object({
  type: z.nullable(z.string()).optional(),
  function: FunctionT$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasCortexV1ToolsTool$ {
  /** @deprecated use `SchemasCortexV1ToolsTool$inboundSchema` instead. */
  export const inboundSchema = SchemasCortexV1ToolsTool$inboundSchema;
  /** @deprecated use `SchemasCortexV1ToolsTool$outboundSchema` instead. */
  export const outboundSchema = SchemasCortexV1ToolsTool$outboundSchema;
  /** @deprecated use `SchemasCortexV1ToolsTool$Outbound` instead. */
  export type Outbound = SchemasCortexV1ToolsTool$Outbound;
}
