/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * AI summary information for a given session.
 */
export type SessionSummaryResponse = {
  /**
   * The AI summary of the session
   */
  summary?: string | null | undefined;
  /**
   * The AI rating of the session
   */
  rating?: string | null | undefined;
};

/** @internal */
export const SessionSummaryResponse$inboundSchema: z.ZodType<
  SessionSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.nullable(z.string()).optional(),
  rating: z.nullable(z.string()).optional(),
});

/** @internal */
export type SessionSummaryResponse$Outbound = {
  summary?: string | null | undefined;
  rating?: string | null | undefined;
};

/** @internal */
export const SessionSummaryResponse$outboundSchema: z.ZodType<
  SessionSummaryResponse$Outbound,
  z.ZodTypeDef,
  SessionSummaryResponse
> = z.object({
  summary: z.nullable(z.string()).optional(),
  rating: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionSummaryResponse$ {
  /** @deprecated use `SessionSummaryResponse$inboundSchema` instead. */
  export const inboundSchema = SessionSummaryResponse$inboundSchema;
  /** @deprecated use `SessionSummaryResponse$outboundSchema` instead. */
  export const outboundSchema = SessionSummaryResponse$outboundSchema;
  /** @deprecated use `SessionSummaryResponse$Outbound` instead. */
  export type Outbound = SessionSummaryResponse$Outbound;
}

export function sessionSummaryResponseToJSON(
  sessionSummaryResponse: SessionSummaryResponse,
): string {
  return JSON.stringify(
    SessionSummaryResponse$outboundSchema.parse(sessionSummaryResponse),
  );
}

export function sessionSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<SessionSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionSummaryResponse' from JSON`,
  );
}
