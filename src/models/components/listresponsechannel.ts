/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Channel,
  Channel$inboundSchema,
  Channel$Outbound,
  Channel$outboundSchema,
} from "./channel.js";

export type ListResponseChannel = {
  items: Array<Channel>;
  page: number;
  pageSize: number;
  totalPages?: number | null | undefined;
  totalCount?: number | null | undefined;
};

/** @internal */
export const ListResponseChannel$inboundSchema: z.ZodType<
  ListResponseChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(Channel$inboundSchema),
  page: z.number().int(),
  page_size: z.number().int(),
  total_pages: z.nullable(z.number().int()).optional(),
  total_count: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "total_pages": "totalPages",
    "total_count": "totalCount",
  });
});

/** @internal */
export type ListResponseChannel$Outbound = {
  items: Array<Channel$Outbound>;
  page: number;
  page_size: number;
  total_pages?: number | null | undefined;
  total_count?: number | null | undefined;
};

/** @internal */
export const ListResponseChannel$outboundSchema: z.ZodType<
  ListResponseChannel$Outbound,
  z.ZodTypeDef,
  ListResponseChannel
> = z.object({
  items: z.array(Channel$outboundSchema),
  page: z.number().int(),
  pageSize: z.number().int(),
  totalPages: z.nullable(z.number().int()).optional(),
  totalCount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    totalPages: "total_pages",
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResponseChannel$ {
  /** @deprecated use `ListResponseChannel$inboundSchema` instead. */
  export const inboundSchema = ListResponseChannel$inboundSchema;
  /** @deprecated use `ListResponseChannel$outboundSchema` instead. */
  export const outboundSchema = ListResponseChannel$outboundSchema;
  /** @deprecated use `ListResponseChannel$Outbound` instead. */
  export type Outbound = ListResponseChannel$Outbound;
}

export function listResponseChannelToJSON(
  listResponseChannel: ListResponseChannel,
): string {
  return JSON.stringify(
    ListResponseChannel$outboundSchema.parse(listResponseChannel),
  );
}

export function listResponseChannelFromJSON(
  jsonString: string,
): SafeParseResult<ListResponseChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResponseChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResponseChannel' from JSON`,
  );
}
