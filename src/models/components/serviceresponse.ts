/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolAuthType,
  ToolAuthType$inboundSchema,
  ToolAuthType$outboundSchema,
} from "./toolauthtype.js";

/**
 * Response model for service operations. A service is a collection of tools.
 */
export type ServiceResponse = {
  /**
   * The internal ID of the service
   */
  id: number;
  /**
   * The name of the service
   */
  name: string;
  /**
   * The description of the service
   */
  description: string;
  /**
   * The type of authentication to use for the service's tools
   */
  authType?: ToolAuthType | null | undefined;
  /**
   * Auth value keys (values omitted for security)
   */
  authValueKeys?: Array<string> | null | undefined;
  /**
   * Free text providing comment about what was updated
   */
  lastUpdatedComments?: string | null | undefined;
  /**
   * The timestamp of the most recent update to the service
   */
  lastUpdated: Date;
  /**
   * The email of the user who last updated the service
   */
  lastUpdatedBy: string;
  /**
   * Names of tools that belong to the service
   */
  tools: Array<string>;
};

/** @internal */
export const ServiceResponse$inboundSchema: z.ZodType<
  ServiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string(),
  auth_type: z.nullable(ToolAuthType$inboundSchema).optional(),
  auth_value_keys: z.nullable(z.array(z.string())).optional(),
  last_updated_comments: z.nullable(z.string()).optional(),
  last_updated: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  last_updated_by: z.string(),
  tools: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "auth_type": "authType",
    "auth_value_keys": "authValueKeys",
    "last_updated_comments": "lastUpdatedComments",
    "last_updated": "lastUpdated",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type ServiceResponse$Outbound = {
  id: number;
  name: string;
  description: string;
  auth_type?: string | null | undefined;
  auth_value_keys?: Array<string> | null | undefined;
  last_updated_comments?: string | null | undefined;
  last_updated: string;
  last_updated_by: string;
  tools: Array<string>;
};

/** @internal */
export const ServiceResponse$outboundSchema: z.ZodType<
  ServiceResponse$Outbound,
  z.ZodTypeDef,
  ServiceResponse
> = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string(),
  authType: z.nullable(ToolAuthType$outboundSchema).optional(),
  authValueKeys: z.nullable(z.array(z.string())).optional(),
  lastUpdatedComments: z.nullable(z.string()).optional(),
  lastUpdated: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.string(),
  tools: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    authType: "auth_type",
    authValueKeys: "auth_value_keys",
    lastUpdatedComments: "last_updated_comments",
    lastUpdated: "last_updated",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceResponse$ {
  /** @deprecated use `ServiceResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceResponse$inboundSchema;
  /** @deprecated use `ServiceResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceResponse$outboundSchema;
  /** @deprecated use `ServiceResponse$Outbound` instead. */
  export type Outbound = ServiceResponse$Outbound;
}

export function serviceResponseToJSON(
  serviceResponse: ServiceResponse,
): string {
  return JSON.stringify(ServiceResponse$outboundSchema.parse(serviceResponse));
}

export function serviceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceResponse' from JSON`,
  );
}
