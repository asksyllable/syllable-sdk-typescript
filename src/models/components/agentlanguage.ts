/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LanguageCode,
  LanguageCode$inboundSchema,
  LanguageCode$outboundSchema,
} from "./languagecode.js";

/**
 * Language option for an agent.
 */
export type AgentLanguage = {
  /**
   * Name of the language
   */
  name: string;
  /**
   * BCP 47 codes of languages that Syllable supports.
   */
  code: LanguageCode;
};

/** @internal */
export const AgentLanguage$inboundSchema: z.ZodType<
  AgentLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  code: LanguageCode$inboundSchema,
});

/** @internal */
export type AgentLanguage$Outbound = {
  name: string;
  code: string;
};

/** @internal */
export const AgentLanguage$outboundSchema: z.ZodType<
  AgentLanguage$Outbound,
  z.ZodTypeDef,
  AgentLanguage
> = z.object({
  name: z.string(),
  code: LanguageCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentLanguage$ {
  /** @deprecated use `AgentLanguage$inboundSchema` instead. */
  export const inboundSchema = AgentLanguage$inboundSchema;
  /** @deprecated use `AgentLanguage$outboundSchema` instead. */
  export const outboundSchema = AgentLanguage$outboundSchema;
  /** @deprecated use `AgentLanguage$Outbound` instead. */
  export type Outbound = AgentLanguage$Outbound;
}

export function agentLanguageToJSON(agentLanguage: AgentLanguage): string {
  return JSON.stringify(AgentLanguage$outboundSchema.parse(agentLanguage));
}

export function agentLanguageFromJSON(
  jsonString: string,
): SafeParseResult<AgentLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentLanguage' from JSON`,
  );
}
