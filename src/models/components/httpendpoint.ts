/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The HTTP method to use for the service call.
 */
export const Method = {
  Get: "get",
  Post: "post",
} as const;
/**
 * The HTTP method to use for the service call.
 */
export type Method = ClosedEnum<typeof Method>;

/**
 * How to pass the arguments to the request.
 */
export const ArgumentLocation = {
  Body: "body",
  Form: "form",
  Path: "path",
  Query: "query",
} as const;
/**
 * How to pass the arguments to the request.
 */
export type ArgumentLocation = ClosedEnum<typeof ArgumentLocation>;

/**
 * The configuration for an HTTP API call.
 */
export type HttpEndpoint = {
  /**
   * The endpoint URL of the external service to call.
   */
  url: string;
  /**
   * The HTTP method to use for the service call.
   */
  method: Method;
  /**
   * How to pass the arguments to the request.
   */
  argumentLocation: ArgumentLocation;
};

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z
  .nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> =
  Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const ArgumentLocation$inboundSchema: z.ZodNativeEnum<
  typeof ArgumentLocation
> = z.nativeEnum(ArgumentLocation);

/** @internal */
export const ArgumentLocation$outboundSchema: z.ZodNativeEnum<
  typeof ArgumentLocation
> = ArgumentLocation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArgumentLocation$ {
  /** @deprecated use `ArgumentLocation$inboundSchema` instead. */
  export const inboundSchema = ArgumentLocation$inboundSchema;
  /** @deprecated use `ArgumentLocation$outboundSchema` instead. */
  export const outboundSchema = ArgumentLocation$outboundSchema;
}

/** @internal */
export const HttpEndpoint$inboundSchema: z.ZodType<
  HttpEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: Method$inboundSchema,
  argument_location: ArgumentLocation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "argument_location": "argumentLocation",
  });
});

/** @internal */
export type HttpEndpoint$Outbound = {
  url: string;
  method: string;
  argument_location: string;
};

/** @internal */
export const HttpEndpoint$outboundSchema: z.ZodType<
  HttpEndpoint$Outbound,
  z.ZodTypeDef,
  HttpEndpoint
> = z.object({
  url: z.string(),
  method: Method$outboundSchema,
  argumentLocation: ArgumentLocation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    argumentLocation: "argument_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpEndpoint$ {
  /** @deprecated use `HttpEndpoint$inboundSchema` instead. */
  export const inboundSchema = HttpEndpoint$inboundSchema;
  /** @deprecated use `HttpEndpoint$outboundSchema` instead. */
  export const outboundSchema = HttpEndpoint$outboundSchema;
  /** @deprecated use `HttpEndpoint$Outbound` instead. */
  export type Outbound = HttpEndpoint$Outbound;
}
