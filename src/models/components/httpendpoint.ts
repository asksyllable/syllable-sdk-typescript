/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The configuration for an HTTP API call.
 */
export type HttpEndpoint = {
  /**
   * The endpoint URL of the external service to call.
   */
  url: string;
  /**
   * The HTTP method to use for the service call.
   */
  method: string;
  /**
   * How to pass the arguments to the request.
   */
  argumentLocation: string;
};

/** @internal */
export const HttpEndpoint$inboundSchema: z.ZodType<
  HttpEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: z.string(),
  argument_location: z.string(),
}).transform((v) => {
  return remap$(v, {
    "argument_location": "argumentLocation",
  });
});

/** @internal */
export type HttpEndpoint$Outbound = {
  url: string;
  method: string;
  argument_location: string;
};

/** @internal */
export const HttpEndpoint$outboundSchema: z.ZodType<
  HttpEndpoint$Outbound,
  z.ZodTypeDef,
  HttpEndpoint
> = z.object({
  url: z.string(),
  method: z.string(),
  argumentLocation: z.string(),
}).transform((v) => {
  return remap$(v, {
    argumentLocation: "argument_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpEndpoint$ {
  /** @deprecated use `HttpEndpoint$inboundSchema` instead. */
  export const inboundSchema = HttpEndpoint$inboundSchema;
  /** @deprecated use `HttpEndpoint$outboundSchema` instead. */
  export const outboundSchema = HttpEndpoint$outboundSchema;
  /** @deprecated use `HttpEndpoint$Outbound` instead. */
  export type Outbound = HttpEndpoint$Outbound;
}
