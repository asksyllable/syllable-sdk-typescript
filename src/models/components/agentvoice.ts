/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentVoiceVarName,
  AgentVoiceVarName$inboundSchema,
  AgentVoiceVarName$outboundSchema,
} from "./agentvoicevarname.js";
import {
  SttProvider,
  SttProvider$inboundSchema,
  SttProvider$outboundSchema,
} from "./sttprovider.js";

/**
 * Voice option for an agent.
 */
export type AgentVoice = {
  /**
   * Provider for an agent voice.
   */
  provider: SttProvider;
  /**
   * The display name of the voice
   */
  displayName: string;
  /**
   * The variable name of an agent voice (used when procesing messages).
   */
  varName: AgentVoiceVarName;
};

/** @internal */
export const AgentVoice$inboundSchema: z.ZodType<
  AgentVoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: SttProvider$inboundSchema,
  display_name: z.string(),
  var_name: AgentVoiceVarName$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "var_name": "varName",
  });
});

/** @internal */
export type AgentVoice$Outbound = {
  provider: string;
  display_name: string;
  var_name: string;
};

/** @internal */
export const AgentVoice$outboundSchema: z.ZodType<
  AgentVoice$Outbound,
  z.ZodTypeDef,
  AgentVoice
> = z.object({
  provider: SttProvider$outboundSchema,
  displayName: z.string(),
  varName: AgentVoiceVarName$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    varName: "var_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentVoice$ {
  /** @deprecated use `AgentVoice$inboundSchema` instead. */
  export const inboundSchema = AgentVoice$inboundSchema;
  /** @deprecated use `AgentVoice$outboundSchema` instead. */
  export const outboundSchema = AgentVoice$outboundSchema;
  /** @deprecated use `AgentVoice$Outbound` instead. */
  export type Outbound = AgentVoice$Outbound;
}

export function agentVoiceToJSON(agentVoice: AgentVoice): string {
  return JSON.stringify(AgentVoice$outboundSchema.parse(agentVoice));
}

export function agentVoiceFromJSON(
  jsonString: string,
): SafeParseResult<AgentVoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentVoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentVoice' from JSON`,
  );
}
