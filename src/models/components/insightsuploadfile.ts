/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Metadata = {};

/**
 * Response model for an insight upload file.
 */
export type InsightsUploadFile = {
  /**
   * System-assigned ID for the upload file
   */
  id: number;
  /**
   * System-assigned ID for the folder to which the file belongs
   */
  folderId: number;
  /**
   * Name of the uploaded file
   */
  filename: string;
  /**
   * Object-store key of the uploaded file
   */
  objectKey: string;
  /**
   * Unique identifier for the call associated with the uploaded file
   */
  callId?: string | null | undefined;
  /**
   * Agent number associated with the uploaded file
   */
  agentNumber?: string | null | undefined;
  /**
   * Customer number associated with the uploaded file
   */
  customerNumber?: string | null | undefined;
  /**
   * Length in seconds of the uploaded recording
   */
  duration?: number | null | undefined;
  /**
   * Start time of the uploaded file
   */
  startTime?: Date | null | undefined;
  /**
   * End time of the uploaded file
   */
  endTime?: Date | null | undefined;
  /**
   * Error message associated with the uploaded file
   */
  errorMessage?: string | null | undefined;
  /**
   * Meta-data associated with the uploaded file
   */
  metadata?: Metadata | null | undefined;
  /**
   * Timestamp at which insight upload file was created
   */
  createdAt?: Date | undefined;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const InsightsUploadFile$inboundSchema: z.ZodType<
  InsightsUploadFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  folder_id: z.number().int(),
  filename: z.string(),
  object_key: z.string(),
  call_id: z.nullable(z.string()).optional(),
  agent_number: z.nullable(z.string()).optional(),
  customer_number: z.nullable(z.string()).optional(),
  duration: z.nullable(z.number()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  error_message: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => Metadata$inboundSchema)).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "object_key": "objectKey",
    "call_id": "callId",
    "agent_number": "agentNumber",
    "customer_number": "customerNumber",
    "start_time": "startTime",
    "end_time": "endTime",
    "error_message": "errorMessage",
    "created_at": "createdAt",
  });
});

/** @internal */
export type InsightsUploadFile$Outbound = {
  id: number;
  folder_id: number;
  filename: string;
  object_key: string;
  call_id?: string | null | undefined;
  agent_number?: string | null | undefined;
  customer_number?: string | null | undefined;
  duration?: number | null | undefined;
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
  error_message?: string | null | undefined;
  metadata?: Metadata$Outbound | null | undefined;
  created_at?: string | undefined;
};

/** @internal */
export const InsightsUploadFile$outboundSchema: z.ZodType<
  InsightsUploadFile$Outbound,
  z.ZodTypeDef,
  InsightsUploadFile
> = z.object({
  id: z.number().int(),
  folderId: z.number().int(),
  filename: z.string(),
  objectKey: z.string(),
  callId: z.nullable(z.string()).optional(),
  agentNumber: z.nullable(z.string()).optional(),
  customerNumber: z.nullable(z.string()).optional(),
  duration: z.nullable(z.number()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => Metadata$outboundSchema)).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    objectKey: "object_key",
    callId: "call_id",
    agentNumber: "agent_number",
    customerNumber: "customer_number",
    startTime: "start_time",
    endTime: "end_time",
    errorMessage: "error_message",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsUploadFile$ {
  /** @deprecated use `InsightsUploadFile$inboundSchema` instead. */
  export const inboundSchema = InsightsUploadFile$inboundSchema;
  /** @deprecated use `InsightsUploadFile$outboundSchema` instead. */
  export const outboundSchema = InsightsUploadFile$outboundSchema;
  /** @deprecated use `InsightsUploadFile$Outbound` instead. */
  export type Outbound = InsightsUploadFile$Outbound;
}

export function insightsUploadFileToJSON(
  insightsUploadFile: InsightsUploadFile,
): string {
  return JSON.stringify(
    InsightsUploadFile$outboundSchema.parse(insightsUploadFile),
  );
}

export function insightsUploadFileFromJSON(
  jsonString: string,
): SafeParseResult<InsightsUploadFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsUploadFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsUploadFile' from JSON`,
  );
}
