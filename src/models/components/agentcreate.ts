/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentToolDefaults,
  AgentToolDefaults$inboundSchema,
  AgentToolDefaults$Outbound,
  AgentToolDefaults$outboundSchema,
} from "./agenttooldefaults.js";

export type Variables = {};

export type AgentCreate = {
  /**
   * The agent name
   */
  name: string;
  /**
   * The agent description
   */
  description?: string | null | undefined;
  /**
   * The agent label
   */
  label?: string | null | undefined;
  /**
   * The agent type. Can be an arbitrary string
   */
  type: string;
  /**
   * ID of the prompt associated with the agent
   */
  promptId: number;
  /**
   * ID of the custom message that should be delivered at the beginning of a conversation with the agent
   */
  customMessageId: number;
  /**
   * The time zone in which the agent operates
   */
  timezone: string;
  /**
   * The prompt tool defaults
   */
  promptToolDefaults?: Array<AgentToolDefaults> | undefined;
  /**
   * BCP 47 codes of languages the agent supports
   */
  languages?: Array<string> | undefined;
  /**
   * Custom context variables for the conversation session. Keys should be prefixed with "vars.".
   */
  variables: Variables | null;
  /**
   * Optional headers to include in tool calls for agent.
   */
  toolHeaders: { [k: string]: string } | null;
};

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Variables$Outbound = {};

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

export function variablesToJSON(variables: Variables): string {
  return JSON.stringify(Variables$outboundSchema.parse(variables));
}

export function variablesFromJSON(
  jsonString: string,
): SafeParseResult<Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variables' from JSON`,
  );
}

/** @internal */
export const AgentCreate$inboundSchema: z.ZodType<
  AgentCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  prompt_id: z.number().int(),
  custom_message_id: z.number().int(),
  timezone: z.string(),
  prompt_tool_defaults: z.array(AgentToolDefaults$inboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.nullable(z.lazy(() => Variables$inboundSchema)),
  tool_headers: z.nullable(z.record(z.string())),
}).transform((v) => {
  return remap$(v, {
    "prompt_id": "promptId",
    "custom_message_id": "customMessageId",
    "prompt_tool_defaults": "promptToolDefaults",
    "tool_headers": "toolHeaders",
  });
});

/** @internal */
export type AgentCreate$Outbound = {
  name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  type: string;
  prompt_id: number;
  custom_message_id: number;
  timezone: string;
  prompt_tool_defaults?: Array<AgentToolDefaults$Outbound> | undefined;
  languages?: Array<string> | undefined;
  variables: Variables$Outbound | null;
  tool_headers: { [k: string]: string } | null;
};

/** @internal */
export const AgentCreate$outboundSchema: z.ZodType<
  AgentCreate$Outbound,
  z.ZodTypeDef,
  AgentCreate
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  type: z.string(),
  promptId: z.number().int(),
  customMessageId: z.number().int(),
  timezone: z.string(),
  promptToolDefaults: z.array(AgentToolDefaults$outboundSchema).optional(),
  languages: z.array(z.string()).optional(),
  variables: z.nullable(z.lazy(() => Variables$outboundSchema)),
  toolHeaders: z.nullable(z.record(z.string())),
}).transform((v) => {
  return remap$(v, {
    promptId: "prompt_id",
    customMessageId: "custom_message_id",
    promptToolDefaults: "prompt_tool_defaults",
    toolHeaders: "tool_headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentCreate$ {
  /** @deprecated use `AgentCreate$inboundSchema` instead. */
  export const inboundSchema = AgentCreate$inboundSchema;
  /** @deprecated use `AgentCreate$outboundSchema` instead. */
  export const outboundSchema = AgentCreate$outboundSchema;
  /** @deprecated use `AgentCreate$Outbound` instead. */
  export type Outbound = AgentCreate$Outbound;
}

export function agentCreateToJSON(agentCreate: AgentCreate): string {
  return JSON.stringify(AgentCreate$outboundSchema.parse(agentCreate));
}

export function agentCreateFromJSON(
  jsonString: string,
): SafeParseResult<AgentCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentCreate' from JSON`,
  );
}
