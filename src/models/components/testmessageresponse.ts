/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The response from the agent
 */
export type Response = {};

/**
 * Response from an agent in a test chat.
 */
export type TestMessageResponse = {
  /**
   * Channel-manager-side ID of the session (see Session.channel_manager_sid)
   */
  testId: string;
  /**
   * ID of the agent with which the chat is taking place
   */
  agentId: string;
  /**
   * The text of the message that elicited the response
   */
  text?: string | undefined;
  /**
   * The response from the agent
   */
  response?: Response | undefined;
  /**
   * The text of the response
   */
  responseText?: string | undefined;
};

/** @internal */
export const Response$inboundSchema: z.ZodType<
  Response,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Response$Outbound = {};

/** @internal */
export const Response$outboundSchema: z.ZodType<
  Response$Outbound,
  z.ZodTypeDef,
  Response
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Response$ {
  /** @deprecated use `Response$inboundSchema` instead. */
  export const inboundSchema = Response$inboundSchema;
  /** @deprecated use `Response$outboundSchema` instead. */
  export const outboundSchema = Response$outboundSchema;
  /** @deprecated use `Response$Outbound` instead. */
  export type Outbound = Response$Outbound;
}

export function responseToJSON(response: Response): string {
  return JSON.stringify(Response$outboundSchema.parse(response));
}

export function responseFromJSON(
  jsonString: string,
): SafeParseResult<Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Response' from JSON`,
  );
}

/** @internal */
export const TestMessageResponse$inboundSchema: z.ZodType<
  TestMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  test_id: z.string(),
  agent_id: z.string(),
  text: z.string().optional(),
  response: z.lazy(() => Response$inboundSchema).optional(),
  response_text: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "test_id": "testId",
    "agent_id": "agentId",
    "response_text": "responseText",
  });
});

/** @internal */
export type TestMessageResponse$Outbound = {
  test_id: string;
  agent_id: string;
  text?: string | undefined;
  response?: Response$Outbound | undefined;
  response_text?: string | undefined;
};

/** @internal */
export const TestMessageResponse$outboundSchema: z.ZodType<
  TestMessageResponse$Outbound,
  z.ZodTypeDef,
  TestMessageResponse
> = z.object({
  testId: z.string(),
  agentId: z.string(),
  text: z.string().optional(),
  response: z.lazy(() => Response$outboundSchema).optional(),
  responseText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    testId: "test_id",
    agentId: "agent_id",
    responseText: "response_text",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestMessageResponse$ {
  /** @deprecated use `TestMessageResponse$inboundSchema` instead. */
  export const inboundSchema = TestMessageResponse$inboundSchema;
  /** @deprecated use `TestMessageResponse$outboundSchema` instead. */
  export const outboundSchema = TestMessageResponse$outboundSchema;
  /** @deprecated use `TestMessageResponse$Outbound` instead. */
  export type Outbound = TestMessageResponse$Outbound;
}

export function testMessageResponseToJSON(
  testMessageResponse: TestMessageResponse,
): string {
  return JSON.stringify(
    TestMessageResponse$outboundSchema.parse(testMessageResponse),
  );
}

export function testMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<TestMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestMessageResponse' from JSON`,
  );
}
