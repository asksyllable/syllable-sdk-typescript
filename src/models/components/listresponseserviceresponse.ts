/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceResponse,
  ServiceResponse$inboundSchema,
  ServiceResponse$Outbound,
  ServiceResponse$outboundSchema,
} from "./serviceresponse.js";

export type ListResponseServiceResponse = {
  /**
   * List of items returned from the query
   */
  items: Array<ServiceResponse>;
  /**
   * The page number of the results (0-based)
   */
  page: number;
  /**
   * The number of items returned per page
   */
  pageSize: number;
  /**
   * The total number of pages of results given the indicated page size
   */
  totalPages?: number | null | undefined;
  /**
   * The total number of items returned from the query
   */
  totalCount?: number | null | undefined;
};

/** @internal */
export const ListResponseServiceResponse$inboundSchema: z.ZodType<
  ListResponseServiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ServiceResponse$inboundSchema),
  page: z.number().int(),
  page_size: z.number().int(),
  total_pages: z.nullable(z.number().int()).optional(),
  total_count: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "total_pages": "totalPages",
    "total_count": "totalCount",
  });
});

/** @internal */
export type ListResponseServiceResponse$Outbound = {
  items: Array<ServiceResponse$Outbound>;
  page: number;
  page_size: number;
  total_pages?: number | null | undefined;
  total_count?: number | null | undefined;
};

/** @internal */
export const ListResponseServiceResponse$outboundSchema: z.ZodType<
  ListResponseServiceResponse$Outbound,
  z.ZodTypeDef,
  ListResponseServiceResponse
> = z.object({
  items: z.array(ServiceResponse$outboundSchema),
  page: z.number().int(),
  pageSize: z.number().int(),
  totalPages: z.nullable(z.number().int()).optional(),
  totalCount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    totalPages: "total_pages",
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResponseServiceResponse$ {
  /** @deprecated use `ListResponseServiceResponse$inboundSchema` instead. */
  export const inboundSchema = ListResponseServiceResponse$inboundSchema;
  /** @deprecated use `ListResponseServiceResponse$outboundSchema` instead. */
  export const outboundSchema = ListResponseServiceResponse$outboundSchema;
  /** @deprecated use `ListResponseServiceResponse$Outbound` instead. */
  export type Outbound = ListResponseServiceResponse$Outbound;
}

export function listResponseServiceResponseToJSON(
  listResponseServiceResponse: ListResponseServiceResponse,
): string {
  return JSON.stringify(
    ListResponseServiceResponse$outboundSchema.parse(
      listResponseServiceResponse,
    ),
  );
}

export function listResponseServiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResponseServiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResponseServiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResponseServiceResponse' from JSON`,
  );
}
