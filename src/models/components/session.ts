/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Session = {
  timestamp: Date;
  sessionId?: string | null | undefined;
  conversationId?: string | null | undefined;
  channelManagerService?: string | null | undefined;
  channelManagerType?: string | null | undefined;
  channelManagerSid?: string | null | undefined;
  source?: string | null | undefined;
  target?: string | null | undefined;
  isLegacy?: boolean | null | undefined;
  isTest?: boolean | null | undefined;
};

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    session_id: z.nullable(z.string()).optional(),
    conversation_id: z.nullable(z.string()).optional(),
    channel_manager_service: z.nullable(z.string()).optional(),
    channel_manager_type: z.nullable(z.string()).optional(),
    channel_manager_sid: z.nullable(z.string()).optional(),
    source: z.nullable(z.string()).optional(),
    target: z.nullable(z.string()).optional(),
    is_legacy: z.nullable(z.boolean()).optional(),
    is_test: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "session_id": "sessionId",
      "conversation_id": "conversationId",
      "channel_manager_service": "channelManagerService",
      "channel_manager_type": "channelManagerType",
      "channel_manager_sid": "channelManagerSid",
      "is_legacy": "isLegacy",
      "is_test": "isTest",
    });
  });

/** @internal */
export type Session$Outbound = {
  timestamp: string;
  session_id?: string | null | undefined;
  conversation_id?: string | null | undefined;
  channel_manager_service?: string | null | undefined;
  channel_manager_type?: string | null | undefined;
  channel_manager_sid?: string | null | undefined;
  source?: string | null | undefined;
  target?: string | null | undefined;
  is_legacy?: boolean | null | undefined;
  is_test?: boolean | null | undefined;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  sessionId: z.nullable(z.string()).optional(),
  conversationId: z.nullable(z.string()).optional(),
  channelManagerService: z.nullable(z.string()).optional(),
  channelManagerType: z.nullable(z.string()).optional(),
  channelManagerSid: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  target: z.nullable(z.string()).optional(),
  isLegacy: z.nullable(z.boolean()).optional(),
  isTest: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    conversationId: "conversation_id",
    channelManagerService: "channel_manager_service",
    channelManagerType: "channel_manager_type",
    channelManagerSid: "channel_manager_sid",
    isLegacy: "is_legacy",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}
