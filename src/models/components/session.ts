/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A session is a building block of a conversation.
 */
export type Session = {
  /**
   * Timestamp of the session
   */
  timestamp: Date;
  /**
   * Internal ID of the session, generated based on interaction details
   */
  sessionId?: string | null | undefined;
  /**
   * ID of the conversation of which the session is a part
   */
  conversationId?: string | null | undefined;
  /**
   * Name of the service used to facilitate the session
   */
  channelManagerService?: string | null | undefined;
  /**
   * Type of the service used to facilitate the session
   */
  channelManagerType?: string | null | undefined;
  /**
   * Channel-manager-side ID of the session (different from session_id)
   */
  channelManagerSid?: string | null | undefined;
  /**
   * ID of the agent with which the session occurred
   */
  agentId?: string | null | undefined;
  /**
   * Name of the agent with which the session occurred
   */
  agentName?: string | null | undefined;
  /**
   * Type of the agent with which the session occurred
   */
  agentType?: string | null | undefined;
  /**
   * Timezone of the agent with which the session occurred
   */
  agentTimezone?: string | null | undefined;
  /**
   * ID of the prompt used by the agent with which the session occurred
   */
  promptId?: string | null | undefined;
  /**
   * Name of the prompt used by the agent with which the session occurred
   */
  promptName?: string | null | undefined;
  /**
   * Legacy prompt version timestamp used by the agent with which the session occurred
   */
  promptVersion?: string | null | undefined;
  /**
   * Prompt version number used by the agent with which the session occurred (new system)
   */
  promptVersionNumber?: number | null | undefined;
  /**
   * Duration of the session in seconds
   */
  duration?: number | null | undefined;
  /**
   * ID of the label (listing the quality of the session and any issues that occurred) associated with the session
   */
  sessionLabelId?: string | null | undefined;
  /**
   * Source of the session (e.g., for an inbound session, the user's phone number/username/email)
   */
  source?: string | null | undefined;
  /**
   * The name of the channel target associated with the agent at the time of the session (see ChannelTargetResponse.target)
   */
  target?: string | null | undefined;
  /**
   * Whether the session occurred on the legacy Syllable system
   */
  isLegacy?: boolean | null | undefined;
  /**
   * Whether the session is a test session
   */
  isTest?: boolean | null | undefined;
};

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    session_id: z.nullable(z.string()).optional(),
    conversation_id: z.nullable(z.string()).optional(),
    channel_manager_service: z.nullable(z.string()).optional(),
    channel_manager_type: z.nullable(z.string()).optional(),
    channel_manager_sid: z.nullable(z.string()).optional(),
    agent_id: z.nullable(z.string()).optional(),
    agent_name: z.nullable(z.string()).optional(),
    agent_type: z.nullable(z.string()).optional(),
    agent_timezone: z.nullable(z.string()).optional(),
    prompt_id: z.nullable(z.string()).optional(),
    prompt_name: z.nullable(z.string()).optional(),
    prompt_version: z.nullable(z.string()).optional(),
    prompt_version_number: z.nullable(z.number().int()).optional(),
    duration: z.nullable(z.number()).optional(),
    session_label_id: z.nullable(z.string()).optional(),
    source: z.nullable(z.string()).optional(),
    target: z.nullable(z.string()).optional(),
    is_legacy: z.nullable(z.boolean()).optional(),
    is_test: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "session_id": "sessionId",
      "conversation_id": "conversationId",
      "channel_manager_service": "channelManagerService",
      "channel_manager_type": "channelManagerType",
      "channel_manager_sid": "channelManagerSid",
      "agent_id": "agentId",
      "agent_name": "agentName",
      "agent_type": "agentType",
      "agent_timezone": "agentTimezone",
      "prompt_id": "promptId",
      "prompt_name": "promptName",
      "prompt_version": "promptVersion",
      "prompt_version_number": "promptVersionNumber",
      "session_label_id": "sessionLabelId",
      "is_legacy": "isLegacy",
      "is_test": "isTest",
    });
  });

/** @internal */
export type Session$Outbound = {
  timestamp: string;
  session_id?: string | null | undefined;
  conversation_id?: string | null | undefined;
  channel_manager_service?: string | null | undefined;
  channel_manager_type?: string | null | undefined;
  channel_manager_sid?: string | null | undefined;
  agent_id?: string | null | undefined;
  agent_name?: string | null | undefined;
  agent_type?: string | null | undefined;
  agent_timezone?: string | null | undefined;
  prompt_id?: string | null | undefined;
  prompt_name?: string | null | undefined;
  prompt_version?: string | null | undefined;
  prompt_version_number?: number | null | undefined;
  duration?: number | null | undefined;
  session_label_id?: string | null | undefined;
  source?: string | null | undefined;
  target?: string | null | undefined;
  is_legacy?: boolean | null | undefined;
  is_test?: boolean | null | undefined;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  sessionId: z.nullable(z.string()).optional(),
  conversationId: z.nullable(z.string()).optional(),
  channelManagerService: z.nullable(z.string()).optional(),
  channelManagerType: z.nullable(z.string()).optional(),
  channelManagerSid: z.nullable(z.string()).optional(),
  agentId: z.nullable(z.string()).optional(),
  agentName: z.nullable(z.string()).optional(),
  agentType: z.nullable(z.string()).optional(),
  agentTimezone: z.nullable(z.string()).optional(),
  promptId: z.nullable(z.string()).optional(),
  promptName: z.nullable(z.string()).optional(),
  promptVersion: z.nullable(z.string()).optional(),
  promptVersionNumber: z.nullable(z.number().int()).optional(),
  duration: z.nullable(z.number()).optional(),
  sessionLabelId: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  target: z.nullable(z.string()).optional(),
  isLegacy: z.nullable(z.boolean()).optional(),
  isTest: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    conversationId: "conversation_id",
    channelManagerService: "channel_manager_service",
    channelManagerType: "channel_manager_type",
    channelManagerSid: "channel_manager_sid",
    agentId: "agent_id",
    agentName: "agent_name",
    agentType: "agent_type",
    agentTimezone: "agent_timezone",
    promptId: "prompt_id",
    promptName: "prompt_name",
    promptVersion: "prompt_version",
    promptVersionNumber: "prompt_version_number",
    sessionLabelId: "session_label_id",
    isLegacy: "is_legacy",
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}
