/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameters for Insight Tool Definition
 */
export type ToolParameters = {};

/**
 * Result key/types for Insight Tool Definition
 */
export type ToolResultSet = {};

export type InsightToolDefinition = {
  /**
   * Unique ID for Insight Tool Definition
   */
  id: number;
  /**
   * Human readable name of Insight Tool Definition
   */
  name: string;
  /**
   * Type of Insight Tool Definition
   */
  type: string;
  /**
   * Text description of Insight Tool Definition
   */
  description: string;
  /**
   * Parameters for Insight Tool Definition
   */
  toolParameters: ToolParameters;
  /**
   * Result key/types for Insight Tool Definition
   */
  toolResultSet: ToolResultSet;
};

/** @internal */
export const ToolParameters$inboundSchema: z.ZodType<
  ToolParameters,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolParameters$Outbound = {};

/** @internal */
export const ToolParameters$outboundSchema: z.ZodType<
  ToolParameters$Outbound,
  z.ZodTypeDef,
  ToolParameters
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolParameters$ {
  /** @deprecated use `ToolParameters$inboundSchema` instead. */
  export const inboundSchema = ToolParameters$inboundSchema;
  /** @deprecated use `ToolParameters$outboundSchema` instead. */
  export const outboundSchema = ToolParameters$outboundSchema;
  /** @deprecated use `ToolParameters$Outbound` instead. */
  export type Outbound = ToolParameters$Outbound;
}

export function toolParametersToJSON(toolParameters: ToolParameters): string {
  return JSON.stringify(ToolParameters$outboundSchema.parse(toolParameters));
}

export function toolParametersFromJSON(
  jsonString: string,
): SafeParseResult<ToolParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolParameters' from JSON`,
  );
}

/** @internal */
export const ToolResultSet$inboundSchema: z.ZodType<
  ToolResultSet,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolResultSet$Outbound = {};

/** @internal */
export const ToolResultSet$outboundSchema: z.ZodType<
  ToolResultSet$Outbound,
  z.ZodTypeDef,
  ToolResultSet
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResultSet$ {
  /** @deprecated use `ToolResultSet$inboundSchema` instead. */
  export const inboundSchema = ToolResultSet$inboundSchema;
  /** @deprecated use `ToolResultSet$outboundSchema` instead. */
  export const outboundSchema = ToolResultSet$outboundSchema;
  /** @deprecated use `ToolResultSet$Outbound` instead. */
  export type Outbound = ToolResultSet$Outbound;
}

export function toolResultSetToJSON(toolResultSet: ToolResultSet): string {
  return JSON.stringify(ToolResultSet$outboundSchema.parse(toolResultSet));
}

export function toolResultSetFromJSON(
  jsonString: string,
): SafeParseResult<ToolResultSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResultSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResultSet' from JSON`,
  );
}

/** @internal */
export const InsightToolDefinition$inboundSchema: z.ZodType<
  InsightToolDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  name: z.string(),
  type: z.string(),
  description: z.string(),
  tool_parameters: z.lazy(() => ToolParameters$inboundSchema),
  tool_result_set: z.lazy(() => ToolResultSet$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "tool_parameters": "toolParameters",
    "tool_result_set": "toolResultSet",
  });
});

/** @internal */
export type InsightToolDefinition$Outbound = {
  id: number;
  name: string;
  type: string;
  description: string;
  tool_parameters: ToolParameters$Outbound;
  tool_result_set: ToolResultSet$Outbound;
};

/** @internal */
export const InsightToolDefinition$outboundSchema: z.ZodType<
  InsightToolDefinition$Outbound,
  z.ZodTypeDef,
  InsightToolDefinition
> = z.object({
  id: z.number().int(),
  name: z.string(),
  type: z.string(),
  description: z.string(),
  toolParameters: z.lazy(() => ToolParameters$outboundSchema),
  toolResultSet: z.lazy(() => ToolResultSet$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    toolParameters: "tool_parameters",
    toolResultSet: "tool_result_set",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightToolDefinition$ {
  /** @deprecated use `InsightToolDefinition$inboundSchema` instead. */
  export const inboundSchema = InsightToolDefinition$inboundSchema;
  /** @deprecated use `InsightToolDefinition$outboundSchema` instead. */
  export const outboundSchema = InsightToolDefinition$outboundSchema;
  /** @deprecated use `InsightToolDefinition$Outbound` instead. */
  export type Outbound = InsightToolDefinition$Outbound;
}

export function insightToolDefinitionToJSON(
  insightToolDefinition: InsightToolDefinition,
): string {
  return JSON.stringify(
    InsightToolDefinition$outboundSchema.parse(insightToolDefinition),
  );
}

export function insightToolDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<InsightToolDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightToolDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightToolDefinition' from JSON`,
  );
}
