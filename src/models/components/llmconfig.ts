/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Provider of the LLM model.
 */
export const Provider = {
  AzureOpenai: "azure_openai",
  Openai: "openai",
} as const;
/**
 * Provider of the LLM model.
 */
export type Provider = ClosedEnum<typeof Provider>;

export type LlmConfig = {
  /**
   * Provider of the LLM model.
   */
  provider?: Provider | undefined;
  /**
   * Name of the model. Must match the deployment name in Azure AI Studio.
   */
  model?: string | undefined;
  /**
   * Optional model version.
   */
  version?: string | null | undefined;
  /**
   * Version of the API. (Currently only used for Azure OpenAI.)
   */
  apiVersion?: string | null | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const LlmConfig$inboundSchema: z.ZodType<
  LlmConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: Provider$inboundSchema.default("azure_openai"),
  model: z.string().default("gpt-4o"),
  version: z.nullable(z.string()).optional(),
  api_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "api_version": "apiVersion",
  });
});

/** @internal */
export type LlmConfig$Outbound = {
  provider: string;
  model: string;
  version?: string | null | undefined;
  api_version?: string | null | undefined;
};

/** @internal */
export const LlmConfig$outboundSchema: z.ZodType<
  LlmConfig$Outbound,
  z.ZodTypeDef,
  LlmConfig
> = z.object({
  provider: Provider$outboundSchema.default("azure_openai"),
  model: z.string().default("gpt-4o"),
  version: z.nullable(z.string()).optional(),
  apiVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    apiVersion: "api_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LlmConfig$ {
  /** @deprecated use `LlmConfig$inboundSchema` instead. */
  export const inboundSchema = LlmConfig$inboundSchema;
  /** @deprecated use `LlmConfig$outboundSchema` instead. */
  export const outboundSchema = LlmConfig$outboundSchema;
  /** @deprecated use `LlmConfig$Outbound` instead. */
  export type Outbound = LlmConfig$Outbound;
}

export function llmConfigToJSON(llmConfig: LlmConfig): string {
  return JSON.stringify(LlmConfig$outboundSchema.parse(llmConfig));
}

export function llmConfigFromJSON(
  jsonString: string,
): SafeParseResult<LlmConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LlmConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LlmConfig' from JSON`,
  );
}
