/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Variables for campaign
 */
export type CampaignVariables = {};

export type OutboundCampaign = {
  /**
   * Human readable name of campaign
   */
  campaignName: string;
  /**
   * Description of campaign
   */
  description?: string | null | undefined;
  /**
   * Label for campaign
   */
  label?: string | null | undefined;
  /**
   * Variables for campaign
   */
  campaignVariables: CampaignVariables;
  /**
   * Start time of campaign each day
   */
  dailyStartTime: string;
  /**
   * End time of campaign each day
   */
  dailyEndTime: string;
  /**
   * Timezone of campaign
   */
  timezone: string;
  /**
   * Source phone number, email, or SMS number
   */
  source?: string | null | undefined;
  /**
   * Caller ID for call
   */
  callerId: string | null;
  /**
   * Target number of outreach calls per minute
   */
  rate?: number | undefined;
  /**
   * Number of retries per target
   */
  retryCount?: number | undefined;
  /**
   * How long to wait before retrying
   */
  retryInterval?: string | null | undefined;
  /**
   * How many seconds to pause between queueing calls. Useful when rate should be less than 1 per minute
   */
  pauseSeconds?: number | null | undefined;
  /**
   * Unique ID for campaign
   */
  id: number;
  /**
   * Timestamp of campaign creation
   */
  createdAt?: string | undefined;
  /**
   * Timestamp of campaign update
   */
  updatedAt?: string | undefined;
  /**
   * Email of user who last updated campaign
   */
  lastUpdatedBy: string;
};

/** @internal */
export const CampaignVariables$inboundSchema: z.ZodType<
  CampaignVariables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CampaignVariables$Outbound = {};

/** @internal */
export const CampaignVariables$outboundSchema: z.ZodType<
  CampaignVariables$Outbound,
  z.ZodTypeDef,
  CampaignVariables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CampaignVariables$ {
  /** @deprecated use `CampaignVariables$inboundSchema` instead. */
  export const inboundSchema = CampaignVariables$inboundSchema;
  /** @deprecated use `CampaignVariables$outboundSchema` instead. */
  export const outboundSchema = CampaignVariables$outboundSchema;
  /** @deprecated use `CampaignVariables$Outbound` instead. */
  export type Outbound = CampaignVariables$Outbound;
}

export function campaignVariablesToJSON(
  campaignVariables: CampaignVariables,
): string {
  return JSON.stringify(
    CampaignVariables$outboundSchema.parse(campaignVariables),
  );
}

export function campaignVariablesFromJSON(
  jsonString: string,
): SafeParseResult<CampaignVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CampaignVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CampaignVariables' from JSON`,
  );
}

/** @internal */
export const OutboundCampaign$inboundSchema: z.ZodType<
  OutboundCampaign,
  z.ZodTypeDef,
  unknown
> = z.object({
  campaign_name: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  campaign_variables: z.lazy(() => CampaignVariables$inboundSchema),
  daily_start_time: z.string(),
  daily_end_time: z.string(),
  timezone: z.string(),
  source: z.nullable(z.string()).optional(),
  caller_id: z.nullable(z.string()),
  rate: z.number().int().default(1),
  retry_count: z.number().int().default(0),
  retry_interval: z.nullable(z.string()).optional(),
  pause_seconds: z.nullable(z.number().int()).optional(),
  id: z.number().int(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  last_updated_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "campaign_name": "campaignName",
    "campaign_variables": "campaignVariables",
    "daily_start_time": "dailyStartTime",
    "daily_end_time": "dailyEndTime",
    "caller_id": "callerId",
    "retry_count": "retryCount",
    "retry_interval": "retryInterval",
    "pause_seconds": "pauseSeconds",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type OutboundCampaign$Outbound = {
  campaign_name: string;
  description?: string | null | undefined;
  label?: string | null | undefined;
  campaign_variables: CampaignVariables$Outbound;
  daily_start_time: string;
  daily_end_time: string;
  timezone: string;
  source?: string | null | undefined;
  caller_id: string | null;
  rate: number;
  retry_count: number;
  retry_interval?: string | null | undefined;
  pause_seconds?: number | null | undefined;
  id: number;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_updated_by: string;
};

/** @internal */
export const OutboundCampaign$outboundSchema: z.ZodType<
  OutboundCampaign$Outbound,
  z.ZodTypeDef,
  OutboundCampaign
> = z.object({
  campaignName: z.string(),
  description: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  campaignVariables: z.lazy(() => CampaignVariables$outboundSchema),
  dailyStartTime: z.string(),
  dailyEndTime: z.string(),
  timezone: z.string(),
  source: z.nullable(z.string()).optional(),
  callerId: z.nullable(z.string()),
  rate: z.number().int().default(1),
  retryCount: z.number().int().default(0),
  retryInterval: z.nullable(z.string()).optional(),
  pauseSeconds: z.nullable(z.number().int()).optional(),
  id: z.number().int(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  lastUpdatedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    campaignName: "campaign_name",
    campaignVariables: "campaign_variables",
    dailyStartTime: "daily_start_time",
    dailyEndTime: "daily_end_time",
    callerId: "caller_id",
    retryCount: "retry_count",
    retryInterval: "retry_interval",
    pauseSeconds: "pause_seconds",
    createdAt: "created_at",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutboundCampaign$ {
  /** @deprecated use `OutboundCampaign$inboundSchema` instead. */
  export const inboundSchema = OutboundCampaign$inboundSchema;
  /** @deprecated use `OutboundCampaign$outboundSchema` instead. */
  export const outboundSchema = OutboundCampaign$outboundSchema;
  /** @deprecated use `OutboundCampaign$Outbound` instead. */
  export type Outbound = OutboundCampaign$Outbound;
}

export function outboundCampaignToJSON(
  outboundCampaign: OutboundCampaign,
): string {
  return JSON.stringify(
    OutboundCampaign$outboundSchema.parse(outboundCampaign),
  );
}

export function outboundCampaignFromJSON(
  jsonString: string,
): SafeParseResult<OutboundCampaign, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutboundCampaign$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutboundCampaign' from JSON`,
  );
}
