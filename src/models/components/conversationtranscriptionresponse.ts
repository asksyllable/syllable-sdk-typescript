/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ConversationAction,
  ConversationAction$inboundSchema,
  ConversationAction$Outbound,
  ConversationAction$outboundSchema,
} from "./conversationaction.js";
import {
  ConversationText,
  ConversationText$inboundSchema,
  ConversationText$Outbound,
  ConversationText$outboundSchema,
} from "./conversationtext.js";

export type ConversationTranscriptionResponse = {
  conversationId: string;
  transcription: Array<ConversationText>;
  actions: Array<ConversationAction>;
};

/** @internal */
export const ConversationTranscriptionResponse$inboundSchema: z.ZodType<
  ConversationTranscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversation_id: z.string(),
  transcription: z.array(ConversationText$inboundSchema),
  actions: z.array(ConversationAction$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type ConversationTranscriptionResponse$Outbound = {
  conversation_id: string;
  transcription: Array<ConversationText$Outbound>;
  actions: Array<ConversationAction$Outbound>;
};

/** @internal */
export const ConversationTranscriptionResponse$outboundSchema: z.ZodType<
  ConversationTranscriptionResponse$Outbound,
  z.ZodTypeDef,
  ConversationTranscriptionResponse
> = z.object({
  conversationId: z.string(),
  transcription: z.array(ConversationText$outboundSchema),
  actions: z.array(ConversationAction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationTranscriptionResponse$ {
  /** @deprecated use `ConversationTranscriptionResponse$inboundSchema` instead. */
  export const inboundSchema = ConversationTranscriptionResponse$inboundSchema;
  /** @deprecated use `ConversationTranscriptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ConversationTranscriptionResponse$outboundSchema;
  /** @deprecated use `ConversationTranscriptionResponse$Outbound` instead. */
  export type Outbound = ConversationTranscriptionResponse$Outbound;
}
