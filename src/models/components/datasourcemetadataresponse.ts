/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metadata about a data source, not including the text.
 */
export type DataSourceMetadataResponse = {
  /**
   * The data source name. Must be unique within suborg.
   */
  name: string;
  /**
   * The description of the data source.
   */
  description?: string | null | undefined;
  /**
   * Searchable labels for the data source. Can be included in agent.prompt_tool_defaults for a given tool to give the agent access to data sources with those labels when calling that tool.
   */
  labels?: Array<string> | undefined;
  /**
   * Whether the content should be split into smaller chunks. This can improve agent performance when searching a large data source but risks some relevant information being left off search results if chunk_delimiter is not set up properly.
   */
  chunk: boolean;
  /**
   * String that should be treated as delimiter between intended chunks if chunk == True. This string will not be included in any chunks. If chunk == True and chunk_delimiter is None, the default chunking algorithm will be used. It is recommended that a delimiter be specified if chunking is enabled.
   */
  chunkDelimiter?: string | null | undefined;
  /**
   * The comments for the most recent edit to the data source
   */
  editComments?: string | null | undefined;
  /**
   * Timestamp of most recent update
   */
  updatedAt: Date;
  /**
   * Email of the user who last updated the data source
   */
  lastUpdatedBy: string | null;
};

/** @internal */
export const DataSourceMetadataResponse$inboundSchema: z.ZodType<
  DataSourceMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunk_delimiter: z.nullable(z.string()).optional(),
  edit_comments: z.nullable(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  last_updated_by: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "chunk_delimiter": "chunkDelimiter",
    "edit_comments": "editComments",
    "updated_at": "updatedAt",
    "last_updated_by": "lastUpdatedBy",
  });
});

/** @internal */
export type DataSourceMetadataResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  labels?: Array<string> | undefined;
  chunk: boolean;
  chunk_delimiter?: string | null | undefined;
  edit_comments?: string | null | undefined;
  updated_at: string;
  last_updated_by: string | null;
};

/** @internal */
export const DataSourceMetadataResponse$outboundSchema: z.ZodType<
  DataSourceMetadataResponse$Outbound,
  z.ZodTypeDef,
  DataSourceMetadataResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  labels: z.array(z.string()).optional(),
  chunk: z.boolean(),
  chunkDelimiter: z.nullable(z.string()).optional(),
  editComments: z.nullable(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
  lastUpdatedBy: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    chunkDelimiter: "chunk_delimiter",
    editComments: "edit_comments",
    updatedAt: "updated_at",
    lastUpdatedBy: "last_updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceMetadataResponse$ {
  /** @deprecated use `DataSourceMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = DataSourceMetadataResponse$inboundSchema;
  /** @deprecated use `DataSourceMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = DataSourceMetadataResponse$outboundSchema;
  /** @deprecated use `DataSourceMetadataResponse$Outbound` instead. */
  export type Outbound = DataSourceMetadataResponse$Outbound;
}

export function dataSourceMetadataResponseToJSON(
  dataSourceMetadataResponse: DataSourceMetadataResponse,
): string {
  return JSON.stringify(
    DataSourceMetadataResponse$outboundSchema.parse(dataSourceMetadataResponse),
  );
}

export function dataSourceMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourceMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceMetadataResponse' from JSON`,
  );
}
