/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TakeoutRequestStatus,
  TakeoutRequestStatus$inboundSchema,
  TakeoutRequestStatus$outboundSchema,
} from "./takeoutrequeststatus.js";

export type TakeoutStatusResponse = {
  jobId: string;
  /**
   * Status of a takeout request.
   */
  status: TakeoutRequestStatus;
  updatedAt: Date;
  fileNames?: Array<string> | null | undefined;
};

/** @internal */
export const TakeoutStatusResponse$inboundSchema: z.ZodType<
  TakeoutStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  status: TakeoutRequestStatus$inboundSchema,
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  file_names: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "updated_at": "updatedAt",
    "file_names": "fileNames",
  });
});

/** @internal */
export type TakeoutStatusResponse$Outbound = {
  job_id: string;
  status: string;
  updated_at: string;
  file_names?: Array<string> | null | undefined;
};

/** @internal */
export const TakeoutStatusResponse$outboundSchema: z.ZodType<
  TakeoutStatusResponse$Outbound,
  z.ZodTypeDef,
  TakeoutStatusResponse
> = z.object({
  jobId: z.string(),
  status: TakeoutRequestStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
  fileNames: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    updatedAt: "updated_at",
    fileNames: "file_names",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TakeoutStatusResponse$ {
  /** @deprecated use `TakeoutStatusResponse$inboundSchema` instead. */
  export const inboundSchema = TakeoutStatusResponse$inboundSchema;
  /** @deprecated use `TakeoutStatusResponse$outboundSchema` instead. */
  export const outboundSchema = TakeoutStatusResponse$outboundSchema;
  /** @deprecated use `TakeoutStatusResponse$Outbound` instead. */
  export type Outbound = TakeoutStatusResponse$Outbound;
}

export function takeoutStatusResponseToJSON(
  takeoutStatusResponse: TakeoutStatusResponse,
): string {
  return JSON.stringify(
    TakeoutStatusResponse$outboundSchema.parse(takeoutStatusResponse),
  );
}

export function takeoutStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<TakeoutStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TakeoutStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TakeoutStatusResponse' from JSON`,
  );
}
