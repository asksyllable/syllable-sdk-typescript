/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Placeholder response returned after accepting a pronunciations CSV upload.
 */
export type PronunciationsCsvUploadResponse = {
  revision: number;
  hash: string;
  entries: number;
  uploadedAt?: Date | undefined;
  uploadedBy: string;
};

/** @internal */
export const PronunciationsCsvUploadResponse$inboundSchema: z.ZodType<
  PronunciationsCsvUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  revision: z.number().int(),
  hash: z.string(),
  entries: z.number().int(),
  uploaded_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  uploaded_by: z.string(),
}).transform((v) => {
  return remap$(v, {
    "uploaded_at": "uploadedAt",
    "uploaded_by": "uploadedBy",
  });
});

/** @internal */
export type PronunciationsCsvUploadResponse$Outbound = {
  revision: number;
  hash: string;
  entries: number;
  uploaded_at?: string | undefined;
  uploaded_by: string;
};

/** @internal */
export const PronunciationsCsvUploadResponse$outboundSchema: z.ZodType<
  PronunciationsCsvUploadResponse$Outbound,
  z.ZodTypeDef,
  PronunciationsCsvUploadResponse
> = z.object({
  revision: z.number().int(),
  hash: z.string(),
  entries: z.number().int(),
  uploadedAt: z.date().transform(v => v.toISOString()).optional(),
  uploadedBy: z.string(),
}).transform((v) => {
  return remap$(v, {
    uploadedAt: "uploaded_at",
    uploadedBy: "uploaded_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PronunciationsCsvUploadResponse$ {
  /** @deprecated use `PronunciationsCsvUploadResponse$inboundSchema` instead. */
  export const inboundSchema = PronunciationsCsvUploadResponse$inboundSchema;
  /** @deprecated use `PronunciationsCsvUploadResponse$outboundSchema` instead. */
  export const outboundSchema = PronunciationsCsvUploadResponse$outboundSchema;
  /** @deprecated use `PronunciationsCsvUploadResponse$Outbound` instead. */
  export type Outbound = PronunciationsCsvUploadResponse$Outbound;
}

export function pronunciationsCsvUploadResponseToJSON(
  pronunciationsCsvUploadResponse: PronunciationsCsvUploadResponse,
): string {
  return JSON.stringify(
    PronunciationsCsvUploadResponse$outboundSchema.parse(
      pronunciationsCsvUploadResponse,
    ),
  );
}

export function pronunciationsCsvUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<PronunciationsCsvUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PronunciationsCsvUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PronunciationsCsvUploadResponse' from JSON`,
  );
}
