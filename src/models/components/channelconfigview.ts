/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TelephonyConfigurations,
  TelephonyConfigurations$inboundSchema,
  TelephonyConfigurations$Outbound,
  TelephonyConfigurations$outboundSchema,
} from "./telephonyconfigurations.js";

export type ChannelConfigView = {
  /**
   * Telephony configurations to be applied to targets belonging to the channel.       Only applies to voice supported channels.
   */
  telephony?: TelephonyConfigurations | null | undefined;
};

/** @internal */
export const ChannelConfigView$inboundSchema: z.ZodType<
  ChannelConfigView,
  z.ZodTypeDef,
  unknown
> = z.object({
  telephony: z.nullable(TelephonyConfigurations$inboundSchema).optional(),
});

/** @internal */
export type ChannelConfigView$Outbound = {
  telephony?: TelephonyConfigurations$Outbound | null | undefined;
};

/** @internal */
export const ChannelConfigView$outboundSchema: z.ZodType<
  ChannelConfigView$Outbound,
  z.ZodTypeDef,
  ChannelConfigView
> = z.object({
  telephony: z.nullable(TelephonyConfigurations$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelConfigView$ {
  /** @deprecated use `ChannelConfigView$inboundSchema` instead. */
  export const inboundSchema = ChannelConfigView$inboundSchema;
  /** @deprecated use `ChannelConfigView$outboundSchema` instead. */
  export const outboundSchema = ChannelConfigView$outboundSchema;
  /** @deprecated use `ChannelConfigView$Outbound` instead. */
  export type Outbound = ChannelConfigView$Outbound;
}

export function channelConfigViewToJSON(
  channelConfigView: ChannelConfigView,
): string {
  return JSON.stringify(
    ChannelConfigView$outboundSchema.parse(channelConfigView),
  );
}

export function channelConfigViewFromJSON(
  jsonString: string,
): SafeParseResult<ChannelConfigView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelConfigView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelConfigView' from JSON`,
  );
}
