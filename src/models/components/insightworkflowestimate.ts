/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for an insight workflow.
 */
export type InsightWorkflowEstimate = {
  /**
   * Number of extant calls that will be processed by the workflow
   */
  backfillCount: number;
  /**
   * Estimated duration of the calls that will be processed by the workflow
   */
  backfillDuration: number;
  /**
   * Estimated number of calls that will be processed by the workflow daily
   */
  estimatedDailyCount: number;
  /**
   * Estimated duration of the calls that will be processed by the workflow daily
   */
  estimatedDailyDuration: number;
  /**
   * Estimated cost of the calls that will be processed by the workflow daily
   */
  estimatedDailyCost: number;
  /**
   * Estimated cost of the backfill of the calls that will be processed by the workflow
   */
  estimatedBackfillCost: number;
};

/** @internal */
export const InsightWorkflowEstimate$inboundSchema: z.ZodType<
  InsightWorkflowEstimate,
  z.ZodTypeDef,
  unknown
> = z.object({
  backfill_count: z.number().int(),
  backfill_duration: z.number(),
  estimated_daily_count: z.number().int(),
  estimated_daily_duration: z.number(),
  estimated_daily_cost: z.number(),
  estimated_backfill_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "backfill_count": "backfillCount",
    "backfill_duration": "backfillDuration",
    "estimated_daily_count": "estimatedDailyCount",
    "estimated_daily_duration": "estimatedDailyDuration",
    "estimated_daily_cost": "estimatedDailyCost",
    "estimated_backfill_cost": "estimatedBackfillCost",
  });
});

/** @internal */
export type InsightWorkflowEstimate$Outbound = {
  backfill_count: number;
  backfill_duration: number;
  estimated_daily_count: number;
  estimated_daily_duration: number;
  estimated_daily_cost: number;
  estimated_backfill_cost: number;
};

/** @internal */
export const InsightWorkflowEstimate$outboundSchema: z.ZodType<
  InsightWorkflowEstimate$Outbound,
  z.ZodTypeDef,
  InsightWorkflowEstimate
> = z.object({
  backfillCount: z.number().int(),
  backfillDuration: z.number(),
  estimatedDailyCount: z.number().int(),
  estimatedDailyDuration: z.number(),
  estimatedDailyCost: z.number(),
  estimatedBackfillCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    backfillCount: "backfill_count",
    backfillDuration: "backfill_duration",
    estimatedDailyCount: "estimated_daily_count",
    estimatedDailyDuration: "estimated_daily_duration",
    estimatedDailyCost: "estimated_daily_cost",
    estimatedBackfillCost: "estimated_backfill_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightWorkflowEstimate$ {
  /** @deprecated use `InsightWorkflowEstimate$inboundSchema` instead. */
  export const inboundSchema = InsightWorkflowEstimate$inboundSchema;
  /** @deprecated use `InsightWorkflowEstimate$outboundSchema` instead. */
  export const outboundSchema = InsightWorkflowEstimate$outboundSchema;
  /** @deprecated use `InsightWorkflowEstimate$Outbound` instead. */
  export type Outbound = InsightWorkflowEstimate$Outbound;
}

export function insightWorkflowEstimateToJSON(
  insightWorkflowEstimate: InsightWorkflowEstimate,
): string {
  return JSON.stringify(
    InsightWorkflowEstimate$outboundSchema.parse(insightWorkflowEstimate),
  );
}

export function insightWorkflowEstimateFromJSON(
  jsonString: string,
): SafeParseResult<InsightWorkflowEstimate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightWorkflowEstimate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightWorkflowEstimate' from JSON`,
  );
}
