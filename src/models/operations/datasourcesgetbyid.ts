/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourcesGetByIdRequest = {
  dataSourceId: number;
};

/** @internal */
export const DataSourcesGetByIdRequest$inboundSchema: z.ZodType<
  DataSourcesGetByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data_source_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "data_source_id": "dataSourceId",
  });
});

/** @internal */
export type DataSourcesGetByIdRequest$Outbound = {
  data_source_id: number;
};

/** @internal */
export const DataSourcesGetByIdRequest$outboundSchema: z.ZodType<
  DataSourcesGetByIdRequest$Outbound,
  z.ZodTypeDef,
  DataSourcesGetByIdRequest
> = z.object({
  dataSourceId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    dataSourceId: "data_source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourcesGetByIdRequest$ {
  /** @deprecated use `DataSourcesGetByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DataSourcesGetByIdRequest$inboundSchema;
  /** @deprecated use `DataSourcesGetByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DataSourcesGetByIdRequest$outboundSchema;
  /** @deprecated use `DataSourcesGetByIdRequest$Outbound` instead. */
  export type Outbound = DataSourcesGetByIdRequest$Outbound;
}

export function dataSourcesGetByIdRequestToJSON(
  dataSourcesGetByIdRequest: DataSourcesGetByIdRequest,
): string {
  return JSON.stringify(
    DataSourcesGetByIdRequest$outboundSchema.parse(dataSourcesGetByIdRequest),
  );
}

export function dataSourcesGetByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DataSourcesGetByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourcesGetByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourcesGetByIdRequest' from JSON`,
  );
}
