/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SessionsListRequest = {
  page?: number | undefined;
  limit?: number | undefined;
  orderBy?: string | null | undefined;
  channelType?: string | null | undefined;
  channelService?: string | null | undefined;
  startTime?: Date | null | undefined;
  endTime?: Date | null | undefined;
  includeLegacy?: boolean | undefined;
  includeTest?: boolean | undefined;
};

/** @internal */
export const SessionsListRequest$inboundSchema: z.ZodType<
  SessionsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(0),
  limit: z.number().int().default(100),
  order_by: z.nullable(z.string()).optional(),
  channel_type: z.nullable(z.string()).optional(),
  channel_service: z.nullable(z.string()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  include_legacy: z.boolean().default(false),
  include_test: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "order_by": "orderBy",
    "channel_type": "channelType",
    "channel_service": "channelService",
    "start_time": "startTime",
    "end_time": "endTime",
    "include_legacy": "includeLegacy",
    "include_test": "includeTest",
  });
});

/** @internal */
export type SessionsListRequest$Outbound = {
  page: number;
  limit: number;
  order_by?: string | null | undefined;
  channel_type?: string | null | undefined;
  channel_service?: string | null | undefined;
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
  include_legacy: boolean;
  include_test: boolean;
};

/** @internal */
export const SessionsListRequest$outboundSchema: z.ZodType<
  SessionsListRequest$Outbound,
  z.ZodTypeDef,
  SessionsListRequest
> = z.object({
  page: z.number().int().default(0),
  limit: z.number().int().default(100),
  orderBy: z.nullable(z.string()).optional(),
  channelType: z.nullable(z.string()).optional(),
  channelService: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  includeLegacy: z.boolean().default(false),
  includeTest: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    orderBy: "order_by",
    channelType: "channel_type",
    channelService: "channel_service",
    startTime: "start_time",
    endTime: "end_time",
    includeLegacy: "include_legacy",
    includeTest: "include_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionsListRequest$ {
  /** @deprecated use `SessionsListRequest$inboundSchema` instead. */
  export const inboundSchema = SessionsListRequest$inboundSchema;
  /** @deprecated use `SessionsListRequest$outboundSchema` instead. */
  export const outboundSchema = SessionsListRequest$outboundSchema;
  /** @deprecated use `SessionsListRequest$Outbound` instead. */
  export type Outbound = SessionsListRequest$Outbound;
}
