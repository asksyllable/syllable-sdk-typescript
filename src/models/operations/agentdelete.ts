/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type AgentDeleteRequest = {
  agentId: number;
  reason: string;
};

/** @internal */
export const AgentDeleteRequest$inboundSchema: z.ZodType<
  AgentDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
  });
});

/** @internal */
export type AgentDeleteRequest$Outbound = {
  agent_id: number;
  reason: string;
};

/** @internal */
export const AgentDeleteRequest$outboundSchema: z.ZodType<
  AgentDeleteRequest$Outbound,
  z.ZodTypeDef,
  AgentDeleteRequest
> = z.object({
  agentId: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentDeleteRequest$ {
  /** @deprecated use `AgentDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = AgentDeleteRequest$inboundSchema;
  /** @deprecated use `AgentDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = AgentDeleteRequest$outboundSchema;
  /** @deprecated use `AgentDeleteRequest$Outbound` instead. */
  export type Outbound = AgentDeleteRequest$Outbound;
}
