/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsUploadMoveFilesRequest = {
  folderId: number;
  insightsFolderFileMove: components.InsightsFolderFileMove;
};

/** @internal */
export const InsightsUploadMoveFilesRequest$inboundSchema: z.ZodType<
  InsightsUploadMoveFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.number().int(),
  InsightsFolderFileMove: components.InsightsFolderFileMove$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "InsightsFolderFileMove": "insightsFolderFileMove",
  });
});

/** @internal */
export type InsightsUploadMoveFilesRequest$Outbound = {
  folder_id: number;
  InsightsFolderFileMove: components.InsightsFolderFileMove$Outbound;
};

/** @internal */
export const InsightsUploadMoveFilesRequest$outboundSchema: z.ZodType<
  InsightsUploadMoveFilesRequest$Outbound,
  z.ZodTypeDef,
  InsightsUploadMoveFilesRequest
> = z.object({
  folderId: z.number().int(),
  insightsFolderFileMove: components.InsightsFolderFileMove$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    insightsFolderFileMove: "InsightsFolderFileMove",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsUploadMoveFilesRequest$ {
  /** @deprecated use `InsightsUploadMoveFilesRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsUploadMoveFilesRequest$inboundSchema;
  /** @deprecated use `InsightsUploadMoveFilesRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsUploadMoveFilesRequest$outboundSchema;
  /** @deprecated use `InsightsUploadMoveFilesRequest$Outbound` instead. */
  export type Outbound = InsightsUploadMoveFilesRequest$Outbound;
}

export function insightsUploadMoveFilesRequestToJSON(
  insightsUploadMoveFilesRequest: InsightsUploadMoveFilesRequest,
): string {
  return JSON.stringify(
    InsightsUploadMoveFilesRequest$outboundSchema.parse(
      insightsUploadMoveFilesRequest,
    ),
  );
}

export function insightsUploadMoveFilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsUploadMoveFilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsUploadMoveFilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsUploadMoveFilesRequest' from JSON`,
  );
}
