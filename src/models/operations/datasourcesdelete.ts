/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourcesDeleteRequest = {
  dataSourceId: number;
  reason: string;
};

/** @internal */
export const DataSourcesDeleteRequest$inboundSchema: z.ZodType<
  DataSourcesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data_source_id: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "data_source_id": "dataSourceId",
  });
});

/** @internal */
export type DataSourcesDeleteRequest$Outbound = {
  data_source_id: number;
  reason: string;
};

/** @internal */
export const DataSourcesDeleteRequest$outboundSchema: z.ZodType<
  DataSourcesDeleteRequest$Outbound,
  z.ZodTypeDef,
  DataSourcesDeleteRequest
> = z.object({
  dataSourceId: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    dataSourceId: "data_source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourcesDeleteRequest$ {
  /** @deprecated use `DataSourcesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DataSourcesDeleteRequest$inboundSchema;
  /** @deprecated use `DataSourcesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DataSourcesDeleteRequest$outboundSchema;
  /** @deprecated use `DataSourcesDeleteRequest$Outbound` instead. */
  export type Outbound = DataSourcesDeleteRequest$Outbound;
}

export function dataSourcesDeleteRequestToJSON(
  dataSourcesDeleteRequest: DataSourcesDeleteRequest,
): string {
  return JSON.stringify(
    DataSourcesDeleteRequest$outboundSchema.parse(dataSourcesDeleteRequest),
  );
}

export function dataSourcesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DataSourcesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourcesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourcesDeleteRequest' from JSON`,
  );
}
