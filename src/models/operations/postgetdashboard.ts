/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostGetDashboardRequest = {
  dashboardName: string;
};

/** @internal */
export const PostGetDashboardRequest$inboundSchema: z.ZodType<
  PostGetDashboardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dashboard_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "dashboard_name": "dashboardName",
  });
});

/** @internal */
export type PostGetDashboardRequest$Outbound = {
  dashboard_name: string;
};

/** @internal */
export const PostGetDashboardRequest$outboundSchema: z.ZodType<
  PostGetDashboardRequest$Outbound,
  z.ZodTypeDef,
  PostGetDashboardRequest
> = z.object({
  dashboardName: z.string(),
}).transform((v) => {
  return remap$(v, {
    dashboardName: "dashboard_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostGetDashboardRequest$ {
  /** @deprecated use `PostGetDashboardRequest$inboundSchema` instead. */
  export const inboundSchema = PostGetDashboardRequest$inboundSchema;
  /** @deprecated use `PostGetDashboardRequest$outboundSchema` instead. */
  export const outboundSchema = PostGetDashboardRequest$outboundSchema;
  /** @deprecated use `PostGetDashboardRequest$Outbound` instead. */
  export type Outbound = PostGetDashboardRequest$Outbound;
}

export function postGetDashboardRequestToJSON(
  postGetDashboardRequest: PostGetDashboardRequest,
): string {
  return JSON.stringify(
    PostGetDashboardRequest$outboundSchema.parse(postGetDashboardRequest),
  );
}

export function postGetDashboardRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostGetDashboardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostGetDashboardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostGetDashboardRequest' from JSON`,
  );
}
