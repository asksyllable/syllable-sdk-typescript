/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsFolderUpdateRequest = {
  folderId: number;
  insightsFolderInput: components.InsightsFolderInput;
};

/** @internal */
export const InsightsFolderUpdateRequest$inboundSchema: z.ZodType<
  InsightsFolderUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.number().int(),
  InsightsFolderInput: components.InsightsFolderInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "InsightsFolderInput": "insightsFolderInput",
  });
});

/** @internal */
export type InsightsFolderUpdateRequest$Outbound = {
  folder_id: number;
  InsightsFolderInput: components.InsightsFolderInput$Outbound;
};

/** @internal */
export const InsightsFolderUpdateRequest$outboundSchema: z.ZodType<
  InsightsFolderUpdateRequest$Outbound,
  z.ZodTypeDef,
  InsightsFolderUpdateRequest
> = z.object({
  folderId: z.number().int(),
  insightsFolderInput: components.InsightsFolderInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    insightsFolderInput: "InsightsFolderInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsFolderUpdateRequest$ {
  /** @deprecated use `InsightsFolderUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsFolderUpdateRequest$inboundSchema;
  /** @deprecated use `InsightsFolderUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsFolderUpdateRequest$outboundSchema;
  /** @deprecated use `InsightsFolderUpdateRequest$Outbound` instead. */
  export type Outbound = InsightsFolderUpdateRequest$Outbound;
}

export function insightsFolderUpdateRequestToJSON(
  insightsFolderUpdateRequest: InsightsFolderUpdateRequest,
): string {
  return JSON.stringify(
    InsightsFolderUpdateRequest$outboundSchema.parse(
      insightsFolderUpdateRequest,
    ),
  );
}

export function insightsFolderUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsFolderUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsFolderUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsFolderUpdateRequest' from JSON`,
  );
}
