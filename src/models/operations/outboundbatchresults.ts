/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OutboundBatchResultsRequest = {
  batchId: string;
  referenceId?: string | null | undefined;
  status?: string | null | undefined;
  insightsStatus?: string | null | undefined;
};

/** @internal */
export const OutboundBatchResultsRequest$inboundSchema: z.ZodType<
  OutboundBatchResultsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_id: z.string(),
  reference_id: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  insights_status: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "batch_id": "batchId",
    "reference_id": "referenceId",
    "insights_status": "insightsStatus",
  });
});

/** @internal */
export type OutboundBatchResultsRequest$Outbound = {
  batch_id: string;
  reference_id?: string | null | undefined;
  status?: string | null | undefined;
  insights_status?: string | null | undefined;
};

/** @internal */
export const OutboundBatchResultsRequest$outboundSchema: z.ZodType<
  OutboundBatchResultsRequest$Outbound,
  z.ZodTypeDef,
  OutboundBatchResultsRequest
> = z.object({
  batchId: z.string(),
  referenceId: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  insightsStatus: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    batchId: "batch_id",
    referenceId: "reference_id",
    insightsStatus: "insights_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutboundBatchResultsRequest$ {
  /** @deprecated use `OutboundBatchResultsRequest$inboundSchema` instead. */
  export const inboundSchema = OutboundBatchResultsRequest$inboundSchema;
  /** @deprecated use `OutboundBatchResultsRequest$outboundSchema` instead. */
  export const outboundSchema = OutboundBatchResultsRequest$outboundSchema;
  /** @deprecated use `OutboundBatchResultsRequest$Outbound` instead. */
  export type Outbound = OutboundBatchResultsRequest$Outbound;
}

export function outboundBatchResultsRequestToJSON(
  outboundBatchResultsRequest: OutboundBatchResultsRequest,
): string {
  return JSON.stringify(
    OutboundBatchResultsRequest$outboundSchema.parse(
      outboundBatchResultsRequest,
    ),
  );
}

export function outboundBatchResultsRequestFromJSON(
  jsonString: string,
): SafeParseResult<OutboundBatchResultsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutboundBatchResultsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutboundBatchResultsRequest' from JSON`,
  );
}
