/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChannelTargetsCreateRequest = {
  channelId: number;
  channelTargetCreateRequest: components.ChannelTargetCreateRequest;
};

/** @internal */
export const ChannelTargetsCreateRequest$inboundSchema: z.ZodType<
  ChannelTargetsCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.number().int(),
  ChannelTargetCreateRequest:
    components.ChannelTargetCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "ChannelTargetCreateRequest": "channelTargetCreateRequest",
  });
});

/** @internal */
export type ChannelTargetsCreateRequest$Outbound = {
  channel_id: number;
  ChannelTargetCreateRequest: components.ChannelTargetCreateRequest$Outbound;
};

/** @internal */
export const ChannelTargetsCreateRequest$outboundSchema: z.ZodType<
  ChannelTargetsCreateRequest$Outbound,
  z.ZodTypeDef,
  ChannelTargetsCreateRequest
> = z.object({
  channelId: z.number().int(),
  channelTargetCreateRequest:
    components.ChannelTargetCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    channelTargetCreateRequest: "ChannelTargetCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelTargetsCreateRequest$ {
  /** @deprecated use `ChannelTargetsCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ChannelTargetsCreateRequest$inboundSchema;
  /** @deprecated use `ChannelTargetsCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ChannelTargetsCreateRequest$outboundSchema;
  /** @deprecated use `ChannelTargetsCreateRequest$Outbound` instead. */
  export type Outbound = ChannelTargetsCreateRequest$Outbound;
}

export function channelTargetsCreateRequestToJSON(
  channelTargetsCreateRequest: ChannelTargetsCreateRequest,
): string {
  return JSON.stringify(
    ChannelTargetsCreateRequest$outboundSchema.parse(
      channelTargetsCreateRequest,
    ),
  );
}

export function channelTargetsCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChannelTargetsCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelTargetsCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelTargetsCreateRequest' from JSON`,
  );
}
