/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ServiceListQueryParamOrderBy = {
  Id: "id",
  Name: "name",
} as const;
export type ServiceListQueryParamOrderBy = ClosedEnum<
  typeof ServiceListQueryParamOrderBy
>;

export const ServiceListQueryParamOrderByDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ServiceListQueryParamOrderByDirection = ClosedEnum<
  typeof ServiceListQueryParamOrderByDirection
>;

export type ServiceListRequest = {
  page?: number | null | undefined;
  limit?: number | undefined;
  searchFields?: Array<components.ServiceProperties> | undefined;
  searchFieldValues?: Array<string> | undefined;
  orderBy?: ServiceListQueryParamOrderBy | undefined;
  orderByDirection?: ServiceListQueryParamOrderByDirection | undefined;
  fields?: Array<components.ServiceProperties> | null | undefined;
  startDatetime?: string | null | undefined;
  endDatetime?: string | null | undefined;
};

/** @internal */
export const ServiceListQueryParamOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof ServiceListQueryParamOrderBy
> = z.nativeEnum(ServiceListQueryParamOrderBy);

/** @internal */
export const ServiceListQueryParamOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof ServiceListQueryParamOrderBy
> = ServiceListQueryParamOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceListQueryParamOrderBy$ {
  /** @deprecated use `ServiceListQueryParamOrderBy$inboundSchema` instead. */
  export const inboundSchema = ServiceListQueryParamOrderBy$inboundSchema;
  /** @deprecated use `ServiceListQueryParamOrderBy$outboundSchema` instead. */
  export const outboundSchema = ServiceListQueryParamOrderBy$outboundSchema;
}

/** @internal */
export const ServiceListQueryParamOrderByDirection$inboundSchema:
  z.ZodNativeEnum<typeof ServiceListQueryParamOrderByDirection> = z.nativeEnum(
    ServiceListQueryParamOrderByDirection,
  );

/** @internal */
export const ServiceListQueryParamOrderByDirection$outboundSchema:
  z.ZodNativeEnum<typeof ServiceListQueryParamOrderByDirection> =
    ServiceListQueryParamOrderByDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceListQueryParamOrderByDirection$ {
  /** @deprecated use `ServiceListQueryParamOrderByDirection$inboundSchema` instead. */
  export const inboundSchema =
    ServiceListQueryParamOrderByDirection$inboundSchema;
  /** @deprecated use `ServiceListQueryParamOrderByDirection$outboundSchema` instead. */
  export const outboundSchema =
    ServiceListQueryParamOrderByDirection$outboundSchema;
}

/** @internal */
export const ServiceListRequest$inboundSchema: z.ZodType<
  ServiceListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(25),
  search_fields: z.array(components.ServiceProperties$inboundSchema).optional(),
  search_field_values: z.array(z.string()).optional(),
  order_by: ServiceListQueryParamOrderBy$inboundSchema.optional(),
  order_by_direction: ServiceListQueryParamOrderByDirection$inboundSchema
    .optional(),
  fields: z.nullable(z.array(components.ServiceProperties$inboundSchema))
    .optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "search_fields": "searchFields",
    "search_field_values": "searchFieldValues",
    "order_by": "orderBy",
    "order_by_direction": "orderByDirection",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
  });
});

/** @internal */
export type ServiceListRequest$Outbound = {
  page?: number | null | undefined;
  limit: number;
  search_fields?: Array<string> | undefined;
  search_field_values?: Array<string> | undefined;
  order_by?: string | undefined;
  order_by_direction?: string | undefined;
  fields?: Array<string> | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
};

/** @internal */
export const ServiceListRequest$outboundSchema: z.ZodType<
  ServiceListRequest$Outbound,
  z.ZodTypeDef,
  ServiceListRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(25),
  searchFields: z.array(components.ServiceProperties$outboundSchema).optional(),
  searchFieldValues: z.array(z.string()).optional(),
  orderBy: ServiceListQueryParamOrderBy$outboundSchema.optional(),
  orderByDirection: ServiceListQueryParamOrderByDirection$outboundSchema
    .optional(),
  fields: z.nullable(z.array(components.ServiceProperties$outboundSchema))
    .optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    searchFields: "search_fields",
    searchFieldValues: "search_field_values",
    orderBy: "order_by",
    orderByDirection: "order_by_direction",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceListRequest$ {
  /** @deprecated use `ServiceListRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceListRequest$inboundSchema;
  /** @deprecated use `ServiceListRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceListRequest$outboundSchema;
  /** @deprecated use `ServiceListRequest$Outbound` instead. */
  export type Outbound = ServiceListRequest$Outbound;
}

export function serviceListRequestToJSON(
  serviceListRequest: ServiceListRequest,
): string {
  return JSON.stringify(
    ServiceListRequest$outboundSchema.parse(serviceListRequest),
  );
}

export function serviceListRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceListRequest' from JSON`,
  );
}
