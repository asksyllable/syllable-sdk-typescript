/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type AgentListRequest = {
  filterName?: string | null | undefined;
  filterPrompt?: string | null | undefined;
  filterGreeting?: string | null | undefined;
  page?: number | null | undefined;
  limit?: number | undefined;
};

/** @internal */
export const AgentListRequest$inboundSchema: z.ZodType<
  AgentListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter_name: z.nullable(z.string()).optional(),
  filter_prompt: z.nullable(z.string()).optional(),
  filter_greeting: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(-1),
}).transform((v) => {
  return remap$(v, {
    "filter_name": "filterName",
    "filter_prompt": "filterPrompt",
    "filter_greeting": "filterGreeting",
  });
});

/** @internal */
export type AgentListRequest$Outbound = {
  filter_name?: string | null | undefined;
  filter_prompt?: string | null | undefined;
  filter_greeting?: string | null | undefined;
  page?: number | null | undefined;
  limit: number;
};

/** @internal */
export const AgentListRequest$outboundSchema: z.ZodType<
  AgentListRequest$Outbound,
  z.ZodTypeDef,
  AgentListRequest
> = z.object({
  filterName: z.nullable(z.string()).optional(),
  filterPrompt: z.nullable(z.string()).optional(),
  filterGreeting: z.nullable(z.string()).optional(),
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(-1),
}).transform((v) => {
  return remap$(v, {
    filterName: "filter_name",
    filterPrompt: "filter_prompt",
    filterGreeting: "filter_greeting",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentListRequest$ {
  /** @deprecated use `AgentListRequest$inboundSchema` instead. */
  export const inboundSchema = AgentListRequest$inboundSchema;
  /** @deprecated use `AgentListRequest$outboundSchema` instead. */
  export const outboundSchema = AgentListRequest$outboundSchema;
  /** @deprecated use `AgentListRequest$Outbound` instead. */
  export type Outbound = AgentListRequest$Outbound;
}
