/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OutboundBatchRemoveRequest = {
  batchId: string;
  requestBody: Array<string>;
};

/** @internal */
export const OutboundBatchRemoveRequest$inboundSchema: z.ZodType<
  OutboundBatchRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_id: z.string(),
  RequestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "batch_id": "batchId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type OutboundBatchRemoveRequest$Outbound = {
  batch_id: string;
  RequestBody: Array<string>;
};

/** @internal */
export const OutboundBatchRemoveRequest$outboundSchema: z.ZodType<
  OutboundBatchRemoveRequest$Outbound,
  z.ZodTypeDef,
  OutboundBatchRemoveRequest
> = z.object({
  batchId: z.string(),
  requestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    batchId: "batch_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutboundBatchRemoveRequest$ {
  /** @deprecated use `OutboundBatchRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = OutboundBatchRemoveRequest$inboundSchema;
  /** @deprecated use `OutboundBatchRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = OutboundBatchRemoveRequest$outboundSchema;
  /** @deprecated use `OutboundBatchRemoveRequest$Outbound` instead. */
  export type Outbound = OutboundBatchRemoveRequest$Outbound;
}

export function outboundBatchRemoveRequestToJSON(
  outboundBatchRemoveRequest: OutboundBatchRemoveRequest,
): string {
  return JSON.stringify(
    OutboundBatchRemoveRequest$outboundSchema.parse(outboundBatchRemoveRequest),
  );
}

export function outboundBatchRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<OutboundBatchRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutboundBatchRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutboundBatchRemoveRequest' from JSON`,
  );
}
