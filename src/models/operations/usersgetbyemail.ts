/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersGetByEmailRequest = {
  userEmail: string;
};

/** @internal */
export const UsersGetByEmailRequest$inboundSchema: z.ZodType<
  UsersGetByEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_email: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_email": "userEmail",
  });
});

/** @internal */
export type UsersGetByEmailRequest$Outbound = {
  user_email: string;
};

/** @internal */
export const UsersGetByEmailRequest$outboundSchema: z.ZodType<
  UsersGetByEmailRequest$Outbound,
  z.ZodTypeDef,
  UsersGetByEmailRequest
> = z.object({
  userEmail: z.string(),
}).transform((v) => {
  return remap$(v, {
    userEmail: "user_email",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersGetByEmailRequest$ {
  /** @deprecated use `UsersGetByEmailRequest$inboundSchema` instead. */
  export const inboundSchema = UsersGetByEmailRequest$inboundSchema;
  /** @deprecated use `UsersGetByEmailRequest$outboundSchema` instead. */
  export const outboundSchema = UsersGetByEmailRequest$outboundSchema;
  /** @deprecated use `UsersGetByEmailRequest$Outbound` instead. */
  export type Outbound = UsersGetByEmailRequest$Outbound;
}

export function usersGetByEmailRequestToJSON(
  usersGetByEmailRequest: UsersGetByEmailRequest,
): string {
  return JSON.stringify(
    UsersGetByEmailRequest$outboundSchema.parse(usersGetByEmailRequest),
  );
}

export function usersGetByEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersGetByEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersGetByEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersGetByEmailRequest' from JSON`,
  );
}
