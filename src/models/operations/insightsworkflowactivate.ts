/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsWorkflowActivateRequest = {
  workflowId: number;
  insightWorkflowActivate: components.InsightWorkflowActivate;
};

/** @internal */
export const InsightsWorkflowActivateRequest$inboundSchema: z.ZodType<
  InsightsWorkflowActivateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_id: z.number().int(),
  InsightWorkflowActivate: components.InsightWorkflowActivate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "workflow_id": "workflowId",
    "InsightWorkflowActivate": "insightWorkflowActivate",
  });
});

/** @internal */
export type InsightsWorkflowActivateRequest$Outbound = {
  workflow_id: number;
  InsightWorkflowActivate: components.InsightWorkflowActivate$Outbound;
};

/** @internal */
export const InsightsWorkflowActivateRequest$outboundSchema: z.ZodType<
  InsightsWorkflowActivateRequest$Outbound,
  z.ZodTypeDef,
  InsightsWorkflowActivateRequest
> = z.object({
  workflowId: z.number().int(),
  insightWorkflowActivate: components.InsightWorkflowActivate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    workflowId: "workflow_id",
    insightWorkflowActivate: "InsightWorkflowActivate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsWorkflowActivateRequest$ {
  /** @deprecated use `InsightsWorkflowActivateRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsWorkflowActivateRequest$inboundSchema;
  /** @deprecated use `InsightsWorkflowActivateRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsWorkflowActivateRequest$outboundSchema;
  /** @deprecated use `InsightsWorkflowActivateRequest$Outbound` instead. */
  export type Outbound = InsightsWorkflowActivateRequest$Outbound;
}

export function insightsWorkflowActivateRequestToJSON(
  insightsWorkflowActivateRequest: InsightsWorkflowActivateRequest,
): string {
  return JSON.stringify(
    InsightsWorkflowActivateRequest$outboundSchema.parse(
      insightsWorkflowActivateRequest,
    ),
  );
}

export function insightsWorkflowActivateRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsWorkflowActivateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsWorkflowActivateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsWorkflowActivateRequest' from JSON`,
  );
}
