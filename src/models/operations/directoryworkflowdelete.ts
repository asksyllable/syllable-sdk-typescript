/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DirectoryWorkflowDeleteRequest = {
  workflowId: number;
};

/** @internal */
export const DirectoryWorkflowDeleteRequest$inboundSchema: z.ZodType<
  DirectoryWorkflowDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "workflow_id": "workflowId",
  });
});

/** @internal */
export type DirectoryWorkflowDeleteRequest$Outbound = {
  workflow_id: number;
};

/** @internal */
export const DirectoryWorkflowDeleteRequest$outboundSchema: z.ZodType<
  DirectoryWorkflowDeleteRequest$Outbound,
  z.ZodTypeDef,
  DirectoryWorkflowDeleteRequest
> = z.object({
  workflowId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    workflowId: "workflow_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryWorkflowDeleteRequest$ {
  /** @deprecated use `DirectoryWorkflowDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DirectoryWorkflowDeleteRequest$inboundSchema;
  /** @deprecated use `DirectoryWorkflowDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DirectoryWorkflowDeleteRequest$outboundSchema;
  /** @deprecated use `DirectoryWorkflowDeleteRequest$Outbound` instead. */
  export type Outbound = DirectoryWorkflowDeleteRequest$Outbound;
}

export function directoryWorkflowDeleteRequestToJSON(
  directoryWorkflowDeleteRequest: DirectoryWorkflowDeleteRequest,
): string {
  return JSON.stringify(
    DirectoryWorkflowDeleteRequest$outboundSchema.parse(
      directoryWorkflowDeleteRequest,
    ),
  );
}

export function directoryWorkflowDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryWorkflowDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryWorkflowDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryWorkflowDeleteRequest' from JSON`,
  );
}
