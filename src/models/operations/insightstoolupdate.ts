/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsToolUpdateRequest = {
  toolId: number;
  insightToolInput: components.InsightToolInput;
};

/** @internal */
export const InsightsToolUpdateRequest$inboundSchema: z.ZodType<
  InsightsToolUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_id: z.number().int(),
  InsightToolInput: components.InsightToolInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tool_id": "toolId",
    "InsightToolInput": "insightToolInput",
  });
});

/** @internal */
export type InsightsToolUpdateRequest$Outbound = {
  tool_id: number;
  InsightToolInput: components.InsightToolInput$Outbound;
};

/** @internal */
export const InsightsToolUpdateRequest$outboundSchema: z.ZodType<
  InsightsToolUpdateRequest$Outbound,
  z.ZodTypeDef,
  InsightsToolUpdateRequest
> = z.object({
  toolId: z.number().int(),
  insightToolInput: components.InsightToolInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    toolId: "tool_id",
    insightToolInput: "InsightToolInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsToolUpdateRequest$ {
  /** @deprecated use `InsightsToolUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsToolUpdateRequest$inboundSchema;
  /** @deprecated use `InsightsToolUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsToolUpdateRequest$outboundSchema;
  /** @deprecated use `InsightsToolUpdateRequest$Outbound` instead. */
  export type Outbound = InsightsToolUpdateRequest$Outbound;
}

export function insightsToolUpdateRequestToJSON(
  insightsToolUpdateRequest: InsightsToolUpdateRequest,
): string {
  return JSON.stringify(
    InsightsToolUpdateRequest$outboundSchema.parse(insightsToolUpdateRequest),
  );
}

export function insightsToolUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsToolUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsToolUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsToolUpdateRequest' from JSON`,
  );
}
