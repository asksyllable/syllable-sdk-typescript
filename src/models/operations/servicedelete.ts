/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceDeleteRequest = {
  serviceId: number;
  reason: string;
};

/** @internal */
export const ServiceDeleteRequest$inboundSchema: z.ZodType<
  ServiceDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
  });
});

/** @internal */
export type ServiceDeleteRequest$Outbound = {
  service_id: number;
  reason: string;
};

/** @internal */
export const ServiceDeleteRequest$outboundSchema: z.ZodType<
  ServiceDeleteRequest$Outbound,
  z.ZodTypeDef,
  ServiceDeleteRequest
> = z.object({
  serviceId: z.number().int(),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteRequest$ {
  /** @deprecated use `ServiceDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteRequest$inboundSchema;
  /** @deprecated use `ServiceDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceDeleteRequest$outboundSchema;
  /** @deprecated use `ServiceDeleteRequest$Outbound` instead. */
  export type Outbound = ServiceDeleteRequest$Outbound;
}

export function serviceDeleteRequestToJSON(
  serviceDeleteRequest: ServiceDeleteRequest,
): string {
  return JSON.stringify(
    ServiceDeleteRequest$outboundSchema.parse(serviceDeleteRequest),
  );
}

export function serviceDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceDeleteRequest' from JSON`,
  );
}
