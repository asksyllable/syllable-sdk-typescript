/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourcesGetByNameRequest = {
  dataSourceName: string;
};

/** @internal */
export const DataSourcesGetByNameRequest$inboundSchema: z.ZodType<
  DataSourcesGetByNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data_source_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "data_source_name": "dataSourceName",
  });
});

/** @internal */
export type DataSourcesGetByNameRequest$Outbound = {
  data_source_name: string;
};

/** @internal */
export const DataSourcesGetByNameRequest$outboundSchema: z.ZodType<
  DataSourcesGetByNameRequest$Outbound,
  z.ZodTypeDef,
  DataSourcesGetByNameRequest
> = z.object({
  dataSourceName: z.string(),
}).transform((v) => {
  return remap$(v, {
    dataSourceName: "data_source_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourcesGetByNameRequest$ {
  /** @deprecated use `DataSourcesGetByNameRequest$inboundSchema` instead. */
  export const inboundSchema = DataSourcesGetByNameRequest$inboundSchema;
  /** @deprecated use `DataSourcesGetByNameRequest$outboundSchema` instead. */
  export const outboundSchema = DataSourcesGetByNameRequest$outboundSchema;
  /** @deprecated use `DataSourcesGetByNameRequest$Outbound` instead. */
  export type Outbound = DataSourcesGetByNameRequest$Outbound;
}

export function dataSourcesGetByNameRequestToJSON(
  dataSourcesGetByNameRequest: DataSourcesGetByNameRequest,
): string {
  return JSON.stringify(
    DataSourcesGetByNameRequest$outboundSchema.parse(
      dataSourcesGetByNameRequest,
    ),
  );
}

export function dataSourcesGetByNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<DataSourcesGetByNameRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourcesGetByNameRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourcesGetByNameRequest' from JSON`,
  );
}
