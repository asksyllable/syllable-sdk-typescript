/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ToolGetByNameRequest = {
  toolName: string;
};

/** @internal */
export const ToolGetByNameRequest$inboundSchema: z.ZodType<
  ToolGetByNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_name": "toolName",
  });
});

/** @internal */
export type ToolGetByNameRequest$Outbound = {
  tool_name: string;
};

/** @internal */
export const ToolGetByNameRequest$outboundSchema: z.ZodType<
  ToolGetByNameRequest$Outbound,
  z.ZodTypeDef,
  ToolGetByNameRequest
> = z.object({
  toolName: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolName: "tool_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolGetByNameRequest$ {
  /** @deprecated use `ToolGetByNameRequest$inboundSchema` instead. */
  export const inboundSchema = ToolGetByNameRequest$inboundSchema;
  /** @deprecated use `ToolGetByNameRequest$outboundSchema` instead. */
  export const outboundSchema = ToolGetByNameRequest$outboundSchema;
  /** @deprecated use `ToolGetByNameRequest$Outbound` instead. */
  export type Outbound = ToolGetByNameRequest$Outbound;
}
