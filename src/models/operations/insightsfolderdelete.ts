/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsFolderDeleteRequest = {
  folderId: number;
};

/** @internal */
export const InsightsFolderDeleteRequest$inboundSchema: z.ZodType<
  InsightsFolderDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
  });
});

/** @internal */
export type InsightsFolderDeleteRequest$Outbound = {
  folder_id: number;
};

/** @internal */
export const InsightsFolderDeleteRequest$outboundSchema: z.ZodType<
  InsightsFolderDeleteRequest$Outbound,
  z.ZodTypeDef,
  InsightsFolderDeleteRequest
> = z.object({
  folderId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsFolderDeleteRequest$ {
  /** @deprecated use `InsightsFolderDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsFolderDeleteRequest$inboundSchema;
  /** @deprecated use `InsightsFolderDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsFolderDeleteRequest$outboundSchema;
  /** @deprecated use `InsightsFolderDeleteRequest$Outbound` instead. */
  export type Outbound = InsightsFolderDeleteRequest$Outbound;
}

export function insightsFolderDeleteRequestToJSON(
  insightsFolderDeleteRequest: InsightsFolderDeleteRequest,
): string {
  return JSON.stringify(
    InsightsFolderDeleteRequest$outboundSchema.parse(
      insightsFolderDeleteRequest,
    ),
  );
}

export function insightsFolderDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsFolderDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsFolderDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsFolderDeleteRequest' from JSON`,
  );
}
