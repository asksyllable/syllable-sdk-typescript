/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionLatencyGetByIdRequest = {
  sessionId: string;
};

/** @internal */
export const SessionLatencyGetByIdRequest$inboundSchema: z.ZodType<
  SessionLatencyGetByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type SessionLatencyGetByIdRequest$Outbound = {
  session_id: string;
};

/** @internal */
export const SessionLatencyGetByIdRequest$outboundSchema: z.ZodType<
  SessionLatencyGetByIdRequest$Outbound,
  z.ZodTypeDef,
  SessionLatencyGetByIdRequest
> = z.object({
  sessionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionLatencyGetByIdRequest$ {
  /** @deprecated use `SessionLatencyGetByIdRequest$inboundSchema` instead. */
  export const inboundSchema = SessionLatencyGetByIdRequest$inboundSchema;
  /** @deprecated use `SessionLatencyGetByIdRequest$outboundSchema` instead. */
  export const outboundSchema = SessionLatencyGetByIdRequest$outboundSchema;
  /** @deprecated use `SessionLatencyGetByIdRequest$Outbound` instead. */
  export type Outbound = SessionLatencyGetByIdRequest$Outbound;
}

export function sessionLatencyGetByIdRequestToJSON(
  sessionLatencyGetByIdRequest: SessionLatencyGetByIdRequest,
): string {
  return JSON.stringify(
    SessionLatencyGetByIdRequest$outboundSchema.parse(
      sessionLatencyGetByIdRequest,
    ),
  );
}

export function sessionLatencyGetByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<SessionLatencyGetByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionLatencyGetByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionLatencyGetByIdRequest' from JSON`,
  );
}
