/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsWorkflowUpdateRequest = {
  workflowId: number;
  insightWorkflowInput: components.InsightWorkflowInput;
};

/** @internal */
export const InsightsWorkflowUpdateRequest$inboundSchema: z.ZodType<
  InsightsWorkflowUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_id: z.number().int(),
  InsightWorkflowInput: components.InsightWorkflowInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "workflow_id": "workflowId",
    "InsightWorkflowInput": "insightWorkflowInput",
  });
});

/** @internal */
export type InsightsWorkflowUpdateRequest$Outbound = {
  workflow_id: number;
  InsightWorkflowInput: components.InsightWorkflowInput$Outbound;
};

/** @internal */
export const InsightsWorkflowUpdateRequest$outboundSchema: z.ZodType<
  InsightsWorkflowUpdateRequest$Outbound,
  z.ZodTypeDef,
  InsightsWorkflowUpdateRequest
> = z.object({
  workflowId: z.number().int(),
  insightWorkflowInput: components.InsightWorkflowInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    workflowId: "workflow_id",
    insightWorkflowInput: "InsightWorkflowInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsWorkflowUpdateRequest$ {
  /** @deprecated use `InsightsWorkflowUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsWorkflowUpdateRequest$inboundSchema;
  /** @deprecated use `InsightsWorkflowUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsWorkflowUpdateRequest$outboundSchema;
  /** @deprecated use `InsightsWorkflowUpdateRequest$Outbound` instead. */
  export type Outbound = InsightsWorkflowUpdateRequest$Outbound;
}

export function insightsWorkflowUpdateRequestToJSON(
  insightsWorkflowUpdateRequest: InsightsWorkflowUpdateRequest,
): string {
  return JSON.stringify(
    InsightsWorkflowUpdateRequest$outboundSchema.parse(
      insightsWorkflowUpdateRequest,
    ),
  );
}

export function insightsWorkflowUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsWorkflowUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsWorkflowUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsWorkflowUpdateRequest' from JSON`,
  );
}
