/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentUpdateRequest = {
  incidentId: number;
  serviceIncidentRequest: components.ServiceIncidentRequest;
};

/** @internal */
export const IncidentUpdateRequest$inboundSchema: z.ZodType<
  IncidentUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  incident_id: z.number().int(),
  ServiceIncidentRequest: components.ServiceIncidentRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "incident_id": "incidentId",
    "ServiceIncidentRequest": "serviceIncidentRequest",
  });
});

/** @internal */
export type IncidentUpdateRequest$Outbound = {
  incident_id: number;
  ServiceIncidentRequest: components.ServiceIncidentRequest$Outbound;
};

/** @internal */
export const IncidentUpdateRequest$outboundSchema: z.ZodType<
  IncidentUpdateRequest$Outbound,
  z.ZodTypeDef,
  IncidentUpdateRequest
> = z.object({
  incidentId: z.number().int(),
  serviceIncidentRequest: components.ServiceIncidentRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    incidentId: "incident_id",
    serviceIncidentRequest: "ServiceIncidentRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentUpdateRequest$ {
  /** @deprecated use `IncidentUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = IncidentUpdateRequest$inboundSchema;
  /** @deprecated use `IncidentUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = IncidentUpdateRequest$outboundSchema;
  /** @deprecated use `IncidentUpdateRequest$Outbound` instead. */
  export type Outbound = IncidentUpdateRequest$Outbound;
}

export function incidentUpdateRequestToJSON(
  incidentUpdateRequest: IncidentUpdateRequest,
): string {
  return JSON.stringify(
    IncidentUpdateRequest$outboundSchema.parse(incidentUpdateRequest),
  );
}

export function incidentUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<IncidentUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentUpdateRequest' from JSON`,
  );
}
