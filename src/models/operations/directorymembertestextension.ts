/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DirectoryMemberTestExtensionRequest = {
  memberId: number;
  /**
   * Timestamp for test
   */
  timestamp: Date;
  /**
   * Optional language code for test
   */
  languageCode?: components.LanguageCode | null | undefined;
};

/** @internal */
export const DirectoryMemberTestExtensionRequest$inboundSchema: z.ZodType<
  DirectoryMemberTestExtensionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  member_id: z.number().int(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  language_code: z.nullable(components.LanguageCode$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "member_id": "memberId",
    "language_code": "languageCode",
  });
});

/** @internal */
export type DirectoryMemberTestExtensionRequest$Outbound = {
  member_id: number;
  timestamp: string;
  language_code?: string | null | undefined;
};

/** @internal */
export const DirectoryMemberTestExtensionRequest$outboundSchema: z.ZodType<
  DirectoryMemberTestExtensionRequest$Outbound,
  z.ZodTypeDef,
  DirectoryMemberTestExtensionRequest
> = z.object({
  memberId: z.number().int(),
  timestamp: z.date().transform(v => v.toISOString()),
  languageCode: z.nullable(components.LanguageCode$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    memberId: "member_id",
    languageCode: "language_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryMemberTestExtensionRequest$ {
  /** @deprecated use `DirectoryMemberTestExtensionRequest$inboundSchema` instead. */
  export const inboundSchema =
    DirectoryMemberTestExtensionRequest$inboundSchema;
  /** @deprecated use `DirectoryMemberTestExtensionRequest$outboundSchema` instead. */
  export const outboundSchema =
    DirectoryMemberTestExtensionRequest$outboundSchema;
  /** @deprecated use `DirectoryMemberTestExtensionRequest$Outbound` instead. */
  export type Outbound = DirectoryMemberTestExtensionRequest$Outbound;
}

export function directoryMemberTestExtensionRequestToJSON(
  directoryMemberTestExtensionRequest: DirectoryMemberTestExtensionRequest,
): string {
  return JSON.stringify(
    DirectoryMemberTestExtensionRequest$outboundSchema.parse(
      directoryMemberTestExtensionRequest,
    ),
  );
}

export function directoryMemberTestExtensionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryMemberTestExtensionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DirectoryMemberTestExtensionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryMemberTestExtensionRequest' from JSON`,
  );
}
