/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionSummaryGetByIdRequest = {
  sessionId: string;
};

/** @internal */
export const SessionSummaryGetByIdRequest$inboundSchema: z.ZodType<
  SessionSummaryGetByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
  });
});

/** @internal */
export type SessionSummaryGetByIdRequest$Outbound = {
  session_id: string;
};

/** @internal */
export const SessionSummaryGetByIdRequest$outboundSchema: z.ZodType<
  SessionSummaryGetByIdRequest$Outbound,
  z.ZodTypeDef,
  SessionSummaryGetByIdRequest
> = z.object({
  sessionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionSummaryGetByIdRequest$ {
  /** @deprecated use `SessionSummaryGetByIdRequest$inboundSchema` instead. */
  export const inboundSchema = SessionSummaryGetByIdRequest$inboundSchema;
  /** @deprecated use `SessionSummaryGetByIdRequest$outboundSchema` instead. */
  export const outboundSchema = SessionSummaryGetByIdRequest$outboundSchema;
  /** @deprecated use `SessionSummaryGetByIdRequest$Outbound` instead. */
  export type Outbound = SessionSummaryGetByIdRequest$Outbound;
}

export function sessionSummaryGetByIdRequestToJSON(
  sessionSummaryGetByIdRequest: SessionSummaryGetByIdRequest,
): string {
  return JSON.stringify(
    SessionSummaryGetByIdRequest$outboundSchema.parse(
      sessionSummaryGetByIdRequest,
    ),
  );
}

export function sessionSummaryGetByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<SessionSummaryGetByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionSummaryGetByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionSummaryGetByIdRequest' from JSON`,
  );
}
