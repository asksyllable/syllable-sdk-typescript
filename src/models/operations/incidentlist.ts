/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncidentListRequest = {
  /**
   * The page number from which to start (0-based)
   */
  page?: number | null | undefined;
  /**
   * The maximum number of items to return
   */
  limit?: number | undefined;
  /**
   * String names of fields to search. Correspond by index to search field values
   */
  searchFields?: Array<components.IncidentProperties> | undefined;
  /**
   * Values of fields to search. Correspond by index to search fields. Unless field name contains "list", an individual search field value cannot be a list
   */
  searchFieldValues?: Array<string> | undefined;
  /**
   * The field whose value should be used to order the results
   */
  orderBy?: components.IncidentProperties | null | undefined;
  /**
   * The direction in which to order the results
   */
  orderByDirection?: components.OrderByDirection | null | undefined;
  /**
   * The fields to include in the response
   */
  fields?: Array<components.IncidentProperties> | null | undefined;
  /**
   * The start datetime for filtering results
   */
  startDatetime?: string | null | undefined;
  /**
   * The end datetime for filtering results
   */
  endDatetime?: string | null | undefined;
};

/** @internal */
export const IncidentListRequest$inboundSchema: z.ZodType<
  IncidentListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(25),
  search_fields: z.array(components.IncidentProperties$inboundSchema)
    .optional(),
  search_field_values: z.array(z.string()).optional(),
  order_by: z.nullable(components.IncidentProperties$inboundSchema).optional(),
  order_by_direction: z.nullable(components.OrderByDirection$inboundSchema)
    .optional(),
  fields: z.nullable(z.array(components.IncidentProperties$inboundSchema))
    .optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "search_fields": "searchFields",
    "search_field_values": "searchFieldValues",
    "order_by": "orderBy",
    "order_by_direction": "orderByDirection",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
  });
});

/** @internal */
export type IncidentListRequest$Outbound = {
  page?: number | null | undefined;
  limit: number;
  search_fields?: Array<string> | undefined;
  search_field_values?: Array<string> | undefined;
  order_by?: string | null | undefined;
  order_by_direction?: string | null | undefined;
  fields?: Array<string> | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
};

/** @internal */
export const IncidentListRequest$outboundSchema: z.ZodType<
  IncidentListRequest$Outbound,
  z.ZodTypeDef,
  IncidentListRequest
> = z.object({
  page: z.nullable(z.number().int()).optional(),
  limit: z.number().int().default(25),
  searchFields: z.array(components.IncidentProperties$outboundSchema)
    .optional(),
  searchFieldValues: z.array(z.string()).optional(),
  orderBy: z.nullable(components.IncidentProperties$outboundSchema).optional(),
  orderByDirection: z.nullable(components.OrderByDirection$outboundSchema)
    .optional(),
  fields: z.nullable(z.array(components.IncidentProperties$outboundSchema))
    .optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    searchFields: "search_fields",
    searchFieldValues: "search_field_values",
    orderBy: "order_by",
    orderByDirection: "order_by_direction",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncidentListRequest$ {
  /** @deprecated use `IncidentListRequest$inboundSchema` instead. */
  export const inboundSchema = IncidentListRequest$inboundSchema;
  /** @deprecated use `IncidentListRequest$outboundSchema` instead. */
  export const outboundSchema = IncidentListRequest$outboundSchema;
  /** @deprecated use `IncidentListRequest$Outbound` instead. */
  export type Outbound = IncidentListRequest$Outbound;
}

export function incidentListRequestToJSON(
  incidentListRequest: IncidentListRequest,
): string {
  return JSON.stringify(
    IncidentListRequest$outboundSchema.parse(incidentListRequest),
  );
}

export function incidentListRequestFromJSON(
  jsonString: string,
): SafeParseResult<IncidentListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncidentListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncidentListRequest' from JSON`,
  );
}
