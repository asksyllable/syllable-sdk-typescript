/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsFolderUploadFileRequest = {
  folderId: number;
  callId: string;
  agentNumber?: string | null | undefined;
  customerNumber?: string | null | undefined;
  startTime?: Date | null | undefined;
  endTime?: Date | null | undefined;
  duration?: number | null | undefined;
  metadata?: string | null | undefined;
  bodyInsightsFolderUploadFile?:
    | components.BodyInsightsFolderUploadFile
    | undefined;
};

/** @internal */
export const InsightsFolderUploadFileRequest$inboundSchema: z.ZodType<
  InsightsFolderUploadFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder_id: z.number().int(),
  call_id: z.string(),
  agent_number: z.nullable(z.string()).optional(),
  customer_number: z.nullable(z.string()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration: z.nullable(z.number()).optional(),
  metadata: z.nullable(z.string()).optional(),
  Body_insights_folder_upload_file: components
    .BodyInsightsFolderUploadFile$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "call_id": "callId",
    "agent_number": "agentNumber",
    "customer_number": "customerNumber",
    "start_time": "startTime",
    "end_time": "endTime",
    "Body_insights_folder_upload_file": "bodyInsightsFolderUploadFile",
  });
});

/** @internal */
export type InsightsFolderUploadFileRequest$Outbound = {
  folder_id: number;
  call_id: string;
  agent_number?: string | null | undefined;
  customer_number?: string | null | undefined;
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
  duration?: number | null | undefined;
  metadata?: string | null | undefined;
  Body_insights_folder_upload_file?:
    | components.BodyInsightsFolderUploadFile$Outbound
    | undefined;
};

/** @internal */
export const InsightsFolderUploadFileRequest$outboundSchema: z.ZodType<
  InsightsFolderUploadFileRequest$Outbound,
  z.ZodTypeDef,
  InsightsFolderUploadFileRequest
> = z.object({
  folderId: z.number().int(),
  callId: z.string(),
  agentNumber: z.nullable(z.string()).optional(),
  customerNumber: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  duration: z.nullable(z.number()).optional(),
  metadata: z.nullable(z.string()).optional(),
  bodyInsightsFolderUploadFile: components
    .BodyInsightsFolderUploadFile$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    callId: "call_id",
    agentNumber: "agent_number",
    customerNumber: "customer_number",
    startTime: "start_time",
    endTime: "end_time",
    bodyInsightsFolderUploadFile: "Body_insights_folder_upload_file",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsFolderUploadFileRequest$ {
  /** @deprecated use `InsightsFolderUploadFileRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsFolderUploadFileRequest$inboundSchema;
  /** @deprecated use `InsightsFolderUploadFileRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsFolderUploadFileRequest$outboundSchema;
  /** @deprecated use `InsightsFolderUploadFileRequest$Outbound` instead. */
  export type Outbound = InsightsFolderUploadFileRequest$Outbound;
}

export function insightsFolderUploadFileRequestToJSON(
  insightsFolderUploadFileRequest: InsightsFolderUploadFileRequest,
): string {
  return JSON.stringify(
    InsightsFolderUploadFileRequest$outboundSchema.parse(
      insightsFolderUploadFileRequest,
    ),
  );
}

export function insightsFolderUploadFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsFolderUploadFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsFolderUploadFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsFolderUploadFileRequest' from JSON`,
  );
}
